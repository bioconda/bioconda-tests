  Package        Version  Build       Channel                                    Size
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  Install:
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

  + cath-tools    0.16.5  hdb1ced3_0  /Users/runner/conda/conda-bld/osx-64       9 MB
  + libcxx        12.0.1  habf9029_0  conda-forge/osx-64                       Cached
  + llvm-openmp   12.0.1  hda6cdc1_1  conda-forge/osx-64                       287 KB

  Summary:

  Install: 3 packages

  Total download: 9 MB

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

Updating build index: /Users/runner/conda/conda-bld

TEST START: cath-tools-0.16.5-hdb1ced3_0.tar.bz2

## Package Plan ##

  environment location: /Users/runner/conda/conda-bld/cath-tools_1631015327809/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehol


The following NEW packages will be INSTALLED:

    cath-tools:  0.16.5-hdb1ced3_0 local      
    libcxx:      12.0.1-habf9029_0 conda-forge
    llvm-openmp: 12.0.1-hda6cdc1_1 conda-forge

Preparing transaction: ...working... done
Verifying transaction: ...working... done
Executing transaction: ...working... done
export PREFIX=/Users/runner/conda/conda-bld/cath-tools_1631015327809/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehol
export SRC_DIR=/Users/runner/conda/conda-bld/cath-tools_1631015327809/test_tmp
Usage: cath-assign-domains [options]

Use an SVM model on SSAP+PRC data to form a plan for assigning the domains to CATH superfamilies/folds

Miscellaneous:
  -h [ --help ]                                                     Output help message
  -v [ --version ]                                                  Output version information

CATH Assign Domains Specification:
  --svmlight-rbf-file arg                                           File containing SVM-light RBF model for CATH assignment
  --filelist-file arg                                               File of data files (one line per query domain containing: ssap_results_file prc_results_file)
  --sf-of-domain-file arg                                           File containing up-to-date assignments (one line per domain containing: domain_id superfamily_id)
  --forbidden-node arg (=2.105, 2.110, 2.115, 2.120, 2.130, 2.140)  List of nodes to which automatic assignment is forbidden; specify option multiple times for multiple nodes
                                                                    RECOMMENDED: do not specify this option so that the default list of propeller architectures is used.

Please tell us your cath-tools bugs/suggestions : https://github.com/UCLOrengoGroup/cath-tools/issues/new
Usage: cath-cluster --link-dirn <dirn> --levels <levels> [options] <input_file>

Cluster items based on the links between them.

When <input_file> is -, the links are read from standard input.

The clustering is complete-linkage.

Miscellaneous:
  -h [ --help ]                 Output help message
  -v [ --version ]              Output version information

Input:
  --link-dirn <dirn>            Interpret each link value as <dirn>, one of:
                                   DISTANCE - A higher value means the corresponding two entries are more distant
                                   STRENGTH - A higher value means the corresponding tow entries are more connected
  --column-idx <colnum> (=3)    Parse the link values (distances/strengths) from column number <colnum>
                                Must be â‰¥ 3 because columns 1 and 2 must contain the IDs
  --names-infile <file>         [RECOMMENDED] Read names and sorting scores from file <file> (or '-' for stdin)

Clustering:
  --levels <levels>             Cluster at levels <levels>, which is ordered values separated by commas (eg 35,60,95,100)

Output:
  --clusters-to-file <file>     Write the clustering to file <file> (or '-' for stdout)
  --merges-to-file <file>       Write the ordered list of merges to file <file> (or '-' for stdout)
  --clust-spans-to-file <file>  Write links that form spanning trees for each cluster to file <file> (or '-' for stdout)
  --reps-to-file <file>         Write the list of representatives to file <file> (or '-' for stdout)

Links input format: `id1 id2 other columns afterwards`
...where --column-idx can be used to specify the column that contains the values

Names input format: `id score`
...where score is used to sort such that lower-scored entries appear earlier

Please tell us your cath-tools bugs/suggestions : https://github.com/UCLOrengoGroup/cath-tools/issues/new
Usage: cath-map-clusters [options] <input_file>

Map names from previous clusters to new clusters based on (the overlaps between)
their members (which may be specified as regions within a parent sequence).
Renumber any clusters with no equivalents.

When <input_file> is -, the input is read from standard input.

Miscellaneous:
  -h [ --help ]                         Output help message
  -v [ --version ]                      Output version information

Input:
  --map-from-clustmemb-file <file>      Map numbers from previous clusters specified in <file> to their equivalents in the working clusters where possible and
                                        if all the cluster names in <file> are positive integers, renumber leftover new clusters from one plus the largest
                                        or if not, rename with new_cmc_cluster_1, new_cmc_cluster_2, ...
                                        (of, if unspecified, renumber all working clusters from 1 upwards)
  --read-batches-from-input             Read batches of work from the input file with lines of format: `batch_id working_clust_memb_file prev_clust_memb_file` where:
                                         * batch_id             is a unique label for the batch (with no whitespace)
                                         * prev_clust_memb_file is optional

Mapping:
  --min_equiv_dom_ol <percent> (=60)    Define domain equivalence as: sharing more than <percent>% of residues (over the longest domain)
                                        (where <percent> must be â‰¥ 50)
  --min_equiv_clust_ol <percent> (=60)  Define cluster equivalence as: more than <percent>% of the map-from cluster's members having equivalents in the working cluster
                                        [and them being equivalent to > 20% of the working cluster's entries and > 50% of those that have an equivalence]
                                        (where <percent> must be â‰¥ 50%)

Output:
  --append-batch-id <id>                Append batch ID <id> as an extra column in the results output (equivalent to the first column in a --multi-batch-file input file)
  --output-to-file <file>               Write output to file <file> (or, if unspecified, to stdout)
  --summarise-to-file <file>            Print a summary of the renumbering to file <file>
  --print-entry-results                 Output the entry (domain)-level mapping results

Detailed help:
  --sorting-help                        Show the criteria for sorting unmapped clusters

The input cluster-membership data should contain lines like:

cluster_name domain_id

...where domain_id is a sequence/protein name, optionally suffixed with the domain's segments in notation like '/100-199,350-399'. The suffixes should be present for all of the domain IDs or for none of them. Domains shouldn't overlap with others in the same cluster-membership data.

Input data doesn't have to be grouped by cluster.

NOTE: When mapping (ie using --map-from-clustmemb-file), the mapping algorithm treats the two cluster membership files differently - see --min_equiv_clust_ol description.

Please tell us your cath-tools bugs/suggestions : https://github.com/UCLOrengoGroup/cath-tools/issues/new
Usage: cath-refine-align alignment_source protein_file_source [superposition_outputs]

Iteratively refine an existing alignment by attempting to optimise SSAP score

Please specify:
 * at most one alignment (default: --do-the-ssaps)
 * one method of reading proteins (number of proteins currently restricted to 2)

PyMOL is started if no alignment or superposition output option is specified

Miscellaneous:
  -h [ --help ]                      Output help message
  -v [ --version ]                   Output version information

[1mInput[0m:

Alignment source:
  --res-name-align                   Align residues by simply matching their names (numbers+insert)
                                     (for multiple models of the same structure)
  --fasta-aln-infile <file>          Read FASTA alignment from file <file>
  --ssap-aln-infile <file>           Read SSAP alignment from file <file>
  --cora-aln-infile <file>           Read CORA alignment from file <file>
  --ssap-scores-infile <file>        Glue pairwise alignments together using SSAP scores in file <file>
                                     Assumes all .list alignment files in same directory
  --do-the-ssaps [=<dir>(="")]       Do the required SSAPs in directory <dir>; use results as with --ssap-scores-infile
                                     Use a suitable temp directory if none is specified

Alignment refining:
  --align-refining <refn> (=HEAVY)   Apply <refn> refining to the alignment, one of available values:
                                        NO    - Don't refine the alignment
                                        LIGHT - Refine any alignments with few entries; glue alignments one more entry at a time
                                        HEAVY - Perform heavy (slow) refining on the alignment, including when gluing alignments together
                                     This can change the method of gluing alignments under --ssap-scores-infile and --do-the-ssaps

ID options:
  --id arg                           Structure ids

PDB files source:
  --pdb-infile <pdbfile>             Read PDB from file <pdbfile> (may be specified multiple times)
  --pdbs-from-stdin                  Read PDBs from stdin (separated by line: "END   ")

Regions:
  --align-regions <regions>          Handle region(s) <regions> as the alignment part of the structure.
                                     May be specified multiple times, in correspondence with the structures.
                                     Format is: D[5inwB02]251-348:B,408-416A:B
                                     (Put <regions> in quotes to prevent the square brackets confusing your shell ("No match"))

[1mOutput[0m:

Alignment output:
  --aln-to-cath-aln-file arg         [EXPERIMENTAL] Write the alignment to a CATH alignment file
  --aln-to-cath-aln-stdout           [EXPERIMENTAL] Print the alignment to stdout in CATH alignment format
  --aln-to-fasta-file arg            Write the alignment to a FASTA file
  --aln-to-fasta-stdout              Print the alignment to stdout in FASTA format
  --aln-to-ssap-file arg             Write the alignment to a SSAP file
  --aln-to-ssap-stdout               Print the alignment to stdout as SSAP
  --aln-to-html-file arg             Write the alignment to a HTML file
  --aln-to-html-stdout               Print the alignment to stdout as HTML

Superposition output:
  --sup-to-pdb-file arg              Write the superposed structures to a single PDB file arg, separated using faked chain codes
  --sup-to-pdb-files-dir arg         Write the superposed structures to separate PDB files in directory arg
  --sup-to-stdout                    Print the superposed structures to stdout, separated using faked chain codes
  --sup-to-pymol                     Start up PyMOL for viewing the superposition
  --pymol-program arg (="pymol")     Use arg as the PyMOL executable for viewing; may optionally include the full path
  --sup-to-pymol-file arg            Write the superposition to a PyMOL script arg
                                     (Recommended filename extension: .pml)
  --sup-to-json-file arg             Write the superposition to JSON superposition file
                                     (Recommended filename extension: .sup_json)

Viewer (eg PyMOL, Jmol etc) options:
  --viewer-colours <colrs>           Use <colrs> to colour successive entries in the viewer
                                     (format: colon-separated list of comma-separated triples of RGB values between 0 and 1)
                                     (will wrap-around when it runs out of colours)
  --gradient-colour-alignment        Colour the length of the alignment with a rainbow gradient (blue -> red)
  --show-scores-if-present           Show the alignment scores
                                     (use with gradient-colour-alignment)
  --scores-to-equivs                 Show the alignment scores to equivalent positions, which increases relative scores where few entries are aligned
                                     (use with --gradient-colour-alignment and --show-scores-if-present)
  --normalise-scores                 When showing scores, normalise them to the highest score in the alignment
                                     (use with --gradient-colour-alignment and --show-scores-if-present)

Please tell us your cath-tools bugs/suggestions : https://github.com/UCLOrengoGroup/cath-tools/issues/new
Usage: cath-resolve-hits [options] <input_file>

Collapse a list of domain matches to your query sequence(s) down to the
non-overlapping subset (ie domain architecture) that maximises the sum of the
hits' scores.

When <input_file> is -, the input is read from standard input.

The input data may contain unsorted hits for different query protein sequences.

However, if your input data is already grouped by query protein sequence, then
specify the --input-hits-are-grouped flag for faster runs that use less memory.

Miscellaneous:
  -h [ --help ]                                  Output help message
  -v [ --version ]                               Output version information

Input:
  --input-format <format> (=raw_with_scores)     Parse the input data from <format>, one of available formats:
                                                    hmmer_domtblout  - HMMER domtblout format (must assume all hits are continuous)
                                                    hmmscan_out      - HMMER hmmscan output format (can be used to deduce discontinuous hits)
                                                    hmmsearch_out    - HMMER hmmsearch output format (can be used to deduce discontinuous hits)
                                                    raw_with_scores  - "raw" format with scores
                                                    raw_with_evalues - "raw" format with evalues
  --min-gap-length <length> (=30)                When parsing starts/stops from alignment data, ignore gaps of less than <length> residues
  --input-hits-are-grouped                       Rely on the input hits being grouped by query protein
                                                 (so the run is faster and uses less memory)

Segment overlap/removal:
  --overlap-trim-spec <trim> (=30/10)            Allow different hits' segments to overlap a bit by trimming all segments using spec <trim>
                                                 of the form n/m (n is a segment length; m is the *total* length to be trimmed off both ends)
                                                 For longer segments, total trim stays at m; for shorter, it decreases linearly (to 0 for length 1).
                                                 To choose: set m to the biggest total trim you'd want for a really long segment;
                                                            then, set n to length of the shortest segment you'd want to have that total trim
  --min-seg-length <length> (=7)                 Ignore all segments that are fewer than <length> residues long

Hit preference:
  --long-domains-preference <val> (=0)           Prefer longer hits to degree <val>
                                                 (<val> may be negative to prefer shorter; 0 leaves scores unaffected)
  --high-scores-preference <val> (=0)            Prefer higher scores to degree <val>
                                                 (<val> may be negative to reduce preference for higher scores; 0 leaves scores unaffected)
  --apply-cath-rules                             [DEPRECATED] Apply rules specific to CATH-Gene3D during the parsing and processing
  --naive-greedy                                 Use a naive, greedy approach to resolving (not recommended except for comparison)

Hit filtering:
  --worst-permissible-evalue <evalue> (=0.001)   Ignore any hits with an evalue worse than <evalue>
  --worst-permissible-bitscore <bitscore> (=10)  Ignore any hits with a bitscore worse than <bitscore>
  --worst-permissible-score <score>              Ignore any hits with a score worse than <score>
  --filter-query-id <id>                         Ignore all input data except that for query protein(s) <id>
                                                 (may be specified multiple times for multiple query proteins)
  --limit-queries [=<num>(=1)]                   Only process the first <num> query protein(s) encountered in the input data

Output ([...]-to-file options may be specified multiple times):
  --hits-text-to-file <file>                     Write the resolved hits in plain text to file <file>
  --quiet                                        Suppress the default output of resolved hits in plain text to stdout
  --output-trimmed-hits                          When writing out the final hits, output the hits' starts/stop as they are *after trimming*
  --summarise-to-file <file>                     Write a brief text summary of the input data to file <file> (or '-' for stdout)
  --html-output-to-file <file>                   Write the results as HTML to file <file> (or '-' for stdout)
  --json-output-to-file <file>                   Write the results as JSON to file <file> (or '-' for stdout)
  --export-css-file <file>                       Export the CSS used in the HTML output to <file> (or '-' for stdout)

HTML:
  --restrict-html-within-body                    Restrict HTML output to the contents of the body tag.
                                                 The contents should be included inside a body tag of class crh-body
  --html-max-num-non-soln-hits <num> (=80)       Only display up to <num> non-solution hits in the HTML
  --html-exclude-rejected-hits                   Exclude hits rejected by the score filters from the HTML

Detailed help:
  --cath-rules-help                              Show help on the rules activated by the (DEPRECATED) --apply-cath-rules option
  --raw-format-help                              Show help about the raw input formats (raw_with_scores and raw_with_evalues)

The standard output is one line per selected hit, preceded by header lines (beginning "#"), the last of which (beginning "#FIELDS") lists the fields in the file, typically:
  #FIELDS query-id match-id score boundaries resolved
(`boundaries` and `resolved` describe a domain's starts / stops; `resolved` may include adjustments made to resolve overlaps between hits)

Please tell us your cath-tools bugs/suggestions : https://github.com/UCLOrengoGroup/cath-tools/issues/new
Usage: cath-score-align alignment_source protein_file_source [superposition_outputs]

Score an existing alignment using structural data

Please specify:
 * at most one alignment (default: --do-the-ssaps)
 * one method of reading proteins (number of proteins currently restricted to 2

Miscellaneous:
  -h [ --help ]                   Output help message
  -v [ --version ]                Output version information

Alignment source:
  --res-name-align                Align residues by simply matching their names (numbers+insert)
                                  (for multiple models of the same structure)
  --fasta-aln-infile <file>       Read FASTA alignment from file <file>
  --ssap-aln-infile <file>        Read SSAP alignment from file <file>
  --cora-aln-infile <file>        Read CORA alignment from file <file>
  --ssap-scores-infile <file>     Glue pairwise alignments together using SSAP scores in file <file>
                                  Assumes all .list alignment files in same directory
  --do-the-ssaps [=<dir>(="")]    Do the required SSAPs in directory <dir>; use results as with --ssap-scores-infile
                                  Use a suitable temp directory if none is specified

Alignment refining:
  --align-refining <refn> (=NO)   Apply <refn> refining to the alignment, one of available values:
                                     NO    - Don't refine the alignment
                                     LIGHT - Refine any alignments with few entries; glue alignments one more entry at a time
                                     HEAVY - Perform heavy (slow) refining on the alignment, including when gluing alignments together
                                  This can change the method of gluing alignments under --ssap-scores-infile and --do-the-ssaps

PDB files source:
  --pdb-infile <pdbfile>          Read PDB from file <pdbfile> (may be specified multiple times)
  --pdbs-from-stdin               Read PDBs from stdin (separated by line: "END   ")

Please tell us your cath-tools bugs/suggestions : https://github.com/UCLOrengoGroup/cath-tools/issues/new
Usage: cath-ssap [options] <protein1> <protein2>
Usage: cath-superpose alignment_source pdb_file_source [superposition_outputs]

Superpose protein structures using an existing alignment

Please specify:
 * at most one superposition JSON or alignment (default: --do-the-ssaps)
 * one method of reading PDB files (number to match the alignment)

PyMOL is started if no alignment or superposition output option is specified

Miscellaneous:
  -h [ --help ]                            Output help message
  -v [ --version ]                         Output version information

[1mInput[0m:

Alignment source:
  --res-name-align                         Align residues by simply matching their names (numbers+insert)
                                           (for multiple models of the same structure)
  --fasta-aln-infile <file>                Read FASTA alignment from file <file>
  --ssap-aln-infile <file>                 Read SSAP alignment from file <file>
  --cora-aln-infile <file>                 Read CORA alignment from file <file>
  --ssap-scores-infile <file>              Glue pairwise alignments together using SSAP scores in file <file>
                                           Assumes all .list alignment files in same directory
  --do-the-ssaps [=<dir>(="")]             Do the required SSAPs in directory <dir>; use results as with --ssap-scores-infile
                                           Use a suitable temp directory if none is specified

Alignment refining:
  --align-refining <refn> (=NO)            Apply <refn> refining to the alignment, one of available values:
                                              NO    - Don't refine the alignment
                                              LIGHT - Refine any alignments with few entries; glue alignments one more entry at a time
                                              HEAVY - Perform heavy (slow) refining on the alignment, including when gluing alignments together
                                           This can change the method of gluing alignments under --ssap-scores-infile and --do-the-ssaps

Superposition source:
  --json-sup-infile <file>                 Read superposition from file <file>

ID options:
  --id arg                                 Structure ids

PDB files source:
  --pdb-infile <pdbfile>                   Read PDB from file <pdbfile> (may be specified multiple times)
  --pdbs-from-stdin                        Read PDBs from stdin (separated by line: "END   ")

Regions:
  --align-regions <regions>                Handle region(s) <regions> as the alignment part of the structure.
                                           May be specified multiple times, in correspondence with the structures.
                                           Format is: D[5inwB02]251-348:B,408-416A:B
                                           (Put <regions> in quotes to prevent the square brackets confusing your shell ("No match"))

[1mOutput[0m:

Alignment output:
  --aln-to-cath-aln-file arg               [EXPERIMENTAL] Write the alignment to a CATH alignment file
  --aln-to-cath-aln-stdout                 [EXPERIMENTAL] Print the alignment to stdout in CATH alignment format
  --aln-to-fasta-file arg                  Write the alignment to a FASTA file
  --aln-to-fasta-stdout                    Print the alignment to stdout in FASTA format
  --aln-to-ssap-file arg                   Write the alignment to a SSAP file
  --aln-to-ssap-stdout                     Print the alignment to stdout as SSAP
  --aln-to-html-file arg                   Write the alignment to a HTML file
  --aln-to-html-stdout                     Print the alignment to stdout as HTML

Superposition output:
  --sup-to-pdb-file arg                    Write the superposed structures to a single PDB file arg, separated using faked chain codes
  --sup-to-pdb-files-dir arg               Write the superposed structures to separate PDB files in directory arg
  --sup-to-stdout                          Print the superposed structures to stdout, separated using faked chain codes
  --sup-to-pymol                           Start up PyMOL for viewing the superposition
  --pymol-program arg (="pymol")           Use arg as the PyMOL executable for viewing; may optionally include the full path
  --sup-to-pymol-file arg                  Write the superposition to a PyMOL script arg
                                           (Recommended filename extension: .pml)
  --sup-to-json-file arg                   Write the superposition to JSON superposition file
                                           (Recommended filename extension: .sup_json)

Viewer (eg PyMOL, Jmol etc) options:
  --viewer-colours <colrs>                 Use <colrs> to colour successive entries in the viewer
                                           (format: colon-separated list of comma-separated triples of RGB values between 0 and 1)
                                           (will wrap-around when it runs out of colours)
  --gradient-colour-alignment              Colour the length of the alignment with a rainbow gradient (blue -> red)
  --show-scores-if-present                 Show the alignment scores
                                           (use with gradient-colour-alignment)
  --scores-to-equivs                       Show the alignment scores to equivalent positions, which increases relative scores where few entries are aligned
                                           (use with --gradient-colour-alignment and --show-scores-if-present)
  --normalise-scores                       When showing scores, normalise them to the highest score in the alignment
                                           (use with --gradient-colour-alignment and --show-scores-if-present)

Superposition content:
  --regions-context <context> (=alone)     Show the alignment regions in the context <context>, one of available options:
                                              alone    - alone
                                              in_chain - within the chain(s) in which the regions appear
                                              in_pdb   - within the PDB in which the regions appear
  --show-dna-within-dist <dist> (=4)       Show DNA within <dist>Ã… of the alignment regions
  --show-organic-within-dist <dist> (=10)  Show organic molecules within <dist>Ã… of the alignment regions

Usage examples:
 * cath-superpose --ssap-aln-infile 1cukA1bvsA.list --pdb-infile $PDBDIR/1cukA --pdb-infile $PDBDIR/1bvsA --sup-to-pymol
     (Superpose 1cukA and 1bvsA (in directory $PDBDIR) based on SSAP alignment file 1cukA1bvsA.list and then display in PyMOL)
 * cat pdb1 end_file pdb2 end_file pdb3 | cath-superpose --pdbs-from-stdin --sup-to-stdout --res-name-align
     (Superpose the structures from stdin based on matching residue names and then write them to stdout [common Genome3D use case])

Please tell us your cath-tools bugs/suggestions : https://github.com/UCLOrengoGroup/cath-tools/issues/new

Resource usage statistics from testing cath-tools:
   Process count: 2
   CPU time: Sys=0:00:00.0, User=0:00:00.0
   Memory: 10.2M
   Disk usage: 9.5K
   Time elapsed: 0:00:02.2


TEST END: cath-tools-0.16.5-hdb1ced3_0.tar.bz2
--dirty flag and --keep-old-work not specified. Removing build/test folder after successful build/test.

