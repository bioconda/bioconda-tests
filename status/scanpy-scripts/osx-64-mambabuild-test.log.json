  Package                               Version  Build                   Channel                                    Size
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  Install:
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

  + alabaster                            0.7.12  py_0                    conda-forge/noarch                        15 KB
  + anndata                               0.7.6  py39h6e9494a_0          conda-forge/osx-64                       119 KB
  + appdirs                               1.4.4  pyh9f0ad1d_0            conda-forge/noarch                        13 KB
  + arpack                                3.7.0  hefb7bc6_2              conda-forge/osx-64                       195 KB
  + babel                                 2.9.1  pyh44b312d_0            conda-forge/noarch                         6 MB
  + bbknn                                 1.5.1  py39ha492530_1          bioconda/osx-64                           23 KB
  + blosc                                1.21.0  he49afe7_0              conda-forge/osx-64                       920 KB
  + brotli                                1.0.9  h0d85af4_5              conda-forge/osx-64                        18 KB
  + brotli-bin                            1.0.9  h0d85af4_5              conda-forge/osx-64                        17 KB
  + brotlipy                              0.7.0  py39h89e85a6_1001       conda-forge/osx-64                       Cached
  + brunsli                                 0.1  h046ec9c_0              conda-forge/osx-64                       179 KB
  + bzip2                                 1.0.8  h0d85af4_4              conda-forge/osx-64                       Cached
  + c-ares                               1.17.2  h0d85af4_0              conda-forge/osx-64                       Cached
  + ca-certificates                   2021.5.30  h033912b_0              conda-forge/osx-64                       Cached
  + certifi                           2021.5.30  py39h6e9494a_0          conda-forge/osx-64                       Cached
  + cffi                                 1.14.6  py39hb71fe58_0          conda-forge/osx-64                       Cached
  + cfitsio                               3.470  h01dc385_7              conda-forge/osx-64                         1 MB
  + chardet                               4.0.0  py39h6e9494a_1          conda-forge/osx-64                       Cached
  + charls                                2.2.0  h046ec9c_0              conda-forge/osx-64                        94 KB
  + charset-normalizer                    2.0.0  pyhd8ed1ab_0            conda-forge/noarch                       Cached
  + click                                 7.1.2  pyh9f0ad1d_0            conda-forge/noarch                        64 KB
  + cloudpickle                           1.6.0  py_0                    conda-forge/noarch                        22 KB
  + colorama                              0.4.4  pyh9f0ad1d_0            conda-forge/noarch                       Cached
  + cryptography                          3.4.7  py39ha2c9959_0          conda-forge/osx-64                       Cached
  + cycler                               0.10.0  py_2                    conda-forge/noarch                         9 KB
  + cytoolz                              0.11.0  py39h89e85a6_3          conda-forge/osx-64                       351 KB
  + dask-core                          2021.9.0  pyhd8ed1ab_0            conda-forge/noarch                       767 KB
  + decorator                             4.4.2  py_0                    conda-forge/noarch                        11 KB
  + docutils                             0.17.1  py39h6e9494a_0          conda-forge/osx-64                       761 KB
  + dunamai                               1.6.0  pyhd8ed1ab_0            conda-forge/noarch                        19 KB
  + freetype                             2.10.4  h4cff582_1              conda-forge/osx-64                       Cached
  + fsspec                             2021.8.1  pyhd8ed1ab_0            conda-forge/noarch                        82 KB
  + get_version                             3.5  pyhd8ed1ab_0            conda-forge/noarch                        22 KB
  + giflib                                5.2.1  hbcb3906_2              conda-forge/osx-64                        71 KB
  + glpk                                   4.65  h0f52abe_1004           conda-forge/osx-64                         1 MB
  + gmp                                   6.2.1  h2e338ed_0              conda-forge/osx-64                       Cached
  + h5py                                 2.10.0  nompi_py39h1bb8402_106  conda-forge/osx-64                       941 KB
  + harmonypy                             0.0.5  py_0                    bioconda/noarch                           27 KB
  + hdf5                                 1.10.6  nompi_hc5d9132_1114     conda-forge/osx-64                         3 MB
  + icu                                    68.1  h74dc148_0              conda-forge/osx-64                       Cached
  + idna                                    3.1  pyhd3deb0d_0            conda-forge/noarch                       Cached
  + igraph                                0.9.4  ha5be149_0              conda-forge/osx-64                         1 MB
  + imagecodecs                       2021.7.30  py39he5b32f2_0          conda-forge/osx-64                         6 MB
  + imageio                               2.9.0  py_0                    conda-forge/noarch                         3 MB
  + imagesize                             1.2.0  py_0                    conda-forge/noarch                         8 KB
  + importlib-metadata                    4.8.1  py39h6e9494a_0          conda-forge/osx-64                       Cached
  + importlib_metadata                    4.8.1  hd8ed1ab_0              conda-forge/noarch                         4 KB
  + jinja2                                3.0.1  pyhd8ed1ab_0            conda-forge/noarch                       Cached
  + joblib                                1.0.1  pyhd8ed1ab_0            conda-forge/noarch                       Cached
  + jpeg                                     9d  hbcb3906_0              conda-forge/osx-64                       Cached
  + jxrlib                                  1.1  h35c211d_2              conda-forge/osx-64                       226 KB
  + kiwisolver                            1.3.2  py39hf018cea_0          conda-forge/osx-64                        59 KB
  + krb5                                 1.19.2  hcfbf3a7_0              conda-forge/osx-64                       Cached
  + lcms2                                  2.12  h577c468_0              conda-forge/osx-64                       404 KB
  + legacy-api-wrap                         1.2  py_0                    conda-forge/noarch                        18 KB
  + leidenalg                             0.8.7  py39h9fcab8e_0          conda-forge/osx-64                       134 KB
  + lerc                                  2.2.1  h046ec9c_0              conda-forge/osx-64                       Cached
  + libaec                                1.0.5  he49afe7_0              conda-forge/osx-64                        38 KB
  + libblas                               3.9.0  11_osx64_openblas       conda-forge/osx-64                       Cached
  + libbrotlicommon                       1.0.9  h0d85af4_5              conda-forge/osx-64                        63 KB
  + libbrotlidec                          1.0.9  h0d85af4_5              conda-forge/osx-64                        32 KB
  + libbrotlienc                          1.0.9  h0d85af4_5              conda-forge/osx-64                       324 KB
  + libcblas                              3.9.0  11_osx64_openblas       conda-forge/osx-64                       Cached
  + libcurl                              7.78.0  hf45b732_0              conda-forge/osx-64                       Cached
  + libcxx                               12.0.1  habf9029_0              conda-forge/osx-64                       Cached
  + libdeflate                              1.8  h0d85af4_0              conda-forge/osx-64                        67 KB
  + libedit                        3.1.20191231  h0678c8f_2              conda-forge/osx-64                       Cached
  + libev                                  4.33  haf1e3a3_1              conda-forge/osx-64                       Cached
  + libffi                                  3.3  h046ec9c_2              conda-forge/osx-64                       Cached
  + libgfortran                           5.0.0  9_3_0_h6c81a4c_23       conda-forge/osx-64                       Cached
  + libgfortran5                          9.3.0  h6c81a4c_23             conda-forge/osx-64                       Cached
  + libiconv                               1.16  haf1e3a3_0              conda-forge/osx-64                       Cached
  + liblapack                             3.9.0  11_osx64_openblas       conda-forge/osx-64                       Cached
  + libllvm11                            11.1.0  hd011deb_2              conda-forge/osx-64                        22 MB
  + libnghttp2                           1.43.0  h07e645a_0              conda-forge/osx-64                       Cached
  + libopenblas                          0.3.17  openmp_h3351f45_1       conda-forge/osx-64                       Cached
  + libpng                               1.6.37  h7cec526_2              conda-forge/osx-64                       Cached
  + libssh2                              1.10.0  h52ee1ee_0              conda-forge/osx-64                       Cached
  + libtiff                               4.3.0  h1167814_0              conda-forge/osx-64                       590 KB
  + libwebp-base                          1.2.1  h0d85af4_0              conda-forge/osx-64                       Cached
  + libxml2                              2.9.12  h93ec3fd_0              conda-forge/osx-64                       Cached
  + libzopfli                             1.0.3  h046ec9c_0              conda-forge/osx-64                       158 KB
  + llvm-openmp                          12.0.1  hda6cdc1_1              conda-forge/osx-64                       Cached
  + llvmlite                             0.37.0  py39h798a4f4_0          conda-forge/osx-64                       238 KB
  + locket                                0.2.0  py_2                    conda-forge/noarch                         6 KB
  + loompy                                3.0.6  py_0                    conda-forge/noarch                        40 KB
  + louvain                               0.7.0  py39h3332fd8_1          conda-forge/osx-64                       490 KB
  + lz4-c                                 1.9.3  he49afe7_1              conda-forge/osx-64                       Cached
  + markupsafe                            2.0.1  py39h89e85a6_0          conda-forge/osx-64                       Cached
  + matplotlib-base                       3.4.3  py39hb07454d_0          conda-forge/osx-64                         7 MB
  + metis                                 5.1.0  h2e338ed_1006           conda-forge/osx-64                         4 MB
  + mnnpy                               0.1.9.5  py39ha492530_2          bioconda/osx-64                           92 KB
  + mock                                  4.0.3  py39h6e9494a_1          conda-forge/osx-64                        51 KB
  + mpfr                                  4.1.0  h0f52abe_1              conda-forge/osx-64                       Cached
  + multicore-tsne                 0.1_d4ff4aab  py39ha1f3e3e_1          conda-forge/osx-64                        45 KB
  + natsort                               7.1.1  pyhd8ed1ab_0            conda-forge/noarch                        33 KB
  + ncurses                                 6.2  h2e338ed_4              conda-forge/osx-64                       Cached
  + networkx                              2.6.2  pyhd8ed1ab_0            conda-forge/noarch                         1 MB
  + numba                                0.54.0  py39h58500fb_0          conda-forge/osx-64                         4 MB
  + numexpr                               2.7.3  py39h4d6be9b_0          conda-forge/osx-64                       131 KB
  + numpy                                1.20.3  py39h7eed0ac_1          conda-forge/osx-64                         5 MB
  + numpy_groupies                       0.9.13  pyh9f0ad1d_1            conda-forge/noarch                        22 KB
  + olefile                                0.46  pyh9f0ad1d_1            conda-forge/noarch                        32 KB
  + openjpeg                              2.4.0  h6e7aa92_1              conda-forge/osx-64                       374 KB
  + openssl                              1.1.1l  h0d85af4_0              conda-forge/osx-64                       Cached
  + packaging                              21.0  pyhd8ed1ab_0            conda-forge/noarch                        35 KB
  + pandas                                1.3.2  py39h4d6be9b_0          conda-forge/osx-64                        12 MB
  + partd                                 1.2.0  pyhd8ed1ab_0            conda-forge/noarch                        18 KB
  + patsy                                 0.5.1  py_0                    conda-forge/noarch                       Cached
  + pillow                                8.3.2  py39he9bb72f_0          conda-forge/osx-64                       660 KB
  + pip                                  21.2.4  pyhd8ed1ab_0            conda-forge/noarch                       Cached
  + pooch                                 1.5.1  pyhd8ed1ab_0            conda-forge/noarch                        45 KB
  + pycparser                              2.20  pyh9f0ad1d_2            conda-forge/noarch                       Cached
  + pygments                             2.10.0  pyhd8ed1ab_0            conda-forge/noarch                       Cached
  + pynndescent                           0.5.4  pyh6c4a22f_0            conda-forge/noarch                        44 KB
  + pyopenssl                            20.0.1  pyhd8ed1ab_0            conda-forge/noarch                       Cached
  + pyparsing                             2.4.7  pyh9f0ad1d_0            conda-forge/noarch                       Cached
  + pysocks                               1.7.1  py39h6e9494a_3          conda-forge/osx-64                       Cached
  + pytables                              3.6.1  py39hd07922a_3          conda-forge/osx-64                         1 MB
  + python                                3.9.7  hd187cdc_0_cpython      conda-forge/osx-64                       Cached
  + python-annoy                         1.17.0  py39h9fcab8e_2          conda-forge/osx-64                        61 KB
  + python-dateutil                       2.8.2  pyhd8ed1ab_0            conda-forge/noarch                       240 KB
  + python-igraph                         0.9.6  py39h8c2f370_0          conda-forge/osx-64                         1 MB
  + python_abi                              3.9  2_cp39                  conda-forge/osx-64                       Cached
  + pytz                                 2021.1  pyhd8ed1ab_0            conda-forge/noarch                       Cached
  + pywavelets                            1.1.1  py39hc89836e_3          conda-forge/osx-64                         4 MB
  + pyyaml                                5.4.1  py39h89e85a6_1          conda-forge/osx-64                       Cached
  + readline                                8.1  h05e3726_0              conda-forge/osx-64                       Cached
  + requests                             2.26.0  pyhd8ed1ab_0            conda-forge/noarch                       Cached
  + scanpy                                1.8.1  pyhd8ed1ab_0            conda-forge/noarch                         2 MB
  + scanpy-scripts                        1.1.1  pypyhdfd78af_1          /Users/runner/conda/conda-bld/osx-64       2 MB
  + scikit-image                         0.18.3  py39h4d6be9b_0          conda-forge/osx-64                        11 MB
  + scikit-learn                         0.24.2  py39hd4eea88_1          conda-forge/osx-64                         7 MB
  + scikit-misc                           0.1.3  py39h9ca4c2c_2          conda-forge/osx-64                       188 KB
  + scipy                                 1.7.1  py39h056f1c0_0          conda-forge/osx-64                        20 MB
  + scrublet                              0.2.3  pyh5e36f6f_1            bioconda/noarch                           19 KB
  + seaborn                              0.11.2  hd8ed1ab_0              conda-forge/noarch                         4 KB
  + seaborn-base                         0.11.2  pyhd8ed1ab_0            conda-forge/noarch                       223 KB
  + setuptools                           57.4.0  py39h6e9494a_0          conda-forge/osx-64                       Cached
  + sinfo                                 0.3.1  py_0                    conda-forge/noarch                        11 KB
  + six                                  1.16.0  pyh6c4a22f_0            conda-forge/noarch                       Cached
  + snappy                                1.1.8  hb1e8313_3              conda-forge/osx-64                        29 KB
  + snowballstemmer                       2.1.0  pyhd8ed1ab_0            conda-forge/noarch                        57 KB
  + sphinx                                4.1.2  pyh6c4a22f_1            conda-forge/noarch                         2 MB
  + sphinxcontrib-applehelp               1.0.2  py_0                    conda-forge/noarch                        28 KB
  + sphinxcontrib-devhelp                 1.0.2  py_0                    conda-forge/noarch                        22 KB
  + sphinxcontrib-htmlhelp                2.0.0  pyhd8ed1ab_0            conda-forge/noarch                        31 KB
  + sphinxcontrib-jsmath                  1.0.1  py_0                    conda-forge/noarch                         7 KB
  + sphinxcontrib-qthelp                  1.0.3  py_0                    conda-forge/noarch                        25 KB
  + sphinxcontrib-serializinghtml         1.1.5  pyhd8ed1ab_0            conda-forge/noarch                        27 KB
  + sqlite                               3.36.0  h23a322b_0              conda-forge/osx-64                       Cached
  + statsmodels                          0.12.2  py39hc89836e_0          conda-forge/osx-64                        11 MB
  + stdlib-list                           0.7.0  py_2                    conda-forge/noarch                        27 KB
  + suitesparse                          5.10.1  h7aff33d_1              conda-forge/osx-64                         2 MB
  + tbb                                2021.3.0  h940c156_0              conda-forge/osx-64                       162 KB
  + texttable                             1.6.4  pyhd8ed1ab_0            conda-forge/noarch                        16 KB
  + threadpoolctl                         2.2.0  pyh8a188c0_0            conda-forge/noarch                        16 KB
  + tifffile                          2021.8.30  pyhd8ed1ab_0            conda-forge/noarch                       134 KB
  + tk                                   8.6.11  h5dbffcc_1              conda-forge/osx-64                       Cached
  + toolz                                0.11.1  py_0                    conda-forge/noarch                        46 KB
  + tornado                                 6.1  py39h89e85a6_1          conda-forge/osx-64                       645 KB
  + tqdm                                 4.62.2  pyhd8ed1ab_0            conda-forge/noarch                       Cached
  + tzdata                                2021a  he74cb21_1              conda-forge/noarch                       Cached
  + umap-learn                            0.5.1  py39h6e9494a_1          conda-forge/osx-64                       123 KB
  + urllib3                              1.26.6  pyhd8ed1ab_0            conda-forge/noarch                       Cached
  + wheel                                0.37.0  pyhd8ed1ab_1            conda-forge/noarch                       Cached
  + xz                                    5.2.5  haf1e3a3_1              conda-forge/osx-64                       Cached
  + yaml                                  0.2.5  haf1e3a3_0              conda-forge/osx-64                       Cached
  + zfp                                   0.5.5  h4a89273_6              conda-forge/osx-64                       172 KB
  + zipp                                  3.5.0  pyhd8ed1ab_0            conda-forge/noarch                       Cached
  + zlib                                 1.2.11  h7795811_1010           conda-forge/osx-64                       Cached
  + zstd                                  1.5.0  h582d3a0_0              conda-forge/osx-64                       Cached

  Summary:

  Install: 172 packages

  Total download: 152 MB

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Updating build index: /Users/runner/conda/conda-bld

TEST START: scanpy-scripts-1.1.1-pypyhdfd78af_1.tar.bz2

## Package Plan ##

  environment location: /Users/runner/conda/conda-bld/scanpy-scripts_1630759348521/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac


The following NEW packages will be INSTALLED:

    alabaster:                     0.7.12-py_0                   conda-forge
    anndata:                       0.7.6-py39h6e9494a_0          conda-forge
    appdirs:                       1.4.4-pyh9f0ad1d_0            conda-forge
    arpack:                        3.7.0-hefb7bc6_2              conda-forge
    babel:                         2.9.1-pyh44b312d_0            conda-forge
    bbknn:                         1.5.1-py39ha492530_1          bioconda   
    blosc:                         1.21.0-he49afe7_0             conda-forge
    brotli:                        1.0.9-h0d85af4_5              conda-forge
    brotli-bin:                    1.0.9-h0d85af4_5              conda-forge
    brotlipy:                      0.7.0-py39h89e85a6_1001       conda-forge
    brunsli:                       0.1-h046ec9c_0                conda-forge
    bzip2:                         1.0.8-h0d85af4_4              conda-forge
    c-ares:                        1.17.2-h0d85af4_0             conda-forge
    ca-certificates:               2021.5.30-h033912b_0          conda-forge
    certifi:                       2021.5.30-py39h6e9494a_0      conda-forge
    cffi:                          1.14.6-py39hb71fe58_0         conda-forge
    cfitsio:                       3.470-h01dc385_7              conda-forge
    chardet:                       4.0.0-py39h6e9494a_1          conda-forge
    charls:                        2.2.0-h046ec9c_0              conda-forge
    charset-normalizer:            2.0.0-pyhd8ed1ab_0            conda-forge
    click:                         7.1.2-pyh9f0ad1d_0            conda-forge
    cloudpickle:                   1.6.0-py_0                    conda-forge
    colorama:                      0.4.4-pyh9f0ad1d_0            conda-forge
    cryptography:                  3.4.7-py39ha2c9959_0          conda-forge
    cycler:                        0.10.0-py_2                   conda-forge
    cytoolz:                       0.11.0-py39h89e85a6_3         conda-forge
    dask-core:                     2021.9.0-pyhd8ed1ab_0         conda-forge
    decorator:                     4.4.2-py_0                    conda-forge
    docutils:                      0.17.1-py39h6e9494a_0         conda-forge
    dunamai:                       1.6.0-pyhd8ed1ab_0            conda-forge
    freetype:                      2.10.4-h4cff582_1             conda-forge
    fsspec:                        2021.8.1-pyhd8ed1ab_0         conda-forge
    get_version:                   3.5-pyhd8ed1ab_0              conda-forge
    giflib:                        5.2.1-hbcb3906_2              conda-forge
    glpk:                          4.65-h0f52abe_1004            conda-forge
    gmp:                           6.2.1-h2e338ed_0              conda-forge
    h5py:                          2.10.0-nompi_py39h1bb8402_106 conda-forge
    harmonypy:                     0.0.5-py_0                    bioconda   
    hdf5:                          1.10.6-nompi_hc5d9132_1114    conda-forge
    icu:                           68.1-h74dc148_0               conda-forge
    idna:                          3.1-pyhd3deb0d_0              conda-forge
    igraph:                        0.9.4-ha5be149_0              conda-forge
    imagecodecs:                   2021.7.30-py39he5b32f2_0      conda-forge
    imageio:                       2.9.0-py_0                    conda-forge
    imagesize:                     1.2.0-py_0                    conda-forge
    importlib-metadata:            4.8.1-py39h6e9494a_0          conda-forge
    importlib_metadata:            4.8.1-hd8ed1ab_0              conda-forge
    jinja2:                        3.0.1-pyhd8ed1ab_0            conda-forge
    joblib:                        1.0.1-pyhd8ed1ab_0            conda-forge
    jpeg:                          9d-hbcb3906_0                 conda-forge
    jxrlib:                        1.1-h35c211d_2                conda-forge
    kiwisolver:                    1.3.2-py39hf018cea_0          conda-forge
    krb5:                          1.19.2-hcfbf3a7_0             conda-forge
    lcms2:                         2.12-h577c468_0               conda-forge
    legacy-api-wrap:               1.2-py_0                      conda-forge
    leidenalg:                     0.8.7-py39h9fcab8e_0          conda-forge
    lerc:                          2.2.1-h046ec9c_0              conda-forge
    libaec:                        1.0.5-he49afe7_0              conda-forge
    libblas:                       3.9.0-11_osx64_openblas       conda-forge
    libbrotlicommon:               1.0.9-h0d85af4_5              conda-forge
    libbrotlidec:                  1.0.9-h0d85af4_5              conda-forge
    libbrotlienc:                  1.0.9-h0d85af4_5              conda-forge
    libcblas:                      3.9.0-11_osx64_openblas       conda-forge
    libcurl:                       7.78.0-hf45b732_0             conda-forge
    libcxx:                        12.0.1-habf9029_0             conda-forge
    libdeflate:                    1.8-h0d85af4_0                conda-forge
    libedit:                       3.1.20191231-h0678c8f_2       conda-forge
    libev:                         4.33-haf1e3a3_1               conda-forge
    libffi:                        3.3-h046ec9c_2                conda-forge
    libgfortran:                   5.0.0-9_3_0_h6c81a4c_23       conda-forge
    libgfortran5:                  9.3.0-h6c81a4c_23             conda-forge
    libiconv:                      1.16-haf1e3a3_0               conda-forge
    liblapack:                     3.9.0-11_osx64_openblas       conda-forge
    libllvm11:                     11.1.0-hd011deb_2             conda-forge
    libnghttp2:                    1.43.0-h07e645a_0             conda-forge
    libopenblas:                   0.3.17-openmp_h3351f45_1      conda-forge
    libpng:                        1.6.37-h7cec526_2             conda-forge
    libssh2:                       1.10.0-h52ee1ee_0             conda-forge
    libtiff:                       4.3.0-h1167814_0              conda-forge
    libwebp-base:                  1.2.1-h0d85af4_0              conda-forge
    libxml2:                       2.9.12-h93ec3fd_0             conda-forge
    libzopfli:                     1.0.3-h046ec9c_0              conda-forge
    llvm-openmp:                   12.0.1-hda6cdc1_1             conda-forge
    llvmlite:                      0.37.0-py39h798a4f4_0         conda-forge
    locket:                        0.2.0-py_2                    conda-forge
    loompy:                        3.0.6-py_0                    conda-forge
    louvain:                       0.7.0-py39h3332fd8_1          conda-forge
    lz4-c:                         1.9.3-he49afe7_1              conda-forge
    markupsafe:                    2.0.1-py39h89e85a6_0          conda-forge
    matplotlib-base:               3.4.3-py39hb07454d_0          conda-forge
    metis:                         5.1.0-h2e338ed_1006           conda-forge
    mnnpy:                         0.1.9.5-py39ha492530_2        bioconda   
    mock:                          4.0.3-py39h6e9494a_1          conda-forge
    mpfr:                          4.1.0-h0f52abe_1              conda-forge
    multicore-tsne:                0.1_d4ff4aab-py39ha1f3e3e_1   conda-forge
    natsort:                       7.1.1-pyhd8ed1ab_0            conda-forge
    ncurses:                       6.2-h2e338ed_4                conda-forge
    networkx:                      2.6.2-pyhd8ed1ab_0            conda-forge
    numba:                         0.54.0-py39h58500fb_0         conda-forge
    numexpr:                       2.7.3-py39h4d6be9b_0          conda-forge
    numpy:                         1.20.3-py39h7eed0ac_1         conda-forge
    numpy_groupies:                0.9.13-pyh9f0ad1d_1           conda-forge
    olefile:                       0.46-pyh9f0ad1d_1             conda-forge
    openjpeg:                      2.4.0-h6e7aa92_1              conda-forge
    openssl:                       1.1.1l-h0d85af4_0             conda-forge
    packaging:                     21.0-pyhd8ed1ab_0             conda-forge
    pandas:                        1.3.2-py39h4d6be9b_0          conda-forge
    partd:                         1.2.0-pyhd8ed1ab_0            conda-forge
    patsy:                         0.5.1-py_0                    conda-forge
    pillow:                        8.3.2-py39he9bb72f_0          conda-forge
    pip:                           21.2.4-pyhd8ed1ab_0           conda-forge
    pooch:                         1.5.1-pyhd8ed1ab_0            conda-forge
    pycparser:                     2.20-pyh9f0ad1d_2             conda-forge
    pygments:                      2.10.0-pyhd8ed1ab_0           conda-forge
    pynndescent:                   0.5.4-pyh6c4a22f_0            conda-forge
    pyopenssl:                     20.0.1-pyhd8ed1ab_0           conda-forge
    pyparsing:                     2.4.7-pyh9f0ad1d_0            conda-forge
    pysocks:                       1.7.1-py39h6e9494a_3          conda-forge
    pytables:                      3.6.1-py39hd07922a_3          conda-forge
    python:                        3.9.7-hd187cdc_0_cpython      conda-forge
    python-annoy:                  1.17.0-py39h9fcab8e_2         conda-forge
    python-dateutil:               2.8.2-pyhd8ed1ab_0            conda-forge
    python-igraph:                 0.9.6-py39h8c2f370_0          conda-forge
    python_abi:                    3.9-2_cp39                    conda-forge
    pytz:                          2021.1-pyhd8ed1ab_0           conda-forge
    pywavelets:                    1.1.1-py39hc89836e_3          conda-forge
    pyyaml:                        5.4.1-py39h89e85a6_1          conda-forge
    readline:                      8.1-h05e3726_0                conda-forge
    requests:                      2.26.0-pyhd8ed1ab_0           conda-forge
    scanpy:                        1.8.1-pyhd8ed1ab_0            conda-forge
    scanpy-scripts:                1.1.1-pypyhdfd78af_1          local      
    scikit-image:                  0.18.3-py39h4d6be9b_0         conda-forge
    scikit-learn:                  0.24.2-py39hd4eea88_1         conda-forge
    scikit-misc:                   0.1.3-py39h9ca4c2c_2          conda-forge
    scipy:                         1.7.1-py39h056f1c0_0          conda-forge
    scrublet:                      0.2.3-pyh5e36f6f_1            bioconda   
    seaborn:                       0.11.2-hd8ed1ab_0             conda-forge
    seaborn-base:                  0.11.2-pyhd8ed1ab_0           conda-forge
    setuptools:                    57.4.0-py39h6e9494a_0         conda-forge
    sinfo:                         0.3.1-py_0                    conda-forge
    six:                           1.16.0-pyh6c4a22f_0           conda-forge
    snappy:                        1.1.8-hb1e8313_3              conda-forge
    snowballstemmer:               2.1.0-pyhd8ed1ab_0            conda-forge
    sphinx:                        4.1.2-pyh6c4a22f_1            conda-forge
    sphinxcontrib-applehelp:       1.0.2-py_0                    conda-forge
    sphinxcontrib-devhelp:         1.0.2-py_0                    conda-forge
    sphinxcontrib-htmlhelp:        2.0.0-pyhd8ed1ab_0            conda-forge
    sphinxcontrib-jsmath:          1.0.1-py_0                    conda-forge
    sphinxcontrib-qthelp:          1.0.3-py_0                    conda-forge
    sphinxcontrib-serializinghtml: 1.1.5-pyhd8ed1ab_0            conda-forge
    sqlite:                        3.36.0-h23a322b_0             conda-forge
    statsmodels:                   0.12.2-py39hc89836e_0         conda-forge
    stdlib-list:                   0.7.0-py_2                    conda-forge
    suitesparse:                   5.10.1-h7aff33d_1             conda-forge
    tbb:                           2021.3.0-h940c156_0           conda-forge
    texttable:                     1.6.4-pyhd8ed1ab_0            conda-forge
    threadpoolctl:                 2.2.0-pyh8a188c0_0            conda-forge
    tifffile:                      2021.8.30-pyhd8ed1ab_0        conda-forge
    tk:                            8.6.11-h5dbffcc_1             conda-forge
    toolz:                         0.11.1-py_0                   conda-forge
    tornado:                       6.1-py39h89e85a6_1            conda-forge
    tqdm:                          4.62.2-pyhd8ed1ab_0           conda-forge
    tzdata:                        2021a-he74cb21_1              conda-forge
    umap-learn:                    0.5.1-py39h6e9494a_1          conda-forge
    urllib3:                       1.26.6-pyhd8ed1ab_0           conda-forge
    wheel:                         0.37.0-pyhd8ed1ab_1           conda-forge
    xz:                            5.2.5-haf1e3a3_1              conda-forge
    yaml:                          0.2.5-haf1e3a3_0              conda-forge
    zfp:                           0.5.5-h4a89273_6              conda-forge
    zipp:                          3.5.0-pyhd8ed1ab_0            conda-forge
    zlib:                          1.2.11-h7795811_1010          conda-forge
    zstd:                          1.5.0-h582d3a0_0              conda-forge

Preparing transaction: ...working... done
Verifying transaction: ...working... done
Executing transaction: ...working... done
export PREFIX=/Users/runner/conda/conda-bld/scanpy-scripts_1630759348521/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac
export SRC_DIR=/Users/runner/conda/conda-bld/scanpy-scripts_1630759348521/test_tmp
import: 'scanpy_scripts'
import: 'scanpy_scripts.lib'
import: 'scanpy_scripts'
import: 'scanpy_scripts.lib'
Usage: scanpy-cli [OPTIONS] COMMAND [ARGS]...

  Command line interface to [scanpy](https://github.com/theislab/scanpy)

Options:
  --debug              Print debug information
  --verbosity INTEGER  Set scanpy verbosity
  --version            Show the version and exit.
  --help               Show this message and exit.

Commands:
  read       Read 10x data and save in specified format.
  filter     Filter data based on specified conditions.
  norm       Normalise data per cell.
  hvg        Find highly variable genes.
  scale      Scale data per gene.
  regress    Regress-out observation variables.
  pca        Dimensionality reduction by PCA.
  neighbor   Compute a neighbourhood graph of observations.
  embed      Embed cells into two-dimensional space.
  cluster    Cluster cells into sub-populations.
  diffexp    Find markers for each clusters.
  paga       Trajectory inference by abstract graph analysis.
  dpt        Calculate diffusion pseudotime relative to the root cells.
  integrate  Integrate cells from different experimental batches.
  multiplet  Execute methods for multiplet removal.
  plot       Visualise data.
Usage: scanpy-read-10x [OPTIONS] <output_obj>

  Read 10x data and save in specified format.

  <output_obj>:  output file in format specfied by --output-format

Options:
  -i, --input-10x-h5 FILE         Input 10x data in Cell-Ranger hdf5 format.
  -x, --input-10x-mtx DIRECTORY   Path of input folder containing 10x data in
                                  mtx format.

  -F, --output-format [anndata|loom|zarr]
                                  Output object format.  [default: anndata]
  -z, --zarr-chunk-size INTEGER   Chunk size for writing output in zarr
                                  format.  [default: 1000]

  -b, --loom-write-obsm-varm      Write obsm and varm to the Loom file?
                                  [default: False]

  -X, --export-mtx PATH           When specified, using it as prefix for
                                  exporting mtx files. If not empty and not
                                  ending with "/" or "_", a "_" will be
                                  appended.

  --show-obj [stdout|stderr]      Print output object summary info to
                                  specified stream.

  -g, --genome TEXT               Name of the genome group in hdf5 file,
                                  required by "--input-10x-h5".  [default:
                                  hg19]

  -v, --var-names [gene_symbols|gene_ids]
                                  Attribute to be used as the index of the
                                  variable table, required by "--
                                  input-10x-mtx".  [default: gene_symbols]

  --extra-obs FILE                Extra cell metadata table, must be tab-
                                  separated with a header row and an index
                                  column, and with matched dimension.

  --extra-var FILE                Extra gene metadata table, must be tab-
                                  separated with a header row and an index
                                  column, and with matched dimension.

  --help                          Show this message and exit.
Usage: scanpy-filter-cells [OPTIONS] <input_obj> <output_obj>

  Filter data based on specified conditions.

  <input_obj>:   input file in format specfied by --input-format
  <output_obj>:  output file in format specfied by --output-format

Options:
  -f, --input-format [anndata|loom]
                                  Input object format.  [default: anndata]
  -F, --output-format [anndata|loom|zarr]
                                  Output object format.  [default: anndata]
  -z, --zarr-chunk-size INTEGER   Chunk size for writing output in zarr
                                  format.  [default: 1000]

  -b, --loom-write-obsm-varm      Write obsm and varm to the Loom file?
                                  [default: False]

  -X, --export-mtx PATH           When specified, using it as prefix for
                                  exporting mtx files. If not empty and not
                                  ending with "/" or "_", a "_" will be
                                  appended.

  --show-obj [stdout|stderr]      Print output object summary info to
                                  specified stream.

  -r, --save-raw                  Save adata to adata.raw before processing.
                                  [default: False]

  -g, --gene-name TEXT            Name of the variable that contains gene
                                  names, used for flagging mitochondria genes
                                  when column "mito" is absent from `.var`.
                                  [default: index]

  -l, --list-attr                 When set, list attributes that can be
                                  filtered on.

  -p, --param <TEXT FLOAT FLOAT>...
                                  Numerical parameters used to filter the
                                  data, in the format of "-p name min max".
                                  Multiple -p entries allowed.

  -c, --category <TEXT TEXT[,TEXT...]>...
                                  Categorical attributes used to filter the
                                  data, in the format of "-c <name> <values>",
                                  where entries with attribute <name> with
                                  value in <values> are kept. If <values> is
                                  preceded by "!", entries with value in
                                  <values> are removed. Multiple -c entries
                                  allowed.

  -s, --subset <TEXT FILENAME>...
                                  Similar to --category in the format of "-s
                                  <name> <file>", but the <file> to be a one-
                                  column table that provides the values.
                                  Multiple -s entries allowed.

  --force-recalc                  When set, re-calculate
                                  `pct_counts_<qc_variable>` and
                                  `pct_counts_in_top_<n>_genes` even if they
                                  exist.

  --help                          Show this message and exit.
Usage: scanpy-filter-genes [OPTIONS] <input_obj> <output_obj>

  Filter data based on specified conditions.

  <input_obj>:   input file in format specfied by --input-format
  <output_obj>:  output file in format specfied by --output-format

Options:
  -f, --input-format [anndata|loom]
                                  Input object format.  [default: anndata]
  -F, --output-format [anndata|loom|zarr]
                                  Output object format.  [default: anndata]
  -z, --zarr-chunk-size INTEGER   Chunk size for writing output in zarr
                                  format.  [default: 1000]

  -b, --loom-write-obsm-varm      Write obsm and varm to the Loom file?
                                  [default: False]

  -X, --export-mtx PATH           When specified, using it as prefix for
                                  exporting mtx files. If not empty and not
                                  ending with "/" or "_", a "_" will be
                                  appended.

  --show-obj [stdout|stderr]      Print output object summary info to
                                  specified stream.

  -r, --save-raw                  Save adata to adata.raw before processing.
                                  [default: False]

  -g, --gene-name TEXT            Name of the variable that contains gene
                                  names, used for flagging mitochondria genes
                                  when column "mito" is absent from `.var`.
                                  [default: index]

  -l, --list-attr                 When set, list attributes that can be
                                  filtered on.

  -p, --param <TEXT FLOAT FLOAT>...
                                  Numerical parameters used to filter the
                                  data, in the format of "-p name min max".
                                  Multiple -p entries allowed.

  -c, --category <TEXT TEXT[,TEXT...]>...
                                  Categorical attributes used to filter the
                                  data, in the format of "-c <name> <values>",
                                  where entries with attribute <name> with
                                  value in <values> are kept. If <values> is
                                  preceded by "!", entries with value in
                                  <values> are removed. Multiple -c entries
                                  allowed.

  -s, --subset <TEXT FILENAME>...
                                  Similar to --category in the format of "-s
                                  <name> <file>", but the <file> to be a one-
                                  column table that provides the values.
                                  Multiple -s entries allowed.

  --force-recalc                  When set, re-calculate
                                  `pct_counts_<qc_variable>` and
                                  `pct_counts_in_top_<n>_genes` even if they
                                  exist.

  --help                          Show this message and exit.
Usage: scanpy-normalise-data [OPTIONS] <input_obj> <output_obj>

  Normalise data per cell.

  <input_obj>:   input file in format specfied by --input-format
  <output_obj>:  output file in format specfied by --output-format

Options:
  -f, --input-format [anndata|loom]
                                  Input object format.  [default: anndata]
  -F, --output-format [anndata|loom|zarr]
                                  Output object format.  [default: anndata]
  -z, --zarr-chunk-size INTEGER   Chunk size for writing output in zarr
                                  format.  [default: 1000]

  -b, --loom-write-obsm-varm      Write obsm and varm to the Loom file?
                                  [default: False]

  -X, --export-mtx PATH           When specified, using it as prefix for
                                  exporting mtx files. If not empty and not
                                  ending with "/" or "_", a "_" will be
                                  appended.

  --show-obj [stdout|stderr]      Print output object summary info to
                                  specified stream.

  -r, --save-raw                  Save adata to adata.raw before processing.
                                  [default: False]

  -y, --save-layer TEXT           Save adata.X to the specified layer before
                                  processing.

  --key-added TEXT[,TEXT...]      Key under which to add the computed results
  --no-log-transform              When set, do not apply (natural) log
                                  transform following normalisation.
                                  [default: True]

  -t, --normalize-to FLOAT        Normalize per cell nUMI to this number.
                                  [default: 10000]

  -e, --exclude-highly-expressed  Exclude (very) highly expressed genes for
                                  the computation of the normalization factor
                                  (size factor) for each cell. A gene is
                                  considered highly expressed, if it has more
                                  than max_fraction of the total counts in at
                                  least one cell. The not-excluded genes will
                                  sum up to the number specified by
                                  --normalize-to.  [default: False]

  -m, --max-fraction FLOAT        If exclude_highly_expressed=True, consider
                                  cells as highly expressed that have more
                                  counts than max_fraction of the original
                                  total counts in at least one cell.
                                  [default: 0.05]

  -l, --layers TEXT[,TEXT...]     List of layers to normalize. Set to 'all' to
                                  normalize all layers.

  -n, --layer-norm [after|X]      Specifies how to normalize layers: 1) If
                                  None, after normalization, for each layer in
                                  layers each cell has a total count equal to
                                  the median of the counts_per_cell before
                                  normalization of the layer. 2) If 'after',
                                  for each layer in layers each cell has a
                                  total count equal to target_sum. 3) If 'X',
                                  for each layer in layers each cell has a
                                  total count equal to the median of total
                                  counts for observations (cells) of adata.X
                                  before normalization.'

  --help                          Show this message and exit.
Usage: scanpy-find-variable-genes [OPTIONS] <input_obj> <output_obj>

  Find highly variable genes.

  <input_obj>:   input file in format specfied by --input-format
  <output_obj>:  output file in format specfied by --output-format

Options:
  -f, --input-format [anndata|loom]
                                  Input object format.  [default: anndata]
  -F, --output-format [anndata|loom|zarr]
                                  Output object format.  [default: anndata]
  -z, --zarr-chunk-size INTEGER   Chunk size for writing output in zarr
                                  format.  [default: 1000]

  -b, --loom-write-obsm-varm      Write obsm and varm to the Loom file?
                                  [default: False]

  -X, --export-mtx PATH           When specified, using it as prefix for
                                  exporting mtx files. If not empty and not
                                  ending with "/" or "_", a "_" will be
                                  appended.

  --show-obj [stdout|stderr]      Print output object summary info to
                                  specified stream.

  -m, --mean-limits <FLOAT FLOAT>...
                                  Cutoffs for the mean of expressionin the
                                  format of "-m min max".  [default: 0.0125,
                                  3]

  -d, --disp-limits <FLOAT FLOAT>...
                                  Cutoffs for the dispersion of expressionin
                                  the format of "-d min max".  [default: 0.5,
                                  inf]

  --span FLOAT                    The fraction of the data (cells) used when
                                  estimating the variance in the loess model
                                  fit if flavor='seurat_v3'.  [default: 0.3]

  -b, --n-bins INTEGER            Number of bins for binning the mean gene
                                  expression.  [default: 20]

  -t, --n-top-genes INTEGER       Number of highly-variable genes to keep.
  -v, --flavor [seurat|cell_ranger|seurat_v3]
                                  Choose the flavor for computing normalized
                                  dispersion.  [default: seurat]

  -s, --subset                    When set, inplace subset to highly-variable
                                  genes, otherwise only flag highly-variable
                                  genes.

  --batch-key TEXT                If specified, highly-variable genes are
                                  selected within each batch separately and
                                  merged. This simple process avoids the
                                  selection of batch-specific genes and acts
                                  as a lightweight batch correction method.
                                  For all flavors, genes are first sorted by
                                  how many batches they are a HVG. For
                                  dispersion-based flavors ties are broken by
                                  normalized dispersion. If flavor =
                                  'seurat_v3', ties are broken by the median
                                  (across batches) rank based on within-batch
                                  normalized variance.

  --help                          Show this message and exit.
Usage: scanpy-scale-data [OPTIONS] <input_obj> <output_obj>

  Scale data per gene.

  <input_obj>:   input file in format specfied by --input-format
  <output_obj>:  output file in format specfied by --output-format

Options:
  -f, --input-format [anndata|loom]
                                  Input object format.  [default: anndata]
  -F, --output-format [anndata|loom|zarr]
                                  Output object format.  [default: anndata]
  -z, --zarr-chunk-size INTEGER   Chunk size for writing output in zarr
                                  format.  [default: 1000]

  -b, --loom-write-obsm-varm      Write obsm and varm to the Loom file?
                                  [default: False]

  -X, --export-mtx PATH           When specified, using it as prefix for
                                  exporting mtx files. If not empty and not
                                  ending with "/" or "_", a "_" will be
                                  appended.

  --show-obj [stdout|stderr]      Print output object summary info to
                                  specified stream.

  -r, --save-raw                  Save adata to adata.raw before processing.
                                  [default: False]

  -y, --save-layer TEXT           Save adata.X to the specified layer before
                                  processing.

  --no-zero-center                When set, omit zero-centering variables to
                                  allow efficient handling of sparse input.

  -m, --max-value FLOAT           When specified, clip to this value after
                                  scaling, otherwise do not clip

  -l, --layer TEXT[,TEXT...]      If provided, which element of layers to
                                  scale.

  --help                          Show this message and exit.
Usage: scanpy-regress [OPTIONS] <input_obj> <output_obj>

  Regress-out observation variables.

  <input_obj>:   input file in format specfied by --input-format
  <output_obj>:  output file in format specfied by --output-format

Options:
  -f, --input-format [anndata|loom]
                                  Input object format.  [default: anndata]
  -F, --output-format [anndata|loom|zarr]
                                  Output object format.  [default: anndata]
  -z, --zarr-chunk-size INTEGER   Chunk size for writing output in zarr
                                  format.  [default: 1000]

  -b, --loom-write-obsm-varm      Write obsm and varm to the Loom file?
                                  [default: False]

  -X, --export-mtx PATH           When specified, using it as prefix for
                                  exporting mtx files. If not empty and not
                                  ending with "/" or "_", a "_" will be
                                  appended.

  --show-obj [stdout|stderr]      Print output object summary info to
                                  specified stream.

  -r, --save-raw                  Save adata to adata.raw before processing.
                                  [default: False]

  -y, --save-layer TEXT           Save adata.X to the specified layer before
                                  processing.

  -J, --n-jobs INTEGER            Number of jobs for parallel computation.
  -k, --keys TEXT[,TEXT...]       Key(s) for observation annotation on which
                                  to regress.

  --help                          Show this message and exit.
Usage: scanpy-run-pca [OPTIONS] <input_obj> <output_obj>

  Dimensionality reduction by PCA.

  <input_obj>:   input file in format specfied by --input-format
  <output_obj>:  output file in format specfied by --output-format

Options:
  -f, --input-format [anndata|loom]
                                  Input object format.  [default: anndata]
  -F, --output-format [anndata|loom|zarr]
                                  Output object format.  [default: anndata]
  -z, --zarr-chunk-size INTEGER   Chunk size for writing output in zarr
                                  format.  [default: 1000]

  -b, --loom-write-obsm-varm      Write obsm and varm to the Loom file?
                                  [default: False]

  -X, --export-mtx PATH           When specified, using it as prefix for
                                  exporting mtx files. If not empty and not
                                  ending with "/" or "_", a "_" will be
                                  appended.

  --show-obj [stdout|stderr]      Print output object summary info to
                                  specified stream.

  --no-zero-center                When set, omit zero-centering variables to
                                  allow efficient handling of sparse input.

  -S, --random-state INTEGER      Seed for random number generator.  [default:
                                  0]

  -E, --export-embedding FILE     Export embeddings in a tab-separated text
                                  table.

  --n-comps INTEGER               Number of components to compute
  -V, --svd-solver [auto|arpack|randomized]
                                  SVD solver to use.  [default: auto]
  -a, --use-all                   When set, use all genes for PCA, otherwise
                                  use highly-variable genes by default.

  -K, --chunked                   When set, perform an incremental PCA on
                                  segments of --chunk-size, which
                                  automatically zero centers and ignore
                                  settings of --random-state and --svd-solver.

  -Z, --chunk-size INTEGER        Number of observations to include in each
                                  chunk, required by --chunked.

  --help                          Show this message and exit.
Usage: scanpy-neighbors [OPTIONS] <input_obj> <output_obj>

  Compute a neighbourhood graph of observations.

  <input_obj>:   input file in format specfied by --input-format
  <output_obj>:  output file in format specfied by --output-format

Options:
  -f, --input-format [anndata|loom]
                                  Input object format.  [default: anndata]
  -F, --output-format [anndata|loom|zarr]
                                  Output object format.  [default: anndata]
  -z, --zarr-chunk-size INTEGER   Chunk size for writing output in zarr
                                  format.  [default: 1000]

  -b, --loom-write-obsm-varm      Write obsm and varm to the Loom file?
                                  [default: False]

  -X, --export-mtx PATH           When specified, using it as prefix for
                                  exporting mtx files. If not empty and not
                                  ending with "/" or "_", a "_" will be
                                  appended.

  --show-obj [stdout|stderr]      Print output object summary info to
                                  specified stream.

  -n, --n-pcs INTEGER             Use this many PCs. Use `.X` if --n-pcs is 0
                                  when --use-rep is None.

  -u, --use-rep TEXT              Use the indicated representation. If None,
                                  the representation is chosen automatically:
                                  for `.n_vars` < 50, `.X` is used, otherwise
                                  `X_pca` is used. If `X_pca` is not present,
                                  it's computed with default parameters.

  --key-added TEXT[,TEXT...]      Key under which to add the computed results
  -S, --random-state INTEGER      Seed for random number generator.  [default:
                                  0]

  -k, --n-neighbors INTEGER[,INTEGER...]
                                  The size of local neighborhood (in terms of
                                  number of neighboring data points) used for
                                  manifold approximation. Larger values result
                                  in more global views of the manifold, while
                                  smaller values result in more local data
                                  being preserved. In general values should be
                                  in the range 2 to 100.  If --knn is set,
                                  number of nearest neighbors to be searched,
                                  othwise a Gaussian kernel width is set to
                                  the distance of the --n-neighbors neighbor.
                                  [default: 15]

  --no-knn                        When NOT set, use a hard threshold to
                                  restrict the number of neighbors to
                                  --n-neighbors. Otherwise, use a Gaussian
                                  kernel to assign low weights to neighbors
                                  more distant than the --n-neighbors nearest
                                  neighbor  [default: True]

  -m, --method [umap|gauss|rapids]
                                  Use umap or gauss with adaptive width for
                                  computing connectivities. Use rapids for the
                                  RAPIDS implementation of UMAP (experimental,
                                  GPU only).  [default: umap]

  -t, --metric [cityblock|cosine|euclidean|l1|l2|manhattan|braycurtis|canberra|chebyshev|correlation|dice|hamming|jaccard|kulsinski|mahalanobis|minkowski|rogerstanimoto|russellrao|seuclidean|sokalmichener|sokalsneath|sqeuclidean|yule]
                                  A known metric’s name.  [default: euclidean]
  --help                          Show this message and exit.
Usage: scanpy-run-tsne [OPTIONS] <input_obj> <output_obj>

  Embed the cells using t-SNE.

  <input_obj>:   input file in format specfied by --input-format
  <output_obj>:  output file in format specfied by --output-format

Options:
  -f, --input-format [anndata|loom]
                                  Input object format.  [default: anndata]
  -F, --output-format [anndata|loom|zarr]
                                  Output object format.  [default: anndata]
  -z, --zarr-chunk-size INTEGER   Chunk size for writing output in zarr
                                  format.  [default: 1000]

  -b, --loom-write-obsm-varm      Write obsm and varm to the Loom file?
                                  [default: False]

  -X, --export-mtx PATH           When specified, using it as prefix for
                                  exporting mtx files. If not empty and not
                                  ending with "/" or "_", a "_" will be
                                  appended.

  --show-obj [stdout|stderr]      Print output object summary info to
                                  specified stream.

  -n, --n-pcs INTEGER             Use this many PCs. Use `.X` if --n-pcs is 0
                                  when --use-rep is None.

  -u, --use-rep TEXT              Use the indicated representation. If None,
                                  the representation is chosen automatically:
                                  for `.n_vars` < 50, `.X` is used, otherwise
                                  `X_pca` is used. If `X_pca` is not present,
                                  it's computed with default parameters.

  -S, --random-state INTEGER      Seed for random number generator.  [default:
                                  0]

  --key-added TEXT[,TEXT...]      Key under which to add the computed results
  -J, --n-jobs INTEGER            Number of jobs for parallel computation.
  -E, --export-embedding FILE     Export embeddings in a tab-separated text
                                  table.

  --perplexity FLOAT              The perplexity is related to the number of
                                  nearest neighbors that is used in other
                                  manifold learning algorithms. Larger
                                  datasets usually require a larger
                                  perplexity. Consider selecting a value
                                  between 5 and 50. The choice is not
                                  extremely critical since t-SNE is quite
                                  insensitive to this parameter.  [default:
                                  30]

  --early-exaggeration FLOAT      Controls how tight natural clusters in the
                                  original space are in the embedded space and
                                  how much space will be between them. For
                                  larger values, the space between natural
                                  clusters will be larger in the embedded
                                  space. Again, the choice of this parameter
                                  is not very critical. If the cost function
                                  increases during initial optimization, the
                                  early exaggeration factor or the learning
                                  rate might be too high.  [default: 12]

  --learning-rate FLOAT           Note that the R-package "Rtsne" uses a
                                  default of 200. The learning rate can be a
                                  critical parameter. It should be between 100
                                  and 1000. If the cost function increases
                                  during initial optimization, the early
                                  exaggeration factor or the learning rate
                                  might be too high. If the cost function gets
                                  stuck in a bad local minimum increasing the
                                  learning rate helps sometimes.  [default:
                                  1000]

  --no-fast-tsne                  When NOT set, use the MulticoreTSNE package
                                  by D. Ulyanov if installed.  [default: True]

  --help                          Show this message and exit.
Usage: scanpy-run-umap [OPTIONS] <input_obj> <output_obj>

  Embed the neighborhood graph using UMAP.

  <input_obj>:   input file in format specfied by --input-format
  <output_obj>:  output file in format specfied by --output-format

Options:
  -f, --input-format [anndata|loom]
                                  Input object format.  [default: anndata]
  -F, --output-format [anndata|loom|zarr]
                                  Output object format.  [default: anndata]
  -z, --zarr-chunk-size INTEGER   Chunk size for writing output in zarr
                                  format.  [default: 1000]

  -b, --loom-write-obsm-varm      Write obsm and varm to the Loom file?
                                  [default: False]

  -X, --export-mtx PATH           When specified, using it as prefix for
                                  exporting mtx files. If not empty and not
                                  ending with "/" or "_", a "_" will be
                                  appended.

  --show-obj [stdout|stderr]      Print output object summary info to
                                  specified stream.

  --neighbors-key TEXT            If not specified, look in .uns[‘neighbors’]
                                  for neighbors settings and
                                  .obsp[‘connectivities’], .obsp[‘distances’]
                                  for connectivities and distances
                                  respectively (default storage places for
                                  pp.neighbors). If specified, look in
                                  .uns[neighbors_key] for neighbors settings
                                  and .obsp[.uns[neighbors_key][‘connectivitie
                                  s_key’]],
                                  .obsp[.uns[neighbors_key][‘distances_key’]]
                                  for connectivities and distances
                                  respectively.

  -S, --random-state INTEGER      Seed for random number generator.  [default:
                                  0]

  --key-added TEXT[,TEXT...]      Key under which to add the computed results
  -E, --export-embedding FILE     Export embeddings in a tab-separated text
                                  table.

  --init-pos TEXT                 How to initialize the low dimensional
                                  embedding. Can be "spectral", "paga" or
                                  "random", or any key of `.obsm`.  [default:
                                  spectral]

  --min-dist FLOAT                The effective minimum distance between
                                  embedded points. Smaller values will result
                                  in a more clustered embedding, while larger
                                  values will results in a more even dispersal
                                  of points.  [default: 0.5]

  --spread FLOAT                  The effective scale of embedded points,
                                  which determines the scale at which embedded
                                  points will be spread out.  [default: 1.0]

  --n-components INTEGER          The number of dimensions of the embedding.
                                  [default: 2]

  --maxiter INTEGER               The number of iterations of the
                                  optimization.

  --alpha FLOAT                   The initial learning rate for the embedding
                                  optimization.  [default: 1.0]

  --gamma FLOAT                   Weighting applied to negative samples in low
                                  dimensional embedding optimization.
                                  [default: 1.0]

  --negative-sample-rate INTEGER  The number of negative edge samples to use
                                  per positive edge sample in optimizing the
                                  low dimensional embedding.  [default: 5]

  --method [umap|rapids]          Use the original ‘umap’ implementation, or
                                  ‘rapids’ (experimental, GPU only).
                                  [default: umap]

  --help                          Show this message and exit.
Usage: scanpy-find-cluster [OPTIONS] COMMAND [ARGS]...

  Cluster cells into sub-populations.

Options:
  --help  Show this message and exit.

Commands:
  louvain  Find clusters by Louvain algorithm.
  leiden   Find clusters by Leiden algorithm.
Usage: scanpy-find-markers [OPTIONS] <input_obj> <output_obj>

  Find markers for each clusters.

  <input_obj>:   input file in format specfied by --input-format
  <output_obj>:  output file in format specfied by --output-format

Options:
  -f, --input-format [anndata|loom]
                                  Input object format.  [default: anndata]
  -F, --output-format [anndata|loom|zarr]
                                  Output object format.  [default: anndata]
  -z, --zarr-chunk-size INTEGER   Chunk size for writing output in zarr
                                  format.  [default: 1000]

  -b, --loom-write-obsm-varm      Write obsm and varm to the Loom file?
                                  [default: False]

  -X, --export-mtx PATH           When specified, using it as prefix for
                                  exporting mtx files. If not empty and not
                                  ending with "/" or "_", a "_" will be
                                  appended.

  --show-obj [stdout|stderr]      Print output object summary info to
                                  specified stream.

  --use-raw / --no-raw            Use expression values in `.raw` if present.
  --key-added TEXT[,TEXT...]      Key under which to add the computed results
  -l, --layer TEXT                Key from adata.layers whose value will be
                                  used to perform tests on.

  -g, --groupby TEXT              The key of the observations grouping to
                                  consider.  [required]

  --groups TEXT[,TEXT...]         Subset of groups to which comparison shall
                                  be restricted.  [default: all]

  --reference TEXT                If "rest", compare each group to the union
                                  of the rest of the groups. If a group
                                  identifier, compare with respect to this
                                  group.  [default: rest]

  -n, --n-genes INTEGER           The number of genes that appear in the
                                  retured tables. By default return all
                                  available genes depending on the value of
                                  --use-raw.

  --method [logreg|t-test|wilcoxon|t-test_overestim_var]
                                  Method of performing differential expression
                                  analysis.  [default: t-test_overestim_var]

  --corr-method [benjamini-hochberg|bonferroni]
                                  P-value correction method. Used only for
                                  "t-test", "t-test_overestim_var" and
                                  "wilcoxon".  [default: benjamini-hochberg]

  --rankby-abs                    Rank genes by the absolute value of the
                                  score, not by the score. The returned scores
                                  are never the absolute values.  [default:
                                  False]

  --pts                           Compute the fraction of cells expressing the
                                  genes.  [default: False]

  --tie-correct                   Use tie correction for 'wilcoxon' scores.
                                  Used only for 'wilcoxon'.  [default: False]

  --filter-params TEXT:VAL[,TEXT:VAL...]
                                  Parameters for filtering DE results, valid
                                  parameters are: "min_in_group_fraction"
                                  (float), "max_out_group_fraction" (float),
                                  "min_fold_change" (float).

  --logreg-param TEXT:VAL[,TEXT:VAL...]
                                  Parameters passed to
                                  `sklearn.linear_model.LogisticRegression`.

  --save FILE                     Tab-separated table to store results of
                                  differential expression analysis.

  --help                          Show this message and exit.
Usage: scanpy-integrate [OPTIONS] COMMAND [ARGS]...

  Integrate cells from different experimental batches.

Options:
  --help  Show this message and exit.

Commands:
  harmony  Use harmonypy [Korunsky19] to integrate different experiments.
  bbknn    Batch balanced kNN [Polanski19].
  mnn      Correct batch effects by matching mutual nearest neighbors...
  combat   ComBat function for batch effect correction  <input_obj>: input...
Usage: scanpy-multiplet [OPTIONS] COMMAND [ARGS]...

  Execute methods for multiplet removal.

Options:
  --help  Show this message and exit.

Commands:
  scrublet                    Filter out likely multiplets from droplet
                              data...

  scrublet_simulate_doublets  Simulate doublets with random transcriptome...

Resource usage statistics from testing scanpy-scripts:
   Process count: 4
   CPU time: Sys=0:00:06.6, User=0:00:22.8
   Memory: 166.6M
   Disk usage: 20B
   Time elapsed: 0:01:16.7


TEST END: scanpy-scripts-1.1.1-pypyhdfd78af_1.tar.bz2
--dirty flag and --keep-old-work not specified. Removing build/test folder after successful build/test.

