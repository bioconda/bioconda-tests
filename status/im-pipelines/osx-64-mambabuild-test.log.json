  Package                       Version  Build               Channel                                    Size
──────────────────────────────────────────────────────────────────────────────────────────────────────────────
  Install:
──────────────────────────────────────────────────────────────────────────────────────────────────────────────

  + boost                        1.74.0  py39ha641261_3      conda-forge/osx-64                       306 KB
  + boost-cpp                    1.74.0  hff03dee_4          conda-forge/osx-64                        16 MB
  + bzip2                         1.0.8  h0d85af4_4          conda-forge/osx-64                       Cached
  + ca-certificates           2021.5.30  h033912b_0          conda-forge/osx-64                       Cached
  + cairo                        1.16.0  he43a7df_1008       conda-forge/osx-64                       Cached
  + certifi                   2021.5.30  py39h6e9494a_0      conda-forge/osx-64                       Cached
  + cycler                       0.10.0  py_2                conda-forge/noarch                         9 KB
  + fontconfig                   2.13.1  h10f422b_1005       conda-forge/osx-64                       Cached
  + freetype                     2.10.4  h4cff582_1          conda-forge/osx-64                       Cached
  + gettext                    0.19.8.1  h7937167_1005       conda-forge/osx-64                       Cached
  + greenlet                      1.1.1  py39h9fcab8e_0      conda-forge/osx-64                        79 KB
  + icu                            68.1  h74dc148_0          conda-forge/osx-64                       Cached
  + im-pipelines                  1.1.6  pyh3252c3a_0        /Users/runner/conda/conda-bld/osx-64      67 KB
  + im-pipelines-utils            2.4.8  py_0                conda-forge/noarch                        18 KB
  + im-pipelines-utils-rdkit     1.5.11  pyh8c360ce_0        conda-forge/noarch                        20 KB
  + jbig                            2.1  h0d85af4_2003       conda-forge/osx-64                       Cached
  + joblib                        1.0.1  pyhd8ed1ab_0        conda-forge/noarch                       Cached
  + jpeg                             9d  hbcb3906_0          conda-forge/osx-64                       Cached
  + kiwisolver                    1.3.2  py39hf018cea_0      conda-forge/osx-64                        59 KB
  + lcms2                          2.12  h577c468_0          conda-forge/osx-64                       404 KB
  + lerc                          2.2.1  h046ec9c_0          conda-forge/osx-64                       Cached
  + libblas                       3.9.0  11_osx64_openblas   conda-forge/osx-64                       Cached
  + libcblas                      3.9.0  11_osx64_openblas   conda-forge/osx-64                       Cached
  + libcxx                       12.0.1  habf9029_0          conda-forge/osx-64                       Cached
  + libdeflate                      1.7  h35c211d_5          conda-forge/osx-64                       Cached
  + libffi                          3.3  h046ec9c_2          conda-forge/osx-64                       Cached
  + libgfortran                   5.0.0  9_3_0_h6c81a4c_23   conda-forge/osx-64                       Cached
  + libgfortran5                  9.3.0  h6c81a4c_23         conda-forge/osx-64                       Cached
  + libglib                      2.68.4  hd556434_0          conda-forge/osx-64                       Cached
  + libiconv                       1.16  haf1e3a3_0          conda-forge/osx-64                       Cached
  + liblapack                     3.9.0  11_osx64_openblas   conda-forge/osx-64                       Cached
  + libopenblas                  0.3.17  openmp_h3351f45_1   conda-forge/osx-64                       Cached
  + libpng                       1.6.37  h7cec526_2          conda-forge/osx-64                       Cached
  + libtiff                       4.3.0  h1167814_1          conda-forge/osx-64                       Cached
  + libwebp-base                  1.2.1  h0d85af4_0          conda-forge/osx-64                       Cached
  + libxml2                      2.9.12  h93ec3fd_0          conda-forge/osx-64                       Cached
  + llvm-openmp                  12.0.1  hda6cdc1_1          conda-forge/osx-64                       Cached
  + lz4-c                         1.9.3  he49afe7_1          conda-forge/osx-64                       Cached
  + matplotlib-base               3.4.3  py39hb07454d_0      conda-forge/osx-64                         7 MB
  + molvs                         0.1.1  py_0                conda-forge/noarch                        25 KB
  + ncurses                         6.2  h2e338ed_4          conda-forge/osx-64                       Cached
  + numpy                        1.21.2  py39h7eed0ac_0      conda-forge/osx-64                         6 MB
  + olefile                        0.46  pyh9f0ad1d_1        conda-forge/noarch                        32 KB
  + openjpeg                      2.4.0  h6e7aa92_1          conda-forge/osx-64                       374 KB
  + openssl                      1.1.1l  h0d85af4_0          conda-forge/osx-64                       Cached
  + pandas                        1.3.2  py39h4d6be9b_0      conda-forge/osx-64                        12 MB
  + pcre                           8.45  he49afe7_0          conda-forge/osx-64                       Cached
  + pillow                        8.3.2  py39he9bb72f_0      conda-forge/osx-64                       660 KB
  + pip                          21.2.4  pyhd8ed1ab_0        conda-forge/noarch                       Cached
  + pixman                       0.40.0  hbcb3906_0          conda-forge/osx-64                       Cached
  + pycairo                      1.20.1  py39hbe14034_0      conda-forge/osx-64                        69 KB
  + pyparsing                     2.4.7  pyh9f0ad1d_0        conda-forge/noarch                        60 KB
  + python                        3.9.7  hd187cdc_0_cpython  conda-forge/osx-64                       Cached
  + python-dateutil               2.8.2  pyhd8ed1ab_0        conda-forge/noarch                       240 KB
  + python_abi                      3.9  2_cp39              conda-forge/osx-64                       Cached
  + pytz                         2021.1  pyhd8ed1ab_0        conda-forge/noarch                       Cached
  + rdkit                     2021.03.5  py39h88273a1_0      conda-forge/osx-64                        36 MB
  + readline                        8.1  h05e3726_0          conda-forge/osx-64                       Cached
  + reportlab                    3.5.68  py39hf37cc50_0      conda-forge/osx-64                         2 MB
  + scikit-learn                 0.24.2  py39hd2caeff_1      conda-forge/osx-64                         7 MB
  + scipy                         1.7.1  py39h056f1c0_0      conda-forge/osx-64                        20 MB
  + setuptools                   57.4.0  py39h6e9494a_0      conda-forge/osx-64                       Cached
  + six                          1.16.0  pyh6c4a22f_0        conda-forge/noarch                       Cached
  + sqlalchemy                   1.4.23  py39h89e85a6_0      conda-forge/osx-64                         2 MB
  + sqlite                       3.36.0  h23a322b_0          conda-forge/osx-64                       Cached
  + standardiser                  0.1.9  pyh9f0ad1d_0        conda-forge/noarch                       537 KB
  + threadpoolctl                 2.2.0  pyh8a188c0_0        conda-forge/noarch                        16 KB
  + tk                           8.6.11  h5dbffcc_1          conda-forge/osx-64                       Cached
  + tornado                         6.1  py39h89e85a6_1      conda-forge/osx-64                       645 KB
  + tzdata                        2021a  he74cb21_1          conda-forge/noarch                       Cached
  + wheel                        0.37.0  pyhd8ed1ab_1        conda-forge/noarch                       Cached
  + xz                            5.2.5  haf1e3a3_1          conda-forge/osx-64                       Cached
  + zlib                         1.2.11  h7795811_1010       conda-forge/osx-64                       Cached
  + zstd                          1.5.0  h582d3a0_0          conda-forge/osx-64                       Cached

  Summary:

  Install: 74 packages

  Total download: 112 MB

──────────────────────────────────────────────────────────────────────────────────────────────────────────────

Updating build index: /Users/runner/conda/conda-bld

TEST START: im-pipelines-1.1.6-pyh3252c3a_0.tar.bz2

## Package Plan ##

  environment location: /Users/runner/conda/conda-bld/im-pipelines_1631028655970/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh


The following NEW packages will be INSTALLED:

    boost:                    1.74.0-py39ha641261_3    conda-forge
    boost-cpp:                1.74.0-hff03dee_4        conda-forge
    bzip2:                    1.0.8-h0d85af4_4         conda-forge
    ca-certificates:          2021.5.30-h033912b_0     conda-forge
    cairo:                    1.16.0-he43a7df_1008     conda-forge
    certifi:                  2021.5.30-py39h6e9494a_0 conda-forge
    cycler:                   0.10.0-py_2              conda-forge
    fontconfig:               2.13.1-h10f422b_1005     conda-forge
    freetype:                 2.10.4-h4cff582_1        conda-forge
    gettext:                  0.19.8.1-h7937167_1005   conda-forge
    greenlet:                 1.1.1-py39h9fcab8e_0     conda-forge
    icu:                      68.1-h74dc148_0          conda-forge
    im-pipelines:             1.1.6-pyh3252c3a_0       local      
    im-pipelines-utils:       2.4.8-py_0               conda-forge
    im-pipelines-utils-rdkit: 1.5.11-pyh8c360ce_0      conda-forge
    jbig:                     2.1-h0d85af4_2003        conda-forge
    joblib:                   1.0.1-pyhd8ed1ab_0       conda-forge
    jpeg:                     9d-hbcb3906_0            conda-forge
    kiwisolver:               1.3.2-py39hf018cea_0     conda-forge
    lcms2:                    2.12-h577c468_0          conda-forge
    lerc:                     2.2.1-h046ec9c_0         conda-forge
    libblas:                  3.9.0-11_osx64_openblas  conda-forge
    libcblas:                 3.9.0-11_osx64_openblas  conda-forge
    libcxx:                   12.0.1-habf9029_0        conda-forge
    libdeflate:               1.7-h35c211d_5           conda-forge
    libffi:                   3.3-h046ec9c_2           conda-forge
    libgfortran:              5.0.0-9_3_0_h6c81a4c_23  conda-forge
    libgfortran5:             9.3.0-h6c81a4c_23        conda-forge
    libglib:                  2.68.4-hd556434_0        conda-forge
    libiconv:                 1.16-haf1e3a3_0          conda-forge
    liblapack:                3.9.0-11_osx64_openblas  conda-forge
    libopenblas:              0.3.17-openmp_h3351f45_1 conda-forge
    libpng:                   1.6.37-h7cec526_2        conda-forge
    libtiff:                  4.3.0-h1167814_1         conda-forge
    libwebp-base:             1.2.1-h0d85af4_0         conda-forge
    libxml2:                  2.9.12-h93ec3fd_0        conda-forge
    llvm-openmp:              12.0.1-hda6cdc1_1        conda-forge
    lz4-c:                    1.9.3-he49afe7_1         conda-forge
    matplotlib-base:          3.4.3-py39hb07454d_0     conda-forge
    molvs:                    0.1.1-py_0               conda-forge
    ncurses:                  6.2-h2e338ed_4           conda-forge
    numpy:                    1.21.2-py39h7eed0ac_0    conda-forge
    olefile:                  0.46-pyh9f0ad1d_1        conda-forge
    openjpeg:                 2.4.0-h6e7aa92_1         conda-forge
    openssl:                  1.1.1l-h0d85af4_0        conda-forge
    pandas:                   1.3.2-py39h4d6be9b_0     conda-forge
    pcre:                     8.45-he49afe7_0          conda-forge
    pillow:                   8.3.2-py39he9bb72f_0     conda-forge
    pip:                      21.2.4-pyhd8ed1ab_0      conda-forge
    pixman:                   0.40.0-hbcb3906_0        conda-forge
    pycairo:                  1.20.1-py39hbe14034_0    conda-forge
    pyparsing:                2.4.7-pyh9f0ad1d_0       conda-forge
    python:                   3.9.7-hd187cdc_0_cpython conda-forge
    python-dateutil:          2.8.2-pyhd8ed1ab_0       conda-forge
    python_abi:               3.9-2_cp39               conda-forge
    pytz:                     2021.1-pyhd8ed1ab_0      conda-forge
    rdkit:                    2021.03.5-py39h88273a1_0 conda-forge
    readline:                 8.1-h05e3726_0           conda-forge
    reportlab:                3.5.68-py39hf37cc50_0    conda-forge
    scikit-learn:             0.24.2-py39hd2caeff_1    conda-forge
    scipy:                    1.7.1-py39h056f1c0_0     conda-forge
    setuptools:               57.4.0-py39h6e9494a_0    conda-forge
    six:                      1.16.0-pyh6c4a22f_0      conda-forge
    sqlalchemy:               1.4.23-py39h89e85a6_0    conda-forge
    sqlite:                   3.36.0-h23a322b_0        conda-forge
    standardiser:             0.1.9-pyh9f0ad1d_0       conda-forge
    threadpoolctl:            2.2.0-pyh8a188c0_0       conda-forge
    tk:                       8.6.11-h5dbffcc_1        conda-forge
    tornado:                  6.1-py39h89e85a6_1       conda-forge
    tzdata:                   2021a-he74cb21_1         conda-forge
    wheel:                    0.37.0-pyhd8ed1ab_1      conda-forge
    xz:                       5.2.5-haf1e3a3_1         conda-forge
    zlib:                     1.2.11-h7795811_1010     conda-forge
    zstd:                     1.5.0-h582d3a0_0         conda-forge

Preparing transaction: ...working... done
Verifying transaction: ...working... done
Executing transaction: ...working... done
export PREFIX=/Users/runner/conda/conda-bld/im-pipelines_1631028655970/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh
export SRC_DIR=/Users/runner/conda/conda-bld/im-pipelines_1631028655970/test_tmp
usage: cluster_butina_matrix [-h] [-i INPUT] [-if {sdf,json}] [-o OUTPUT]
                             [-of {tsv,json}] [--meta] [-t THRESHOLD]
                             [-mt MATRIXTHRESHOLD]
                             [-d {maccs,morgan2,morgan3,rdkit}]
                             [-m {asymmetric,braunblanquet,cosine,dice,kulczynski,mcconnaughey,rogotgoldberg,russel,sokal,tanimoto}]
                             [-q]

RDKit Butina Cluster Matrix

optional arguments:
  -h, --help            show this help message and exit
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {tsv,json}, --outformat {tsv,json}
                        Output format. Defaults to 'tsv'.
  --meta                Write metadata and metrics files
  -t THRESHOLD, --threshold THRESHOLD
                        Similarity clustering threshold (1.0 means identical)
  -mt MATRIXTHRESHOLD, --matrixThreshold MATRIXTHRESHOLD
                        Threshold for outputting values (1.0 means identical)
  -d {maccs,morgan2,morgan3,rdkit}, --descriptor {maccs,morgan2,morgan3,rdkit}
                        descriptor or fingerprint type (default rdkit)
  -m {asymmetric,braunblanquet,cosine,dice,kulczynski,mcconnaughey,rogotgoldberg,russel,sokal,tanimoto}, --metric {asymmetric,braunblanquet,cosine,dice,kulczynski,mcconnaughey,rogotgoldberg,russel,sokal,tanimoto}
                        similarity metric (default tanimoto)
  -q, --quiet           Quiet mode
usage: cluster_butina [-h] [-t THRESHOLD] [-d {maccs,morgan2,morgan3,rdkit}]
                      [-m {asymmetric,braunblanquet,cosine,dice,kulczynski,mcconnaughey,rogotgoldberg,russel,sokal,tanimoto}]
                      [-n NUM] [-e EXCLUDE] [--fragment-method {hac,mw}]
                      [--output-fragment] [-f FIELD] [--min | --max]
                      [-i INPUT] [-if {sdf,json}] [-o OUTPUT] [-of {sdf,json}]
                      [--meta] [-q] [--thin]

RDKit Butina Cluster

optional arguments:
  -h, --help            show this help message and exit
  -t THRESHOLD, --threshold THRESHOLD
                        similarity clustering threshold (1.0 means identical)
  -d {maccs,morgan2,morgan3,rdkit}, --descriptor {maccs,morgan2,morgan3,rdkit}
                        descriptor or fingerprint type (default rdkit)
  -m {asymmetric,braunblanquet,cosine,dice,kulczynski,mcconnaughey,rogotgoldberg,russel,sokal,tanimoto}, --metric {asymmetric,braunblanquet,cosine,dice,kulczynski,mcconnaughey,rogotgoldberg,russel,sokal,tanimoto}
                        similarity metric (default tanimoto)
  -n NUM, --num NUM     maximum number to pick for diverse subset selection
  -e EXCLUDE, --exclude EXCLUDE
                        threshold for excluding structures in diverse subset
                        selection (1.0 means identical)
  --fragment-method {hac,mw}
                        Approach to find biggest fragment if more than one
                        (hac = biggest by heavy atom count, mw = biggest by
                        mol weight)
  --output-fragment     Output the biggest fragment rather than the original
                        molecule
  -f FIELD, --field FIELD
                        field to use to optimise diverse subset selection
  --min                 pick lowest value specified by the --field option
  --max                 pick highest value specified by the --field option
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
  -q, --quiet           Quiet mode
  --thin                Thin output mode
usage: cluster_3d [-h] [-i INPUT] [-if {sdf,json}] [-o OUTPUT]
                  [-of {sdf,json}] [--meta]

RDKit cluster 3D

optional arguments:
  -h, --help            show this help message and exit
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
usage: conformers [-h] [-n NUM] [-a ATTEMPTS] [-r RMSD] [-c {rmsd,tfd}]
                  [-t THRESHOLD] [-e EMIN] [-i INPUT] [-if {sdf,json}]
                  [-o OUTPUT] [-of {sdf,json}] [--meta] [--smiles SMILES]

RDKit conformers

optional arguments:
  -h, --help            show this help message and exit
  -n NUM, --num NUM     number of conformers to generate
  -a ATTEMPTS, --attempts ATTEMPTS
                        number of attempts
  -r RMSD, --rmsd RMSD  prune RMSD threshold
  -c {rmsd,tfd}, --cluster {rmsd,tfd}
                        Cluster method (RMSD or TFD). If None then no
                        clustering
  -t THRESHOLD, --threshold THRESHOLD
                        cluster threshold (default of 2.0 for RMSD and 0.3 for
                        TFD)
  -e EMIN, --emin EMIN  energy minimisation iterations (default of 0 means
                        none)
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
  --smiles SMILES       input structure as smiles (incompatible with using
                        files or stdin for input)
usage: constrained_conf_gen [-h] [-i INPUT] [-if {sdf,json}] [-o OUTPUT]
                            [-of {sdf,json}] [--meta] [-n NUM] [-r REFMOL]
                            [--refmolidx REFMOLIDX] [-c CORE_SMI]

RDKit constrained conformer generator

optional arguments:
  -h, --help            show this help message and exit
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
  -n NUM, --num NUM     number of conformers to generate
  -r REFMOL, --refmol REFMOL
                        Reference molecule file
  --refmolidx REFMOLIDX
                        Reference molecule index in file
  -c CORE_SMI, --core_smi CORE_SMI
                        Core substructure. If not specified - guessed using
                        MCS
usage: max_min_picker [-h] [-t THRESHOLD] [-d {maccs,morgan2,morgan3}] [-q]
                      [-n NUM] [-s SEED_MOLECULES]
                      [--fragment-method {hac,mw}] [--output-fragment]
                      [-i INPUT] [-if {sdf,json}] [-o OUTPUT] [-of {sdf,json}]
                      [--meta]

RDKit Butina Cluster

optional arguments:
  -h, --help            show this help message and exit
  -t THRESHOLD, --threshold THRESHOLD
                        similarity threshold (1.0 means identical)
  -d {maccs,morgan2,morgan3}, --descriptor {maccs,morgan2,morgan3}
                        descriptor or fingerprint type (default rdkit)
  -q, --quiet           Quiet mode
  -n NUM, --num NUM     maximum number to pick for diverse subset selection
  -s SEED_MOLECULES, --seed-molecules SEED_MOLECULES
                        optional file containing any seed molecules that have
                        already been picked
  --fragment-method {hac,mw}
                        Approach to find biggest fragment if more than one
                        (hac = biggest by heavy atom count, mw = biggest by
                        mol weight)
  --output-fragment     Output the biggest fragment rather than the original
                        molecule
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
usage: o3dAlign [-h] [--qmolidx QMOLIDX] [--crippen] [-t THRESHOLD] [-n NUM]
                [-a ATTEMPTS] [-r RMSD] [-e EMIN] [-i INPUT] [-if {sdf,json}]
                [-o OUTPUT] [-of {sdf,json}] [--meta]
                query

Open3DAlign with RDKit

positional arguments:
  query                 query molfile

optional arguments:
  -h, --help            show this help message and exit
  --qmolidx QMOLIDX     Query molecule index in SD file if not the first
  --crippen             Use Crippen (logP) contributions
  -t THRESHOLD, --threshold THRESHOLD
                        score cuttoff relative to alignment of query to itself
  -n NUM, --num NUM     number of conformers to generate, if None then input
                        structures are assumed to already be 3D
  -a ATTEMPTS, --attempts ATTEMPTS
                        number of attempts to generate conformers
  -r RMSD, --rmsd RMSD  prune RMSD threshold for excluding conformers
  -e EMIN, --emin EMIN  energy minimisation iterations for generated
                        conformers (default of 0 means none)
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
usage: pbf_ev [-h] [-i INPUT] [-if {sdf,json}] [-o OUTPUT] [-of {sdf,json}]
              [--meta]

Calculate plane of best fit for molecules

optional arguments:
  -h, --help            show this help message and exit
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
usage: rxn_maker [-h] [-i INPUT] [-if {sdf,json}] [-o OUTPUT] [-of {sdf,json}]
                 [--meta] [-q] [-m]
                 [-r {Amides,Sarah_Cu,Sarah_Quat_Am,SNAr,Urea,Suzuki Coupling,Sonogashira,Sulfonamide,Reductive_Amination,N-Alkylation,Ether_Coupling,Ester_Coupling,Benzimidazole,Triazole,Benzoxazole}]
                 [-rl REAGENT_LIB] [-rlf {sdf,json}]

RDKit rxn process

optional arguments:
  -h, --help            show this help message and exit
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
  -q, --quiet           Quiet mode
  -m, --multi           Output one file for each reaction
  -r {Amides,Sarah_Cu,Sarah_Quat_Am,SNAr,Urea,Suzuki Coupling,Sonogashira,Sulfonamide,Reductive_Amination,N-Alkylation,Ether_Coupling,Ester_Coupling,Benzimidazole,Triazole,Benzoxazole}, --reaction {Amides,Sarah_Cu,Sarah_Quat_Am,SNAr,Urea,Suzuki Coupling,Sonogashira,Sulfonamide,Reductive_Amination,N-Alkylation,Ether_Coupling,Ester_Coupling,Benzimidazole,Triazole,Benzoxazole}
                        Name of reaction to be run
  -rl REAGENT_LIB, --reagent_lib REAGENT_LIB
                        Reagent file, if not defined the STDIN is used
  -rlf {sdf,json}, --reagent_lib_format {sdf,json}
                        Reagent file format. When using STDIN this must be
                        specified.
usage: rxn_selector [-h] [-i INPUT] [-if {sdf,json}] [-o OUTPUT]
                    [-of {sdf,json}] [--meta] [-q] [-m]
                    [-r {Amides,Sarah_Cu,Sarah_Quat_Am,SNAr,Urea,Suzuki Coupling,Sonogashira,Sulfonamide,Reductive_Amination,N-Alkylation,Ether_Coupling,Ester_Coupling,Benzimidazole,Triazole,Benzoxazole}]
                    [-rl REAGENT_LIB] [-rlf {sdf,json}]

RDKit rxn process

optional arguments:
  -h, --help            show this help message and exit
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
  -q, --quiet           Quiet mode
  -m, --multi           Output one file for each reaction
  -r {Amides,Sarah_Cu,Sarah_Quat_Am,SNAr,Urea,Suzuki Coupling,Sonogashira,Sulfonamide,Reductive_Amination,N-Alkylation,Ether_Coupling,Ester_Coupling,Benzimidazole,Triazole,Benzoxazole}, --reaction {Amides,Sarah_Cu,Sarah_Quat_Am,SNAr,Urea,Suzuki Coupling,Sonogashira,Sulfonamide,Reductive_Amination,N-Alkylation,Ether_Coupling,Ester_Coupling,Benzimidazole,Triazole,Benzoxazole}
                        Name of reaction to be run
  -rl REAGENT_LIB, --reagent_lib REAGENT_LIB
                        Input SD file, if not defined the STDIN is used
  -rlf {sdf,json}, --reagent_lib_format {sdf,json}
                        Input format. When using STDIN this must be specified.
usage: rxn_smarts_filter [-h] [-i INPUT] [-if {sdf,json}] [-o OUTPUT]
                         [-of {sdf,json}] [--meta] [-q] [-m] [--thin]

RDKit rxn smarts filter

optional arguments:
  -h, --help            show this help message and exit
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
  -q, --quiet           Quiet mode
  -m, --multi           Output one file for each reaction
  --thin                Thin output mode
usage: screen_multi [-h] [--qsmiles QSMILES | --qsdf QSDF | --qjson QJSON]
                    [--qsmilesTitleLine] [--qsmilesDelimiter QSMILESDELIMITER]
                    [--qsmilesColumn QSMILESCOLUMN]
                    [--qsmilesNameColumn QSMILESNAMECOLUMN] [--qprop QPROP]
                    [--simmin SIMMIN] [--simmax SIMMAX]
                    [-d {maccs,morgan2,morgan3,rdkit}]
                    [-m {asymmetric,braunblanquet,cosine,dice,kulczynski,mcconnaughey,rogotgoldberg,russel,sokal,tanimoto}]
                    [-f {hac,mw}] [--hacmin HACMIN] [--hacmax HACMAX]
                    [--mwmin MWMIN] [--mwmax MWMAX] [-i INPUT]
                    [-if {sdf,json}] [-o OUTPUT] [-of {sdf,json}] [--meta]
                    [--thin] [-q]

RDKit screen

optional arguments:
  -h, --help            show this help message and exit
  --qsmiles QSMILES     filename of query structures as smiles (incompatible
                        with --sdf and --qjson args)
  --qsdf QSDF           filename of query structures as sdfile (incompatible
                        with --smiles and --qjson args)
  --qjson QJSON         filename of query structures as MoleculeObject JSON
                        (incompatible with --qsmiles and --qsdf args)
  --qsmilesTitleLine    the smiles file has a title line
  --qsmilesDelimiter QSMILESDELIMITER
                        delimiter for smiles file (default is tab)
  --qsmilesColumn QSMILESCOLUMN
                        column in smiles file with the smiles (default is
                        first column)
  --qsmilesNameColumn QSMILESNAMECOLUMN
                        column in smiles file with ID (default is second
                        column)
  --qprop QPROP         property name in query molecules to report. If not
                        defined (or property is not present) then name
                        property is not written. JSON format uses the UUID as
                        default
  --simmin SIMMIN       similarity lower cutoff (1.0 means identical)
  --simmax SIMMAX       similarity upper cutoff (1.0 means identical)
  -d {maccs,morgan2,morgan3,rdkit}, --descriptor {maccs,morgan2,morgan3,rdkit}
                        descriptor or fingerprint type (default rdkit)
  -m {asymmetric,braunblanquet,cosine,dice,kulczynski,mcconnaughey,rogotgoldberg,russel,sokal,tanimoto}, --metric {asymmetric,braunblanquet,cosine,dice,kulczynski,mcconnaughey,rogotgoldberg,russel,sokal,tanimoto}
                        similarity metric (default tanimoto)
  -f {hac,mw}, --fragment {hac,mw}
                        Find single fragment if more than one (hac = biggest
                        by heavy atom count, mw = biggest by mol weight )
  --hacmin HACMIN       Min heavy atom count
  --hacmax HACMAX       Max heavy atom count
  --mwmin MWMIN         Min mol weight
  --mwmax MWMAX         Max mol weight
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
  --thin                Thin output mode
  -q, --quiet           Quiet mode
usage: sanifier [-h] [-i INPUT] [-if {sdf,json}] [-o OUTPUT] [-of {sdf,json}]
                [--meta] [-et] [-es] [-st] [-stm {molvs,flatkinson}]
                [-mf {smiles,mol_2d,mol_3d}]

RDKit molecule standardizer / enumerator

optional arguments:
  -h, --help            show this help message and exit
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
  -et, --enumerate_tauts
                        Enumerate all tautomers
  -es, --enumerate_stereo
                        Enumerate all stereoisomers
  -st, --standardize    Standardize molecules. Cannot be true if enumerate is
                        on.
  -stm {molvs,flatkinson}, --standardize_method {molvs,flatkinson}
                        Choose the method to standardize.
  -mf {smiles,mol_2d,mol_3d}, --mol_format {smiles,mol_2d,mol_3d}
                        Format for molecules.
usage: screen [-h] [--qsmiles QSMILES | --qmolfile QMOLFILE] [--simmin SIMMIN]
              [--simmax SIMMAX] [-d {maccs,morgan2,morgan3,rdkit}]
              [-m {asymmetric,braunblanquet,cosine,dice,kulczynski,mcconnaughey,rogotgoldberg,russel,sokal,tanimoto}]
              [-f {hac,mw}] [--hacmin HACMIN] [--hacmax HACMAX]
              [--mwmin MWMIN] [--mwmax MWMAX] [-i INPUT] [-if {sdf,json}]
              [-o OUTPUT] [-of {sdf,json}] [--meta] [--thin] [-q]

RDKit screen

optional arguments:
  -h, --help            show this help message and exit
  --qsmiles QSMILES     query structure as smiles (incompatible with -qmolfile
                        arg)
  --qmolfile QMOLFILE   query structure as filename in molfile format
                        (incompatible with -qsmiles arg)
  --simmin SIMMIN       similarity lower cutoff (1.0 means identical)
  --simmax SIMMAX       similarity upper cutoff (1.0 means identical)
  -d {maccs,morgan2,morgan3,rdkit}, --descriptor {maccs,morgan2,morgan3,rdkit}
                        descriptor or fingerprint type (default rdkit)
  -m {asymmetric,braunblanquet,cosine,dice,kulczynski,mcconnaughey,rogotgoldberg,russel,sokal,tanimoto}, --metric {asymmetric,braunblanquet,cosine,dice,kulczynski,mcconnaughey,rogotgoldberg,russel,sokal,tanimoto}
                        similarity metric (default tanimoto)
  -f {hac,mw}, --fragment {hac,mw}
                        Find single fragment if more than one (hac = biggest
                        by heavy atom count, mw = biggest by mol weight )
  --hacmin HACMIN       Min heavy atom count
  --hacmax HACMAX       Max heavy atom count
  --mwmin MWMIN         Min mol weight
  --mwmax MWMAX         Max mol weight
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
  --thin                Thin output mode
  -q, --quiet           Quiet mode
usage: standardize [-h] [--fragment-method {hac,mw}] [--neutralize] [-i INPUT]
                   [-if {sdf,json}] [-o OUTPUT] [-of {sdf,json}] [--meta] [-q]
                   [--thin]

RDKit Standardize

optional arguments:
  -h, --help            show this help message and exit
  --fragment-method {hac,mw}
                        Approach to find biggest fragment if more than one
                        (hac = biggest by heavy atom count, mw = biggest by
                        mol weight)
  --neutralize          Neutralize the molecule
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
  -q, --quiet           Quiet mode
  --thin                Thin output mode
usage: sucos [-h] [-i INPUT] [-if {sdf,json}] [-o OUTPUT] [-of {sdf,json}]
             [--meta] [-r REFMOL] [-tm TARGET] [-tf TARGET_FORMAT]
             [-ti TARGETIDX] [--tanimoto] [--score_mode {all,closest,best}]

SuCOS with RDKit

optional arguments:
  -h, --help            show this help message and exit
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
  -r REFMOL, --refmol REFMOL
                        Molecule to compare against in Molfile (.mol) or SDF
                        (.sdf) format
  -tm TARGET, --target TARGET
                        Target molecule to compare against
  -tf TARGET_FORMAT, --target-format TARGET_FORMAT
                        Target molecule format
  -ti TARGETIDX, --targetidx TARGETIDX
                        Target molecule index in file if not the first
  --tanimoto            Include Tanimoto distance in score
  --score_mode {all,closest,best}
                        choose the scoring mode for the feature map, default
                        is 'all'.
usage: sucos_max [-h] [-i INPUT] [-if {sdf,json}] [-o OUTPUT] [-of {sdf,json}]
                 [--meta] [-tm TARGET_MOLECULES] [-tf TARGETS_FORMAT]
                 [-n NAME_FIELD] [--no-gzip] [--filter-value FILTER_VALUE]
                 [--filter-field FILTER_FIELD]

Max SuCOS scores with RDKit

optional arguments:
  -h, --help            show this help message and exit
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
  -tm TARGET_MOLECULES, --target-molecules TARGET_MOLECULES
                        Target molecules to compare against
  -tf TARGETS_FORMAT, --targets-format TARGETS_FORMAT
                        Target molecules format
  -n NAME_FIELD, --name-field NAME_FIELD
                        Name of field with molecule name
  --no-gzip             Do not compress the output (STDOUT is never compressed
  --filter-value FILTER_VALUE
                        Filter out values with scores less than this.
  --filter-field FILTER_FIELD
                        Field to use to filter values.
usage: obabel_prepare_pdb [-h] [--no-gzip] [-i INPUT] [-o OUTPUT] [-mol2]
                          [-pdbqt] [--meta] [-prot PROTONATE]

Open babel PDB prepare

optional arguments:
  -h, --help            show this help message and exit
  --no-gzip             Do not compress the output
  -i INPUT, --input INPUT
                        PDB file for converting
  -o OUTPUT, --output OUTPUT
                        Base name for output files (no extension).
  -mol2, --mol2         Output as Mol2 format.
  -pdbqt, --pdbqt       Output as pdbqt format.
  --meta                Write metrics files
  -prot PROTONATE, --protonate PROTONATE
                        protonate at this pH (optional)
usage: plip [-h] [-i INPUT] [-if {sdf,json}] [-o OUTPUT] [-of {sdf,json}]
            [--meta] [--no-gzip] [-pdb PDB_FILE] [-t THRESHOLD]
            [--threads THREADS] [--thin]

PLI scoring - Docking calculation.

optional arguments:
  -h, --help            show this help message and exit
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
  --no-gzip             Do not compress the output (STDOUT is never compressed
  -pdb PDB_FILE, --pdb_file PDB_FILE
                        PDB file for scoring
  -t THRESHOLD, --threshold THRESHOLD
                        The maximum score to allow
  --threads THREADS     Number of threads to used. Default is the number of
                        cores
  --thin                Thin output mode
usage: smog2016 [-h] [-i INPUT] [-if {sdf,json}] [-o OUTPUT] [-of {sdf,json}]
                [--meta] [--no-gzip] [-pdb PDB_FILE] [-t THRESHOLD]
                [--threads THREADS] [--thin]

SMoG2016 - Docking calculation.

optional arguments:
  -h, --help            show this help message and exit
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
  --no-gzip             Do not compress the output (STDOUT is never compressed
  -pdb PDB_FILE, --pdb_file PDB_FILE
                        PDB file for scoring
  -t THRESHOLD, --threshold THRESHOLD
                        The maximum score to allow
  --threads THREADS     Number of threads to used. Default is the number of
                        cores
  --thin                Thin output mode
usage: pk_tmax_cmax_sim [-h] --half-life HALF_LIFE --absorption ABSORPTION
                        --dose DOSE --auc AUC --time TIME
                        [--plot-height PLOT_HEIGHT] [--plot-width PLOT_WIDTH]
                        [--font-size FONT_SIZE] [-o OUTPUT] [-q]

Tmax/Cmax simulation

optional arguments:
  -h, --help            show this help message and exit
  --half-life HALF_LIFE
                        half life (hours)
  --absorption ABSORPTION
                        half life absorption (hours)
  --dose DOSE           initial dose (mg)
  --auc AUC             AUC (mg/L*hr)
  --time TIME           time (h)
  --plot-height PLOT_HEIGHT
                        plot height
  --plot-width PLOT_WIDTH
                        plot width
  --font-size FONT_SIZE
                        font size
  -o OUTPUT, --output OUTPUT
                        output file base name
  -q, --quiet           Quiet mode
usage: featurestein_generate [-h] [-i INPUT] [-if {sdf,json}] [-f FEAT_MAP]
                             [--metrics]

FeatureStein generation with RDKit

optional arguments:
  -h, --help            show this help message and exit
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -f FEAT_MAP, --feat-map FEAT_MAP
                        Name of pickle to generate
  --metrics             Write metrics
usage: featurestein_score [-h] [-i INPUT] [-if {sdf,json}] [-o OUTPUT]
                          [-of {sdf,json}] [--meta] [-f FEAT_MAP] [--no-gzip]
                          [--metrics]

FeatureStein scoring with RDKit

optional arguments:
  -h, --help            show this help message and exit
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
  -f FEAT_MAP, --feat-map FEAT_MAP
                        Feature Map pickle to score with
  --no-gzip             Do not compress the output (STDOUT is never compressed
  --metrics             Write metrics

For help, use: python dimorphite_dl.py --help

If you use Dimorphite-DL in your research, please cite:
Ropp PJ, Kaminsky JC, Yablonski S, Durrant JD (2019) Dimorphite-DL: An
open-source program for enumerating the ionization states of drug-like small
molecules. J Cheminform 11:14. doi:10.1186/s13321-019-0336-9.

RDKit version: 2021.03.5
usage: prepare_tether [-h] [--smi SMI] [--mol MOL] [-o OUTFILE]
                      [--min-ph MIN_PH] [--max-ph MAX_PH] [-c CHUNK_SIZE]
                      [--max-inputs MAX_INPUTS] [--max-outputs MAX_OUTPUTS]
                      [--modulus MODULUS] [--num-conformers NUM_CONFORMERS]
                      [--timeout-embed TIMEOUT_EMBED]
                      [--ring-matches-ring-only] [--complete-rings-only]
                      [--atom-compare {CompareAny,CompareAnyHeavyAtom,CompareElements,CompareIsotopes}]
                      [--bond-compare {CompareAny,CompareOrder,CompareOrderExact}]
                      [--minimize MINIMIZE]

Tether prep - prepare candidates for docking

optional arguments:
  -h, --help            show this help message and exit
  --smi SMI             SMILES containing the expanded candidates for a hit)
  --mol MOL             Molfile containing the hit to tether to)
  -o OUTFILE, --outfile OUTFILE
                        Base name for results SDF file (will generate
                        something like Tethered_Mpro-x0072_000.sdf)
  --min-ph MIN_PH       The min pH to consider
  --max-ph MAX_PH       The max pH to consider
  -c CHUNK_SIZE, --chunk-size CHUNK_SIZE
                        Chunk size for files
  --max-inputs MAX_INPUTS
                        Max number of molecules to process
  --max-outputs MAX_OUTPUTS
                        Max number of records to output
  --modulus MODULUS     Process only mols with this modulus
  --num-conformers NUM_CONFORMERS
                        Generate this number of conformers for each tethering
  --timeout-embed TIMEOUT_EMBED
                        Timeout in seconds to apply to limit embedding
  --ring-matches-ring-only
                        Set ringMatchesRingOnly MCS property to True
  --complete-rings-only
                        Set completeRingsOnly MCS property to True
  --atom-compare {CompareAny,CompareAnyHeavyAtom,CompareElements,CompareIsotopes}
                        atomCompare MCS property
  --bond-compare {CompareAny,CompareOrder,CompareOrderExact}
                        bondCompare MCS property
  --minimize MINIMIZE   number of minimisation cycles
usage: split_fragnet_candidates [-h] [-i INPUT] [-g]

Split fragnet candidates - Split fragment network expansion into individual
sets

optional arguments:
  -h, --help            show this help message and exit
  -i INPUT, --input INPUT
                        JSON containing the expanded candidates)
  -g, --generate-filenames
                        Use automatically generated file names instead of the
                        title field)
usage: xcos [-h] [-i INPUT] [-if {sdf,json}] [-o OUTPUT] [-of {sdf,json}]
            [--meta] -f FRAGMENTS [-ff FRAGMENTS_FORMAT] [-t SCORE_THRESHOLD]
            [--no-gzip] [--metrics]

XCos scoring with RDKit

optional arguments:
  -h, --help            show this help message and exit
  -i INPUT, --input INPUT
                        Input file, if not defined the STDIN is used
  -if {sdf,json}, --informat {sdf,json}
                        Input format. When using STDIN this must be specified.
  -o OUTPUT, --output OUTPUT
                        Base name for output file (no extension). If not
                        defined then SDTOUT is used for the structures and
                        output is used as base name of the other files.
  -of {sdf,json}, --outformat {sdf,json}
                        Output format. Defaults to 'sdf'.
  --meta                Write metadata and metrics files
  -f FRAGMENTS, --fragments FRAGMENTS
                        Fragments to compare
  -ff FRAGMENTS_FORMAT, --fragments-format FRAGMENTS_FORMAT
                        Fragments format
  -t SCORE_THRESHOLD, --score-threshold SCORE_THRESHOLD
                        Minimum shape overlay and feature map score required
                        for scoring a bit to a fragment
  --no-gzip             Do not compress the output (STDOUT is never compressed
  --metrics             Write metrics

Resource usage statistics from testing im-pipelines:
   Process count: 5
   CPU time: Sys=0:00:01.0, User=0:00:03.2
   Memory: 60.3M
   Disk usage: 16B
   Time elapsed: 0:00:39.2


TEST END: im-pipelines-1.1.6-pyh3252c3a_0.tar.bz2
--dirty flag and --keep-old-work not specified. Removing build/test folder after successful build/test.

