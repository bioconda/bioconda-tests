  Package              Version  Build                Channel                                   Size
─────────────────────────────────────────────────────────────────────────────────────────────────────
  Install:
─────────────────────────────────────────────────────────────────────────────────────────────────────

  + _libgcc_mutex          0.1  conda_forge          conda-forge/linux-64                    Cached
  + _openmp_mutex          4.5  1_gnu                conda-forge/linux-64                    Cached
  + ca-certificates  2021.5.30  ha878542_0           conda-forge/linux-64                    Cached
  + gsl                    2.6  he838d99_2           conda-forge/linux-64                      3 MB
  + libblas              3.9.0  11_linux64_openblas  conda-forge/linux-64                     12 KB
  + libcblas             3.9.0  11_linux64_openblas  conda-forge/linux-64                     11 KB
  + libgcc-ng           11.1.0  hc902ee8_8           conda-forge/linux-64                    Cached
  + libgfortran-ng      11.1.0  h69a702a_8           conda-forge/linux-64                     19 KB
  + libgfortran5        11.1.0  h6c583b3_8           conda-forge/linux-64                      2 MB
  + libgomp             11.1.0  hc902ee8_8           conda-forge/linux-64                    Cached
  + libopenblas         0.3.17  pthreads_h8fe5266_1  conda-forge/linux-64                      9 MB
  + libstdcxx-ng        11.1.0  h56837e0_8           conda-forge/linux-64                    Cached
  + openssl             1.1.1k  h7f98852_1           conda-forge/linux-64                    Cached
  + rust-bio-tools      0.27.0  h4af157f_0           /home/vsts/conda/conda-bld/linux-64       8 MB
  + starcode               1.4  h779adbc_1           bioconda/linux-64                        33 KB

  Summary:

  Install: 15 packages

  Total download: 22 MB

─────────────────────────────────────────────────────────────────────────────────────────────────────

Updating build index: /home/vsts/conda/conda-bld

TEST START: rust-bio-tools-0.27.0-h4af157f_0.tar.bz2

## Package Plan ##

  environment location: /home/vsts/conda/conda-bld/rust-bio-tools_1630457271540/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeho


The following NEW packages will be INSTALLED:

    _libgcc_mutex:   0.1-conda_forge            conda-forge
    _openmp_mutex:   4.5-1_gnu                  conda-forge
    ca-certificates: 2021.5.30-ha878542_0       conda-forge
    gsl:             2.6-he838d99_2             conda-forge
    libblas:         3.9.0-11_linux64_openblas  conda-forge
    libcblas:        3.9.0-11_linux64_openblas  conda-forge
    libgcc-ng:       11.1.0-hc902ee8_8          conda-forge
    libgfortran-ng:  11.1.0-h69a702a_8          conda-forge
    libgfortran5:    11.1.0-h6c583b3_8          conda-forge
    libgomp:         11.1.0-hc902ee8_8          conda-forge
    libopenblas:     0.3.17-pthreads_h8fe5266_1 conda-forge
    libstdcxx-ng:    11.1.0-h56837e0_8          conda-forge
    openssl:         1.1.1k-h7f98852_1          conda-forge
    rust-bio-tools:  0.27.0-h4af157f_0          local      
    starcode:        1.4-h779adbc_1             bioconda   

Preparing transaction: ...working... done
Verifying transaction: ...working... done
Executing transaction: ...working... done
export PREFIX=/home/vsts/conda/conda-bld/rust-bio-tools_1630457271540/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeho
export SRC_DIR=/home/vsts/conda/conda-bld/rust-bio-tools_1630457271540/test_tmp
Rust-Bio-Tools 0.27.0
Johannes Köster <johannes.koester@tu-dortmund.de>
A set of ultra-fast command line utilities for bioinformatics tasks based on Rust-Bio.

USAGE:
    rbt [FLAGS] <SUBCOMMAND>

FLAGS:
    -h, --help       
            Prints help information

    -V, --version    
            Prints version information

    -v, --verbose    
            Verbose output.


SUBCOMMANDS:
    bam-depth                      Print depth of BAM or CRAM file at given positions from STDIN (tab separated:
                                   chrom, pos)
    collapse-reads-to-fragments    Tool to predict maximum likelihood fragment sequence from FASTQ or BAM files
    csv-report                     Creates report from a given csv file containing a table with the given data
                                   Examples: With current directory as default ouput path: rbt csv-report
                                   path/to/table.csv --rows-per-page 100 --sort-column "p-value" --sort-order
                                   ascending
    fastq-filter                   Remove records from a FASTQ file (from STDIN), output to STDOUT
    fastq-split                    Split FASTQ file from STDIN into N chunks
    help                           Prints this message or the help of the given subcommand(s)
    plot-bam                       Creates a html file with a vega visualization of the given bam region Example:
                                   rbt plot-bam -b input.bam -g 2:132424-132924 -r input.fa > plot.html
    sequence-stats                 Tool to compute stats on sequence file (from STDIN), output is in YAML with
                                   fields: - min: length of shortest sequence - max: length of longest sequence -
                                   average: average length of sequence - median: median length of sequence -
                                   nb_reads: number of reads - nb_bases: number of bases - n50: N50 of sequences
    vcf-annotate-dgidb             Looks for interacting drugs in DGIdb and annotates them for every gene in every
                                   record
    vcf-baf                        Annotate b-allele frequency for each single nucleotide variant and sample
    vcf-fix-iupac-alleles          Convert any IUPAC codes in alleles into Ns (in order to comply with VCF 4 specs).
                                   Reads VCF/BCF from STDIN and writes BCF to STDOUT
    vcf-match                      Annotate for each variant in a VCF/BCF at STDIN whether it is contained in a
                                   given second VCF/BCF. The matching is fuzzy for indels and exact for SNVs.
                                   Results are printed as BCF to STDOUT, with an additional INFO tag MATCHING. The
                                   two vcfs do not have to be sorted
    vcf-report                     Creates report from a given VCF file including a visual plot for every variant
                                   with the given BAM and FASTA file. The VCF file has to be annotated with VEP,
                                   using the options --hgvs and --hgvsg
    vcf-split                      Split a given VCF/BCF file into N chunks of approximately the same size.
                                   Breakends are kept together. Output type is always BCF
    vcf-to-txt                     Convert VCF/BCF file from STDIN to tab-separated TXT file at STDOUT. INFO and
                                   FORMAT tags have to be selected explicitly

Resource usage statistics from testing rust-bio-tools:
   Process count: 1
   CPU time: Sys=0:00:00.0, User=-
   Memory: 3.4M
   Disk usage: 16B
   Time elapsed: 0:00:02.1


TEST END: rust-bio-tools-0.27.0-h4af157f_0.tar.bz2
--dirty flag and --keep-old-work not specified. Removing build/test folder after successful build/test.

