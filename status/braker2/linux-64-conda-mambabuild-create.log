Updating build index: /home/vsts/conda/conda-bld

TEST START: /tmp/tmpkq23kd5w/noarch/braker2-2.1.6-hdfd78af_5.tar.bz2
Reloading output folder: /home/vsts/conda/conda-bld

## Package Plan ##

  environment location: /home/vsts/conda/conda-bld/braker2_1636463323982/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac


The following NEW packages will be INSTALLED:

    _libgcc_mutex:                   0.1-conda_forge            conda-forge            
    _openmp_mutex:                   4.5-1_gnu                  conda-forge            
    alsa-lib:                        1.2.3-h516909a_0           conda-forge            
    augustus:                        3.4.0-pl5262h5a9fe7b_2     bioconda               
    bamtools:                        2.5.1-h9a82719_9           bioconda               
    biopython:                       1.79-py310h6acc77f_1       conda-forge            
    blast:                           2.12.0-pl5262h3289130_0    bioconda               
    boost-cpp:                       1.74.0-h312852a_4          conda-forge            
    braker2:                         2.1.6-hdfd78af_5           file:///tmp/tmpkq23kd5w
    bzip2:                           1.0.8-h7f98852_4           conda-forge            
    c-ares:                          1.18.1-h7f98852_0          conda-forge            
    ca-certificates:                 2021.10.8-ha878542_0       conda-forge            
    cairo:                           1.16.0-h6cf1ce9_1008       conda-forge            
    cdbtools:                        0.99-h9a82719_6            bioconda               
    curl:                            7.79.1-h2574ce0_1          conda-forge            
    diamond:                         2.0.13-hdcc8f71_0          bioconda               
    entrez-direct:                   16.2-he881be0_0            bioconda               
    exonerate:                       2.4.0-h7c8e0dd_4           bioconda               
    fontconfig:                      2.13.1-hba837de_1005       conda-forge            
    freetype:                        2.10.4-h0708190_1          conda-forge            
    gawk:                            5.1.0-h7f98852_0           conda-forge            
    gemoma:                          1.6.4-hdfd78af_1           bioconda               
    genomethreader:                  1.7.1-h1b792b2_3           bioconda               
    gettext:                         0.19.8.1-h73d1719_1008     conda-forge            
    giflib:                          5.2.1-h36c2ea0_2           conda-forge            
    glib:                            2.70.0-h780b84a_1          conda-forge            
    glib-tools:                      2.70.0-h780b84a_1          conda-forge            
    gmp:                             6.2.1-h58526e2_0           conda-forge            
    graphite2:                       1.3.13-h58526e2_1001       conda-forge            
    gsl:                             2.6-he838d99_2             conda-forge            
    harfbuzz:                        2.9.1-h83ec7ef_1           conda-forge            
    htslib:                          1.12-h9093b5e_1            bioconda               
    icu:                             68.2-h9c3ff4c_0            conda-forge            
    jbig:                            2.1-h7f98852_2003          conda-forge            
    jpeg:                            9d-h36c2ea0_0              conda-forge            
    krb5:                            1.19.2-hcc1bbae_3          conda-forge            
    lcms2:                           2.12-hddcbb42_0            conda-forge            
    ld_impl_linux-64:                2.36.1-hea4e1c9_2          conda-forge            
    lerc:                            2.2.1-h9c3ff4c_0           conda-forge            
    libblas:                         3.9.0-12_linux64_openblas  conda-forge            
    libcblas:                        3.9.0-12_linux64_openblas  conda-forge            
    libcurl:                         7.79.1-h2574ce0_1          conda-forge            
    libdeflate:                      1.7-h7f98852_5             conda-forge            
    libedit:                         3.1.20191231-he28a2e2_2    conda-forge            
    libev:                           4.33-h516909a_1            conda-forge            
    libffi:                          3.4.2-h9c3ff4c_4           conda-forge            
    libgcc-ng:                       11.2.0-h1d223b6_11         conda-forge            
    libgfortran-ng:                  11.2.0-h69a702a_11         conda-forge            
    libgfortran5:                    11.2.0-h5c6108e_11         conda-forge            
    libglib:                         2.70.0-h174f98d_1          conda-forge            
    libgomp:                         11.2.0-h1d223b6_11         conda-forge            
    libiconv:                        1.16-h516909a_0            conda-forge            
    libidn2:                         2.3.2-h7f98852_0           conda-forge            
    liblapack:                       3.9.0-12_linux64_openblas  conda-forge            
    libnghttp2:                      1.43.0-h812cca2_1          conda-forge            
    libnsl:                          2.0.0-h7f98852_0           conda-forge            
    libopenblas:                     0.3.18-pthreads_h8fe5266_0 conda-forge            
    libpng:                          1.6.37-h21135ba_2          conda-forge            
    libssh2:                         1.10.0-ha56f1ee_2          conda-forge            
    libstdcxx-ng:                    11.2.0-he4da1e4_11         conda-forge            
    libtiff:                         4.3.0-hf544144_1           conda-forge            
    libunistring:                    0.9.10-h7f98852_0          conda-forge            
    libuuid:                         2.32.1-h7f98852_1000       conda-forge            
    libwebp-base:                    1.2.1-h7f98852_0           conda-forge            
    libxcb:                          1.13-h7f98852_1003         conda-forge            
    libxml2:                         2.9.12-h72842e0_0          conda-forge            
    libzlib:                         1.2.11-h36c2ea0_1013       conda-forge            
    lp_solve:                        5.5.2.5-h14c3975_1001      conda-forge            
    lz4-c:                           1.9.3-h9c3ff4c_1           conda-forge            
    makehub:                         1.0.5-1                    bioconda               
    metis:                           5.1.0-h58526e2_1006        conda-forge            
    mmseqs2:                         13.45111-h95f258a_1        bioconda               
    mpfr:                            4.1.0-h9202a9a_1           conda-forge            
    mysql-connector-c:               6.1.11-h6eb9d5d_1007       conda-forge            
    ncurses:                         6.2-h58526e2_4             conda-forge            
    numpy:                           1.21.4-py310h57288b1_0     conda-forge            
    openjdk:                         11.0.9.1-h5cc2fde_1        conda-forge            
    openssl:                         1.1.1l-h7f98852_0          conda-forge            
    pcre:                            8.45-h9c3ff4c_0            conda-forge            
    perl:                            5.26.2-h36c2ea0_1008       conda-forge            
    perl-apache-test:                1.40-pl526_1               bioconda               
    perl-app-cpanminus:              1.7044-pl526_1             bioconda               
    perl-archive-tar:                2.32-pl526_0               bioconda               
    perl-base:                       2.23-pl526_1               bioconda               
    perl-carp:                       1.38-pl526_3               bioconda               
    perl-class-data-inheritable:     0.08-pl526_1               bioconda               
    perl-class-load:                 0.25-pl526_0               bioconda               
    perl-class-load-xs:              0.10-pl526h6bb024c_2       bioconda               
    perl-class-method-modifiers:     2.12-pl526_0               bioconda               
    perl-clone-choose:               0.010-pl526_0              bioconda               
    perl-common-sense:               3.74-pl526_2               bioconda               
    perl-compress-raw-bzip2:         2.087-pl526he1b5a44_0      bioconda               
    perl-compress-raw-zlib:          2.087-pl526hc9558a2_0      bioconda               
    perl-constant:                   1.33-pl526_1               bioconda               
    perl-cpan-meta:                  2.150010-pl526_0           bioconda               
    perl-cpan-meta-requirements:     2.140-pl526_0              bioconda               
    perl-cpan-meta-yaml:             0.018-pl526_0              bioconda               
    perl-data-dumper:                2.173-pl526_0              bioconda               
    perl-data-optlist:               0.110-pl526_2              bioconda               
    perl-dbi:                        1.642-pl526_0              bioconda               
    perl-devel-globaldestruction:    0.14-pl526_0               bioconda               
    perl-devel-overloadinfo:         0.005-pl526_0              bioconda               
    perl-devel-stacktrace:           2.04-pl526_0               bioconda               
    perl-dist-checkconflicts:        0.11-pl526_2               bioconda               
    perl-encode:                     2.88-pl526_1               bioconda               
    perl-eval-closure:               0.14-pl526h6bb024c_4       bioconda               
    perl-exception-class:            1.44-pl526_0               bioconda               
    perl-exporter:                   5.72-pl526_1               bioconda               
    perl-exporter-tiny:              1.002001-pl526_0           bioconda               
    perl-extutils-cbuilder:          0.280230-pl526_1           bioconda               
    perl-extutils-makemaker:         7.36-pl526_1               bioconda               
    perl-extutils-manifest:          1.72-pl526_0               bioconda               
    perl-extutils-parsexs:           3.35-pl526_0               bioconda               
    perl-file-homedir:               1.004-pl526_2              bioconda               
    perl-file-path:                  2.16-pl526_0               bioconda               
    perl-file-spec:                  3.48_01-pl526_1            bioconda               
    perl-file-temp:                  0.2304-pl526_2             bioconda               
    perl-file-which:                 1.23-pl526_0               bioconda               
    perl-getopt-long:                2.50-pl526_1               bioconda               
    perl-hash-merge:                 0.300-pl526_0              bioconda               
    perl-io-compress:                2.087-pl526he1b5a44_0      bioconda               
    perl-io-zlib:                    1.10-pl526_2               bioconda               
    perl-ipc-cmd:                    1.02-pl526_0               bioconda               
    perl-json:                       4.02-pl526_0               bioconda               
    perl-json-pp:                    4.04-pl526_0               bioconda               
    perl-json-xs:                    2.34-pl526h6bb024c_3       bioconda               
    perl-list-moreutils:             0.428-pl526_1              bioconda               
    perl-list-moreutils-xs:          0.428-pl526_0              bioconda               
    perl-list-util:                  1.38-pl526_1               bioconda               
    perl-locale-maketext-simple:     0.21-pl526_2               bioconda               
    perl-logger-simple:              2.0-pl526_0                bioconda               
    perl-math-utils:                 1.13-pl526_0               bioconda               
    perl-mce:                        1.837-pl526_0              bioconda               
    perl-module-build:               0.4224-pl526_3             bioconda               
    perl-module-corelist:            5.20190524-pl526_0         bioconda               
    perl-module-implementation:      0.09-pl526_2               bioconda               
    perl-module-load:                0.32-pl526_1               bioconda               
    perl-module-load-conditional:    0.68-pl526_2               bioconda               
    perl-module-metadata:            1.000036-pl526_0           bioconda               
    perl-module-runtime:             0.016-pl526_1              bioconda               
    perl-module-runtime-conflicts:   0.003-pl526_0              bioconda               
    perl-moo:                        2.003004-pl526_0           bioconda               
    perl-moose:                      2.2011-pl526hf484d3e_1     bioconda               
    perl-mro-compat:                 0.13-pl526_0               bioconda               
    perl-object-insideout:           4.05-pl526_0               bioconda               
    perl-package-deprecationmanager: 0.17-pl526_0               bioconda               
    perl-package-stash:              0.38-pl526hf484d3e_1       bioconda               
    perl-package-stash-xs:           0.28-pl526hf484d3e_1       bioconda               
    perl-parallel-forkmanager:       2.02-pl526_0               bioconda               
    perl-params-check:               0.38-pl526_1               bioconda               
    perl-params-util:                1.07-pl526h6bb024c_4       bioconda               
    perl-parent:                     0.236-pl526_1              bioconda               
    perl-pathtools:                  3.75-pl526h14c3975_1       bioconda               
    perl-perl-ostype:                1.010-pl526_1              bioconda               
    perl-posix:                      1.38_03-pl526_1            bioconda               
    perl-role-tiny:                  2.000008-pl526_0           bioconda               
    perl-scalar-list-utils:          1.52-pl526h516909a_0       bioconda               
    perl-scalar-util-numeric:        0.40-pl526_1               bioconda               
    perl-socket:                     2.027-pl526_1              bioconda               
    perl-storable:                   3.15-pl526h14c3975_0       bioconda               
    perl-sub-exporter:               0.987-pl526_2              bioconda               
    perl-sub-exporter-progressive:   0.001013-pl526_0           bioconda               
    perl-sub-identify:               0.14-pl526h14c3975_0       bioconda               
    perl-sub-install:                0.928-pl526_2              bioconda               
    perl-sub-name:                   0.21-pl526_1               bioconda               
    perl-sub-quote:                  2.006003-pl526_1           bioconda               
    perl-test-harness:               3.42-pl526_0               bioconda               
    perl-test-pod:                   1.52-pl526_0               bioconda               
    perl-text-abbrev:                1.02-pl526_0               bioconda               
    perl-text-parsewords:            3.30-pl526_0               bioconda               
    perl-time-hires:                 1.9760-pl526h14c3975_1     bioconda               
    perl-try-tiny:                   0.30-pl526_1               bioconda               
    perl-types-serialiser:           1.0-pl526_2                bioconda               
    perl-version:                    0.9924-pl526_0             bioconda               
    perl-xsloader:                   0.24-pl526_0               bioconda               
    perl-yaml:                       1.29-pl526_0               bioconda               
    pip:                             21.3.1-pyhd8ed1ab_0        conda-forge            
    pixman:                          0.40.0-h36c2ea0_0          conda-forge            
    pthread-stubs:                   0.4-h36c2ea0_1001          conda-forge            
    python:                          3.10.0-h62f1059_2_cpython  conda-forge            
    python_abi:                      3.10-2_cp310               conda-forge            
    readline:                        8.1-h46c0cb4_0             conda-forge            
    samtools:                        1.12-h9aed4be_1            bioconda               
    setuptools:                      58.5.3-py310hff52083_0     conda-forge            
    spaln:                           2.4.6-pl5262h9a82719_0     bioconda               
    sqlite:                          3.36.0-h9cd32fc_2          conda-forge            
    suitesparse:                     5.10.1-h9e50725_1          conda-forge            
    tar:                             1.34-ha1f6473_0            conda-forge            
    tbb:                             2021.4.0-h4bd325d_1        conda-forge            
    tk:                              8.6.11-h27826a3_1          conda-forge            
    tzdata:                          2021e-he74cb21_0           conda-forge            
    ucsc-bedtobigbed:                377-h0b8a92a_2             bioconda               
    ucsc-fatotwobit:                 377-h0b8a92a_4             bioconda               
    ucsc-genepredcheck:              377-h0b8a92a_2             bioconda               
    ucsc-genepredtobed:              377-h0b8a92a_4             bioconda               
    ucsc-genepredtobiggenepred:      377-h0b8a92a_2             bioconda               
    ucsc-gtftogenepred:              377-h0b8a92a_4             bioconda               
    ucsc-hggcpercent:                377-h0b8a92a_2             bioconda               
    ucsc-ixixx:                      377-h0b8a92a_2             bioconda               
    ucsc-twobitinfo:                 377-h0b8a92a_2             bioconda               
    ucsc-wigtobigwig:                377-h0b8a92a_2             bioconda               
    wget:                            1.20.3-ha56f1ee_1          conda-forge            
    wheel:                           0.37.0-pyhd8ed1ab_1        conda-forge            
    xorg-fixesproto:                 5.0-h7f98852_1002          conda-forge            
    xorg-inputproto:                 2.3.2-h7f98852_1002        conda-forge            
    xorg-kbproto:                    1.0.7-h7f98852_1002        conda-forge            
    xorg-libice:                     1.0.10-h7f98852_0          conda-forge            
    xorg-libsm:                      1.2.3-hd9c2040_1000        conda-forge            
    xorg-libx11:                     1.7.2-h7f98852_0           conda-forge            
    xorg-libxau:                     1.0.9-h7f98852_0           conda-forge            
    xorg-libxdmcp:                   1.1.3-h7f98852_0           conda-forge            
    xorg-libxext:                    1.3.4-h7f98852_1           conda-forge            
    xorg-libxfixes:                  5.0.3-h7f98852_1004        conda-forge            
    xorg-libxi:                      1.7.10-h7f98852_0          conda-forge            
    xorg-libxrender:                 0.9.10-h7f98852_1003       conda-forge            
    xorg-libxtst:                    1.2.3-h7f98852_1002        conda-forge            
    xorg-recordproto:                1.14.2-h7f98852_1002       conda-forge            
    xorg-renderproto:                0.11.1-h7f98852_1002       conda-forge            
    xorg-xextproto:                  7.3.0-h7f98852_1002        conda-forge            
    xorg-xproto:                     7.0.31-h7f98852_1007       conda-forge            
    xz:                              5.2.5-h516909a_1           conda-forge            
    zlib:                            1.2.11-h36c2ea0_1013       conda-forge            
    zstd:                            1.5.0-ha95c52a_0           conda-forge            

Preparing transaction: ...working... done
Verifying transaction: ...working... done
Executing transaction: ...working... 

The config/ directory from AUGUSTUS can be accessed with the variable AUGUSTUS_CONFIG_PATH.
BRAKER2 requires this directory to be in a writable location, so if that is not the case, copy this directory to a writable location, e.g.:
cp -r /home/vsts/conda/conda-bld/braker2_1636463323982/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/config/ /absolute_path_to_user_writable_directory/
export AUGUSTUS_CONFIG_PATH=/absolute_path_to_user_writable_directory/config

Due to license and distribution restrictions, GeneMark and ProtHint should be additionally installed for BRAKER2 to fully work.
These packages can be either installed as part of the BRAKER2 environment, or the PATH variable should be configured to point to them.
The GeneMark key should be located in /home/vsts/.gm_key and GENEMARK_PATH should include the path to the GeneMark executables.



done
export PREFIX=/home/vsts/conda/conda-bld/braker2_1636463323982/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac
export SRC_DIR=/home/vsts/conda/conda-bld/braker2_1636463323982/test_tmp

align2hints.pl    generate hints from spaln [O0 (=gff3)], exonerate,
                  GenomeThreader (gth), scipio
                  or GEMOMA output.
                  Spaln2 run like this: spaln -O0 ... > spalnfile
                  Exonerate run like this:
                      exonerate --model protein2genome --showtargetgff T \
                         ... > exfile
                  GenomeThreader run like this: 
                      gth -genomic genome.fa  -protein protein.fa -gff3out \
                         -skipalignmentout ... -o gthfile
                  scipio run like this:
                  scipio.1.4.1.pl genome.fa prot.fa | yaml2gff.1.4.pl \
                      > scipio.gff

SYNOPSIS

align2hints.pl [OPTIONS] --in=align.gff3 --out=hintsfile.gff \
                         --prg=gth|exonerate|spaln|scipio

  --in                 input file from gth (gff3), spaln (gff3) or exonerate
                       output
  --out                contains CDSpart, CDS and intron hints


OPTIONS

    --help                   Print this help message.
    --CDSpart_cutoff=n       This many bp are cut off of each CDSpart hint
                             w.r.t. the cds (default 15).
    --maxintronlen=n         Alignments with longer gaps are discarded
                             (default 350000).
    --minintronlen=n         Alignments with gaps shorter than this and longer
                             than maxgaplen are discarded (default 41).
    --priority=n             Priority of hint group (default 4).
    --prg=s                  Alignment program of input file, either 'gth',
                             'spaln', 'exonerate', 'scipio', or 'gemoma'.
    --source=s               Source identifier (default 'P')
    --CDS                    Do not output CDSpart hints, but complete CDS
                             hints.
    --genome_file=s          if prg is exonerate and start hints shall be
                             created, the genome file from which the
                             alignments were generated, must be specified.
    --version                print version of align2hints.pl

Format:
  seqname <TAB> source <TAB> feature <TAB> start <TAB> end <TAB> score <TAB>
     strand <TAB> frame <TAB> src=source;grp=target_protein;pri=priority


DESCRIPTION

  Example:

    align2hints.pl [OPTIONS] --in=align.gff3 --out=hintsfile.gff --prg=gth


DESCRIPTION

braker.pl   Pipeline for predicting genes with GeneMark-EX and AUGUSTUS with
            RNA-Seq and/or proteins

SYNOPSIS

braker.pl [OPTIONS] --genome=genome.fa {--bam=rnaseq.bam | --prot_seq=prot.fa}

INPUT FILE OPTIONS

--genome=genome.fa                  fasta file with DNA sequences
--bam=rnaseq.bam                    bam file with spliced alignments from
                                    RNA-Seq
--prot_seq=prot.fa                  A protein sequence file in multi-fasta
                                    format used to generate protein hints.
                                    Unless otherwise specified, braker.pl will
                                    run in "EP mode" which uses ProtHint to
                                    generate protein hints and GeneMark-EP+ to
                                    train AUGUSTUS.
--hints=hints.gff                   Alternatively to calling braker.pl with a
                                    bam or protein fasta file, it is possible to
                                    call it with a .gff file that contains
                                    introns extracted from RNA-Seq and/or
                                    protein hints (most frequently coming
                                    from ProtHint). If you wish to use the
                                    ProtHint hints, use its
                                    "prothint_augustus.gff" output file.
                                    This flag also allows the usage of hints
                                    from additional extrinsic sources for gene
                                    prediction with AUGUSTUS. To consider such
                                    additional extrinsic information, you need
                                    to use the flag --extrinsicCfgFiles to
                                    specify parameters for all sources in the
                                    hints file (including the source "E" for
                                    intron hints from RNA-Seq)
--prot_aln=prot.aln                 Alignment file generated from aligning
                                    protein sequences against the genome with
                                    either Exonerate (--prg=exonerate), or
                                    Spaln (--prg=spaln), or GenomeThreader
                                    (--prg=gth). This option can be used as
                                    an alternative to --prot_seq file or protein
                                    hints in the --hints file.
                                    To prepare alignment file, run Spaln2 with
                                    the following command:
                                    spaln -O0 ... > spalnfile
                                    To prepare alignment file, run Exonerate
                                    with the following command:
                                    exonerate --model protein2genome \
                                        --showtargetgff T ... > exfile
                                    To prepare alignment file, run
                                    GenomeThreader with the following command:
                                    gth -genomic genome.fa  -protein \
                                        protein.fa -gff3out \
                                        -skipalignmentout ... -o gthfile
                                    A valid option prg=... must be specified
                                    in combination with --prot_aln. Generating
                                    tool will not be guessed.
                                    Currently, hints from protein alignment
                                    files are only used in the prediction step
                                    with AUGUSTUS.

FREQUENTLY USED OPTIONS

--species=sname                     Species name. Existing species will not be
                                    overwritten. Uses Sp_1 etc., if no species
                                    is assigned
--AUGUSTUS_ab_initio                output ab initio predictions by AUGUSTUS
                                    in addition to predictions with hints by
                                    AUGUSTUS
--softmasking                       Softmasking option for soft masked genome
                                    files. (Disabled by default.)
--esmode                            Run GeneMark-ES (genome sequence only) and 
                                    train AUGUSTUS on long genes predicted by 
                                    GeneMark-ES. Final predictions are ab initio
--epmode                            Run ProtHint to generate protein hints (if
                                    not already specified with --hints option)
                                    and use the hints in GeneMark-EP+ to create
                                    a training set for AUGUSTUS.
--etpmode                           Use RNA-Seq and protein hints in GeneMark-ETP+
                                    to create a training set for AUGUSTUS. The
                                    protein hints are generated by ProtHint (see
                                    --epmode).
--gff3                              Output in GFF3 format (default is gtf
                                    format)
--cores                             Specifies the maximum number of cores that
                                    can be used during computation. Be aware:
                                    optimize_augustus.pl will use max. 8
                                    cores; augustus will use max. nContigs in
                                    --genome=file cores.
--workingdir=/path/to/wd/           Set path to working directory. In the
                                    working directory results and temporary
                                    files are stored
--nice                              Execute all system calls within braker.pl
                                    and its submodules with bash "nice"
                                    (default nice value)

--alternatives-from-evidence=true   Output alternative transcripts based on
                                    explicit evidence from hints (default is
                                    true).
--fungus                            GeneMark-EX option: run algorithm with
                                    branch point model (most useful for fungal
                                    genomes)
--crf                               Execute CRF training for AUGUSTUS;
                                    resulting parameters are only kept for
                                    final predictions if they show higher
                                    accuracy than HMM parameters.
--keepCrf                           keep CRF parameters even if they are not
                                    better than HMM parameters
--UTR=on                            create UTR training examples from RNA-Seq
                                    coverage data; requires options
                                    --bam=rnaseq.bam and --softmasking.
                                    Alternatively, if UTR parameters already
                                    exist, training step will be skipped and
                                    those pre-existing parameters are used.
--addUTR=on                         Adds UTRs from RNA-Seq coverage data to 
                                    augustus.hints.gtf file. Does not perform
                                    training of AUGUSTUS or gene prediction with
                                    AUGUSTUS and UTR parameters.
--prg=gth|exonerate|spaln           Specify an alternative method for generating
                                    hints from similarity of protein sequence
                                    data to genome data (alternative to the
                                    default --epmode/--etpmode in which ProtHint
                                    is used to generate the protein hints).
                                    Available methods  are: gth (GenomeThreader),
                                    exonerate (Exonerate), or spaln (Spaln2).
                                    Note that this option is suitable only for
                                    proteins of closely related species (while
                                    the --epmode is generally applicable).
                                    This option is required in case --prot_aln
                                    option is used.
--gth2traingenes                    Generate training gene structures for
                                    AUGUSTUS from GenomeThreader alignments.
                                    (These genes can either be used for
                                    training AUGUSTUS alone with
                                    --trainFromGth; or in addition to
                                    GeneMark-ET training genes if also a
                                    bam-file is supplied.)
--trainFromGth                      No GeneMark-Training, train AUGUSTUS from
                                    GenomeThreader alignments
--makehub                           Create track data hub with make_hub.py 
                                    for visualizing BRAKER results with the
                                    UCSC GenomeBrowser
--email                             E-mail address for creating track data hub
--version                           Print version number of braker.pl
--help                              Print this help message

CONFIGURATION OPTIONS (TOOLS CALLED BY BRAKER)

--AUGUSTUS_CONFIG_PATH=/path/       Set path to config directory of AUGUSTUS
                                    (if not specified as environment
                                    variable). BRAKER1 will assume that the
                                    directories ../bin and ../scripts of
                                    AUGUSTUS are located relative to the
                                    AUGUSTUS_CONFIG_PATH. If this is not the
                                    case, please specify AUGUSTUS_BIN_PATH
                                    (and AUGUSTUS_SCRIPTS_PATH if required).
                                    The braker.pl commandline argument
                                    --AUGUSTUS_CONFIG_PATH has higher priority
                                    than the environment variable with the
                                    same name.
--AUGUSTUS_BIN_PATH=/path/          Set path to the AUGUSTUS directory that
                                    contains binaries, i.e. augustus and
                                    etraining. This variable must only be set
                                    if AUGUSTUS_CONFIG_PATH does not have
                                    ../bin and ../scripts of AUGUSTUS relative
                                     to its location i.e. for global AUGUSTUS
                                    installations. BRAKER1 will assume that
                                    the directory ../scripts of AUGUSTUS is
                                    located relative to the AUGUSTUS_BIN_PATH.
                                    If this is not the case, please specify
                                    --AUGUSTUS_SCRIPTS_PATH.
--AUGUSTUS_SCRIPTS_PATH=/path/      Set path to AUGUSTUS directory that
                                    contains scripts, i.e. splitMfasta.pl.
                                    This variable must only be set if
                                    AUGUSTUS_CONFIG_PATH or AUGUSTUS_BIN_PATH
                                    do not contains the ../scripts directory
                                    of AUGUSTUS relative to their location,
                                    i.e. for special cases of a global
                                    AUGUSTUS installation.
--BAMTOOLS_PATH=/path/to/           Set path to bamtools (if not specified as
                                    environment BAMTOOLS_PATH variable). Has
                                    higher priority than the environment
                                    variable.
--GENEMARK_PATH=/path/to/           Set path to GeneMark-ET (if not specified
                                    as environment GENEMARK_PATH variable).
                                    Has higher priority than environment
                                    variable.
--SAMTOOLS_PATH=/path/to/           Optionally set path to samtools (if not
                                    specified as environment SAMTOOLS_PATH
                                    variable) to fix BAM files automatically,
                                    if necessary. Has higher priority than
                                    environment variable.
--PROTHINT_PATH=/path/to/           Set path to the directory with prothint.py.
                                    (if not specified as PROTHINT_PATH
                                    environment variable). Has higher priority
                                    than environment variable.
--ALIGNMENT_TOOL_PATH=/path/to/tool Set path to alignment tool
                                    (GenomeThreader, Spaln, or Exonerate)
                                    if not specified as environment
                                    ALIGNMENT_TOOL_PATH variable. Has higher
                                    priority than environment variable.
--DIAMOND_PATH=/path/to/diamond     Set path to diamond, this is an alternative
                                    to NCIB blast; you only need to specify one 
                                    out of DIAMOND_PATH or BLAST_PATH, not both.
                                    DIAMOND is a lot faster that BLAST and yields 
                                    highly similar results for BRAKER.
--BLAST_PATH=/path/to/blastall      Set path to NCBI blastall and formatdb
                                    executables if not specified as
                                    environment variable. Has higher priority
                                    than environment variable.
--PYTHON3_PATH=/path/to             Set path to python3 executable (if not 
                                    specified as envirnonment variable and if
                                    executable is not in your $PATH).
--JAVA_PATH=/path/to                Set path to java executable (if not
                                    specified as environment variable and if 
                                    executable is not in your $PATH), only
                                    required with flags --UTR=on and --addUTR=on
--GUSHR_PATH=/path/to               Set path to gushr.py exectuable (if not 
                                    specified as an environment variable and if 
                                    executable is not in your $PATH), only required
                                    with the flags --UTR=on and --addUTR=on
--MAKEHUB_PATH=/path/to             Set path to make_hub.py (if option --makehub
                                    is used).
--CDBTOOLS_PATH=/path/to            cdbfasta/cdbyank are required for running
                                    fix_in_frame_stop_codon_genes.py. Usage of
                                    that script can be skipped with option 
                                    '--skip_fixing_broken_genes'.


EXPERT OPTIONS

--augustus_args="--some_arg=bla"    One or several command line arguments to
                                    be passed to AUGUSTUS, if several
                                    arguments are given, separate them by
                                    whitespace, i.e.
                                    "--first_arg=sth --second_arg=sth".
--skipGeneMark-ES                   Skip GeneMark-ES and use provided
                                    GeneMark-ES output (e.g. provided with 
                                    --geneMarkGtf=genemark.gtf)
--skipGeneMark-ET                   Skip GeneMark-ET and use provided
                                    GeneMark-ET output (e.g. provided with 
                                    --geneMarkGtf=genemark.gtf)
--skipGeneMark-EP                   Skip GeneMark-EP and use provided
                                    GeneMark-EP output (e.g. provided with
                                    --geneMarkGtf=genemark.gtf)
--skipGeneMark-ETP                  Skip GeneMark-ETP and use provided
                                    GeneMark-ETP output (e.g. provided with
                                    --geneMarkGtf=genemark.gtf)
--geneMarkGtf=file.gtf              If skipGeneMark-ET is used, braker will by
                                    default look in the working directory in
                                    folder GeneMarkET for an already existing
                                    gtf file. Instead, you may provide such a
                                    file from another location. If geneMarkGtf
                                    option is set, skipGeneMark-ES/ET/EP/ETP is
                                    automatically also set. Note that gene and
                                    transcript ids in the final output may not
                                    match the ids in the input genemark.gtf
                                    because BRAKER internally re-assigns these
                                    ids.
--rounds                            The number of optimization rounds used in
                                    optimize_augustus.pl (default 5)
--skipAllTraining                   Skip GeneMark-EX (training and
                                    prediction), skip AUGUSTUS training, only
                                    runs AUGUSTUS with pre-trained and already
                                    existing parameters (not recommended).
                                    Hints from input are still generated.
                                    This option automatically sets
                                    --useexisting to true.
--useexisting                       Use the present config and parameter files
                                    if they exist for 'species'; will overwrite
                                    original parameters if BRAKER performs
                                    an AUGUSTUS training.
--filterOutShort                    It may happen that a "good" training gene,
                                    i.e. one that has intron support from
                                    RNA-Seq in all introns predicted by
                                    GeneMark-EX, is in fact too short. This flag
                                    will discard such genes that have
                                    supported introns and a neighboring
                                    RNA-Seq supported intron upstream of the
                                    start codon within the range of the
                                    maximum CDS size of that gene and with a
                                    multiplicity that is at least as high as
                                    20% of the average intron multiplicity of
                                    that gene.
--skipOptimize                      Skip optimize parameter step (not
                                    recommended).
--skipIterativePrediction           Skip iterative prediction in --epmode (does 
                                    not affect other modes, saves a bit of runtime)
--skipGetAnnoFromFasta              Skip calling the python3 script
                                    getAnnoFastaFromJoingenes.py from the
                                    AUGUSTUS tool suite. This script requires
                                    python3, biopython and re (regular 
                                    expressions) to be installed. It produces
                                    coding sequence and protein FASTA files 
                                    from AUGUSTUS gene predictions and provides
                                    information about genes with in-frame stop 
                                    codons. If you enable this flag, these files 
                                    will not be produced and python3 and 
                                    the required modules will not be necessary
                                    for running braker.pl.
--skip_fixing_broken_genes          If you do not have python3, you can choose
                                    to skip the fixing of stop codon including
                                    genes (not recommended).
--eval=reference.gtf                Reference set to evaluate predictions
                                    against (using evaluation scripts from GaTech)
--eval_pseudo=pseudo.gff3           File with pseudogenes that will be excluded 
                                    from accuracy evaluation (may be empty file)
--AUGUSTUS_hints_preds=s            File with AUGUSTUS hints predictions; will
                                    use this file as basis for UTR training;
                                    only UTR training and prediction is
                                    performed if this option is given.
--flanking_DNA=n                    Size of flanking region, must only be
                                    specified if --AUGUSTUS_hints_preds is given
                                    (for UTR training in a separate braker.pl 
                                    run that builds on top of an existing run)
--verbosity=n                       0 -> run braker.pl quiet (no log)
                                    1 -> only log warnings
                                    2 -> also log configuration
                                    3 -> log all major steps
                                    4 -> very verbose, log also small steps
--downsampling_lambda=d             The distribution of introns in training
                                    gene structures generated by GeneMark-EX
                                    has a huge weight on single-exon and
                                    few-exon genes. Specifying the lambda
                                    parameter of a poisson distribution will
                                    make braker call a script for downsampling
                                    of training gene structures according to
                                    their number of introns distribution, i.e.
                                    genes with none or few exons will be
                                    downsampled, genes with many exons will be
                                    kept. Default value is 2. 
                                    If you want to avoid downsampling, you have 
                                    to specify 0. 
--checkSoftware                     Only check whether all required software
                                    is installed, no execution of BRAKER
--nocleanup                         Skip deletion of all files that are typically not 
                                    used in an annotation project after 
                                    running braker.pl. (For tracking any 
                                    problems with a braker.pl run, you 
                                    might want to keep these files, therefore
                                    nocleanup can be activated.)


DEVELOPMENT OPTIONS (PROBABLY STILL DYSFUNCTIONAL)

--splice_sites=patterns             list of splice site patterns for UTR
                                    prediction; default: GTAG, extend like this:
                                    --splice_sites=GTAG,ATAC,...
                                    this option only affects UTR training
                                    example generation, not gene prediction
                                    by AUGUSTUS
--overwrite                         Overwrite existing files (except for
                                    species parameter files) Beware, currently
                                    not implemented properly!
-- CfgFiles=file1,file2,... Depending on the mode in which braker.pl
                                    is executed, it may require one ore several
                                    extrinsicCfgFiles. Don't use this option
                                    unless you know what you are doing!
--stranded=+,-,+,-,...              If UTRs are trained, i.e.~strand-specific
                                    bam-files are supplied and coverage 
                                    information is extracted for gene prediction, 
                                    create stranded ep hints. The order of 
                                    strand specifications must correspond to the
                                    order of bam files. Possible values are
                                    +, -, .
                                    If stranded data is provided, ONLY coverage
                                    data from the stranded data is used to 
                                    generate UTR examples! Coverage data from 
                                    unstranded data is used in the prediction
                                    step, only.
                                    The stranded label is applied to coverage
                                    data, only. Intron hints are generated
                                    from all libraries treated as "unstranded"
                                    (because splice site filtering eliminates
                                    intron hints from the wrong strand, anyway).
--optCfgFile=ppx.cfg                Optional custom config file for AUGUSTUS
                                    for running PPX (currently not
                                    implemented)
--grass                             Switch this flag on if you are using braker.pl 
                                    for predicting genes in grasses with 
                                    GeneMark-EX. The flag will enable
                                    GeneMark-EX to handle GC-heterogenicity
                                    within genes more properly.
                                    NOTHING IMPLEMENTED FOR GRASS YET!
--transmasked_fasta=file.fa         Transmasked genome FASTA file for GeneMark-EX
                                    (to be used instead of the regular genome
                                    FASTA file).  
--min_contig=INT                    Minimal contig length for GeneMark-EX, could
                                    for example be set to 10000 if transmasked_fasta
                                    option is used because transmasking might
                                    introduce many very short contigs.
--translation_table=INT             Change translation table from non-standard
                                    to something else. 
                                    DOES NOT WORK YET BECAUSE BRAKER DOESNT
                                    SWITCH TRANSLATION TABLE FOR GENEMARK-EX, YET!
--gc_probability=DECIMAL            Probablity for donor splice site pattern GC 
                                    for gene prediction with GeneMark-EX,
                                    default value is 0.001
--gm_max_intergenic=INT             Adjust maximum allowed size of intergenic
                                    regions in GeneMark-EX. If not used, the value
                                    is automatically determined by GeneMark-EX.


EXAMPLE

To run with RNA-Seq

braker.pl [OPTIONS] --genome=genome.fa --species=speciesname \
    --bam=accepted_hits.bam
braker.pl [OPTIONS] --genome=genome.fa --species=speciesname \
    --hints=rnaseq.gff

To run with protein sequences

braker.pl [OPTIONS] --genome=genome.fa --species=speciesname \
    --prot_seq=proteins.fa
braker.pl [OPTIONS] --genome=genome.fa --species=speciesname \
    --hints=prothint_augustus.gff



filterGenemark.pl     filter GeneMark-EX files and search for "good" genes

SYNOPSIS

filterGenemark.pl [OPTIONS] genemark.gtf hints.gff

genemark.gtf         file in gtf format
hints.gff            corresponding introns file in gff format



OPTIONS

--help                          Print this help message
--hints=hints.gff               Corresponding hints file in gff format;
                                it is vital that this file contains intron
                                hints; start/stop hints are optional;
                                do not mix start/stop hints with --singleCDSfile
                                (this might double the number of evidence supported
                                single exon genes)
--genemark=genemark.gtf         File in gtf format
--output=newfile.gtf            Specifies output file name. Default are
                                'genemark-input_file_name.c.gtf'
                                and 'genemark-input_file_name.f.good.gtf'
                                and 'genemark-input_file_name.f.bad.gtf' for
                                evidence anchored genes and genes not anchored by
                                evidence (but included in the output file), respectively
--suppress                      Suppress file output
--filterOutShort                Filters intron containing genes as "bad" that
                                have an RNA-Seq supported intron
                                within 2*maximal CDS length of the gene with at
                                least 20% of average intron
                                multiplicity for that gene (screens also
                                downstream of stop, which either indicates
                                wrong reading frame, or a downstream UTR)
--singleCDSfile=cds.gtf         file with single exon genes CDSpart hints, they
                                are used to filter single exon training genes as
                                "good". If number is not sufficient, unsupported
                                genes are still added to "good genes" in order
                                to generate a good training gene set for
                                AUGUSTUS
--cdspart_cutoff=n              CDSpart cutoff that was used for generating hints
                                default 15
--randomSeed=n                  Use this random seed for adding random single-exon
                                genes.

Format:
seqname <TAB> source <TAB> feature <TAB> start <TAB> end <TAB> score <TAB> strand <TAB> frame <TAB> gene_id value <TAB> transcript_id value


DESCRIPTION

Example:

filterGenemark.pl [OPTIONS] --genemark=genemark.gtf --introns=introns.gff



filterIntronsFindStrand.pl     find corresponding strand for introns from two input files genome.fa and introns.gff

SYNOPSIS

filterIntronsFindStrand.pl genome.fa introns.gff [OPTIONS] > introns.s.f.gff

  genome.fa           DNA file in fasta format
  introns.gff         corresponding introns file in gff format


OPTIONS

    --help                          Print this help message
    --allowed=gtag,gcag,atac        Allowed acceptor and donor splice site types
    --score                         Set score to 'mult' entry or '1', if the last column does not contain a 'mult' entry
    --genome=genome.fa              see above
    --introns=introns.gff           see above




DESCRIPTION

  Example:

    filterIntronsFindStrand.pl genome.fa introns.gff [OPTIONS] > introns.s.f.gff



startAlign.pl split genome file in single sequences or sequence parts and protein file according
to contigIDs then run alignment program exonerate, spaln or genomeThreader (gth)
for each contigID or each sequence. When no list and/or pos file(s) are/is assigned
the program will use the whole protein file.

SYNOPSIS

startAlign.pl [OPTIONS] --genome=genome.fa --prot=db.fa  --prg=gth|exonerate|spaln

--genome=genome.fa          fasta file with DNA sequences
--prot=db.fa                fasta file with protein sequences


OPTIONS

--help                       Print this help message
--CPU=n                      Specifies the maximum number of CPUs that can be used during
WARNING: using more than one CPU will produce harddrive read/write
processes that may be speed limiting in case of GenomeThreader
--dir=path/to/dir            Set path to working directory. In the working directory results
and temporary files are stored.
--list=BLAST.hit.list        Contains contig and protein ID. Format: contigID proteinID
--log=startAlign.log         Log file
--maxintronlen=n             Exonerate option: Alignments with longer gaps are discarded (default 30000).
--reg                        Use region parts and not whole sequences.
--offset=n                   This many bp are added before and after cutout coordinates.
--prg=s                      Alignment program to call. Valid options are 'gth', 'spaln' or 'exonerate'.
--pos=dna.pos                Contains information on contigs and genome sequence. Format
contigID nr_of_prots_mapped start end strand chrID
--ALIGNMENT_TOOL_PATH=/path/to/binary
Path to alignment tool binary, either exonerate or Splan or Genome Threader.
By default, if no path is given, script assumes they are in the current
$PATH bash variable.
--args=s                     additional command line parameters for alignment tool to be executed,
                             example: --args="-prinmatchlen 24 -prseedlength 10 -prhdist 4"
--nice                       Execute all system calls within braker.pl and its submodules with bash "nice"
(default nice value)



DESCRIPTION

Example:

startAlign.pl [OPTIONS] --genome=genome.fa --prot=db.fa --list=BLAST.hit.list --pos=dna.pos --prg=gth



Leaving build/test directories:
  Work:
 /home/vsts/conda/conda-bld/work 
  Test:
 /home/vsts/conda/conda-bld/test_tmp 
Leaving build/test environments:
  Test:
source activate  /home/vsts/conda/conda-bld/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh 
  Build:
source activate  /home/vsts/conda/conda-bld/_build_env 


