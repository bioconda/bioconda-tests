  Package                                  Version  Build                  Channel                                    Size
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  Install:
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

  + appnope                                  0.1.0  py27h8c360ce_1001      conda-forge/osx-64                         9 KB
  + backports                                  1.0  py27_1                 conda-forge/osx-64                         4 KB
  + backports.functools_lru_cache            1.6.1  py_0                   conda-forge/noarch                         8 KB
  + backports.shutil_get_terminal_size       1.0.0  py27_1                 conda-forge/osx-64                         7 KB
  + ca-certificates                      2021.5.30  h033912b_0             conda-forge/osx-64                       Cached
  + certifi                             2019.11.28  py27h8c360ce_1         conda-forge/osx-64                       149 KB
  + decorator                                4.4.2  py_0                   conda-forge/noarch                        11 KB
  + enum34                                  1.1.10  py27h8c360ce_1         conda-forge/osx-64                        49 KB
  + ipython                                  5.8.0  py27_1                 conda-forge/osx-64                         1 MB
  + ipython_genutils                         0.2.0  py27_0                 conda-forge/osx-64                        36 KB
  + libcxx                                  12.0.1  habf9029_0             conda-forge/osx-64                       Cached
  + libffi                                   3.2.1  hb1e8313_1007          conda-forge/osx-64                        42 KB
  + libxcb                                    1.13  h35c211d_1003          conda-forge/osx-64                       306 KB
  + ncurses                                    6.2  h2e338ed_4             conda-forge/osx-64                       Cached
  + obitools                                1.2.13  py27hf9ca5db_3         /Users/runner/conda/conda-bld/osx-64     941 KB
  + openssl                                 1.1.1k  h0d85af4_1             conda-forge/osx-64                       Cached
  + pathlib2                                 2.3.5  py27h8c360ce_1         conda-forge/osx-64                        33 KB
  + pexpect                                  4.8.0  py27h8c360ce_1         conda-forge/osx-64                        76 KB
  + pickleshare                              0.7.5  py27h8c360ce_1001      conda-forge/osx-64                        12 KB
  + pip                                     20.1.1  pyh9f0ad1d_0           conda-forge/noarch                         1 MB
  + prompt_toolkit                          1.0.15  py27_0                 conda-forge/osx-64                       332 KB
  + pthread-stubs                              0.4  hc929b4f_1001          conda-forge/osx-64                         6 KB
  + ptyprocess                               0.7.0  pyhd3deb0d_0           conda-forge/noarch                        16 KB
  + pygments                                 2.5.2  py_0                   conda-forge/noarch                       669 KB
  + python                                  2.7.15  h8e446fc_1011_cpython  conda-forge/osx-64                        12 MB
  + python_abi                                 2.7  1_cp27m                conda-forge/osx-64                         4 KB
  + readline                                   8.1  h05e3726_0             conda-forge/osx-64                       Cached
  + scandir                                 1.10.0  py27h89ed719_1         conda-forge/osx-64                        26 KB
  + setuptools                              44.0.0  py27_0                 conda-forge/osx-64                       649 KB
  + simplegeneric                            0.8.1  py27_0                 conda-forge/osx-64                         6 KB
  + six                                     1.16.0  pyh6c4a22f_0           conda-forge/noarch                       Cached
  + sqlite                                  3.36.0  h23a322b_0             conda-forge/osx-64                       Cached
  + tk                                      8.6.11  h5dbffcc_1             conda-forge/osx-64                       Cached
  + traitlets                                4.3.3  py27h8c360ce_1         conda-forge/osx-64                       128 KB
  + wcwidth                                  0.2.5  pyh9f0ad1d_2           conda-forge/noarch                       Cached
  + wheel                                   0.37.0  pyhd8ed1ab_1           conda-forge/noarch                       Cached
  + xorg-kbproto                             1.0.7  h35c211d_1002          conda-forge/osx-64                        27 KB
  + xorg-libx11                              1.7.2  h0d85af4_0             conda-forge/osx-64                       886 KB
  + xorg-libxau                              1.0.9  h35c211d_0             conda-forge/osx-64                        11 KB
  + xorg-libxdmcp                            1.1.3  h35c211d_0             conda-forge/osx-64                        17 KB
  + xorg-xproto                             7.0.31  h35c211d_1007          conda-forge/osx-64                        73 KB
  + zlib                                    1.2.11  h7795811_1010          conda-forge/osx-64                       Cached

  Summary:

  Install: 42 packages

  Total download: 19 MB

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Updating build index: /Users/runner/conda/conda-bld

TEST START: obitools-1.2.13-py27hf9ca5db_3.tar.bz2

## Package Plan ##

  environment location: /Users/runner/conda/conda-bld/obitools_1630575323215/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_


The following NEW packages will be INSTALLED:

    appnope:                            0.1.0-py27h8c360ce_1001      conda-forge
    backports:                          1.0-py27_1                   conda-forge
    backports.functools_lru_cache:      1.6.1-py_0                   conda-forge
    backports.shutil_get_terminal_size: 1.0.0-py27_1                 conda-forge
    ca-certificates:                    2021.5.30-h033912b_0         conda-forge
    certifi:                            2019.11.28-py27h8c360ce_1    conda-forge
    decorator:                          4.4.2-py_0                   conda-forge
    enum34:                             1.1.10-py27h8c360ce_1        conda-forge
    ipython:                            5.8.0-py27_1                 conda-forge
    ipython_genutils:                   0.2.0-py27_0                 conda-forge
    libcxx:                             12.0.1-habf9029_0            conda-forge
    libffi:                             3.2.1-hb1e8313_1007          conda-forge
    libxcb:                             1.13-h35c211d_1003           conda-forge
    ncurses:                            6.2-h2e338ed_4               conda-forge
    obitools:                           1.2.13-py27hf9ca5db_3        local      
    openssl:                            1.1.1k-h0d85af4_1            conda-forge
    pathlib2:                           2.3.5-py27h8c360ce_1         conda-forge
    pexpect:                            4.8.0-py27h8c360ce_1         conda-forge
    pickleshare:                        0.7.5-py27h8c360ce_1001      conda-forge
    pip:                                20.1.1-pyh9f0ad1d_0          conda-forge
    prompt_toolkit:                     1.0.15-py27_0                conda-forge
    pthread-stubs:                      0.4-hc929b4f_1001            conda-forge
    ptyprocess:                         0.7.0-pyhd3deb0d_0           conda-forge
    pygments:                           2.5.2-py_0                   conda-forge
    python:                             2.7.15-h8e446fc_1011_cpython conda-forge
    python_abi:                         2.7-1_cp27m                  conda-forge
    readline:                           8.1-h05e3726_0               conda-forge
    scandir:                            1.10.0-py27h89ed719_1        conda-forge
    setuptools:                         44.0.0-py27_0                conda-forge
    simplegeneric:                      0.8.1-py27_0                 conda-forge
    six:                                1.16.0-pyh6c4a22f_0          conda-forge
    sqlite:                             3.36.0-h23a322b_0            conda-forge
    tk:                                 8.6.11-h5dbffcc_1            conda-forge
    traitlets:                          4.3.3-py27h8c360ce_1         conda-forge
    wcwidth:                            0.2.5-pyh9f0ad1d_2           conda-forge
    wheel:                              0.37.0-pyhd8ed1ab_1          conda-forge
    xorg-kbproto:                       1.0.7-h35c211d_1002          conda-forge
    xorg-libx11:                        1.7.2-h0d85af4_0             conda-forge
    xorg-libxau:                        1.0.9-h35c211d_0             conda-forge
    xorg-libxdmcp:                      1.1.3-h35c211d_0             conda-forge
    xorg-xproto:                        7.0.31-h35c211d_1007         conda-forge
    zlib:                               1.2.11-h7795811_1010         conda-forge

Preparing transaction: ...working... done
Verifying transaction: ...working... done
Executing transaction: ...working... done
export PREFIX=/Users/runner/conda/conda-bld/obitools_1630575323215/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_
export SRC_DIR=/Users/runner/conda/conda-bld/obitools_1630575323215/test_tmp
Usage: ali2consensus [options]

***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar
  -t THRESHOLD, --threshold=THRESHOLD
                        Threshold parameter for consensus building

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)
Usage: 
:py:mod:`ecodbtaxstat`: gives taxonomic rank frequency of a given ``ecopcr`` database   
=====================================================================================

.. codeauthor:: Eric Coissac <eric.coissac@metabarcoding.org>

The :py:mod:`ecodbtaxstat` command requires an ``ecopcr`` database and a taxonomic rank 
(specified by the ``--rank`` option, default *species*). The command outputs first 
the total number of sequence records in the database having taxonomic information at this rank, 
and then the number of sequence records for each value of this rank.



***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar

  ********************************
  * ecodbtaxstat specific option *
  ********************************
    --rank=<taxonomic rank>
                        The taxonomic rank at which frequencies have to be
                        computed. Possible values are: class, family, forma,
                        genus, infraclass, infraorder, kingdom, order,
                        parvorder, phylum, species, species group, species
                        subgroup, subclass, subfamily, subgenus, subkingdom,
                        suborder, subphylum, subspecies, subtribe, superclass,
                        superfamily, superkingdom, superorder, superphylum,
                        tribe or varietas. (Default: species)

  ****************************
  * Taxonomy loading options *
  ****************************
    -d <FILENAME>, --database=<FILENAME>
                        ecoPCR taxonomy Database name
    -t <FILENAME>, --taxonomy-dump=<FILENAME>
                        NCBI Taxonomy dump repository name

  **************************************
  * Taxonomy-related filtering options *
  **************************************
    --require-rank=<RANK_NAME>
                        select sequence with taxid tag containing a parent of
                        rank <RANK_NAME>
    -r <TAXID>, --required=<TAXID>
                        Select the sequences having the ancestor of taxid
                        <TAXID>. If several ancestors are specified (with  '-r
                        taxid1 -r taxid2'), the sequences having at least one
                        of them are selected
    -i <TAXID>, --ignore=<TAXID>
                        ignored taxid
Usage: 
:py:mod:`ecotag`: assigns sequences to taxa
===========================================

.. codeauthor:: Eric Coissac <eric.coissac@metabarcoding.org>

:py:mod:`ecotag` is the tool that assigns sequences to a taxon based on 
sequence similarity. The program first searches the reference database for the 
reference sequence(s) (hereafter referred to as 'primary reference sequence(s)') showing the 
highest similarity with the query sequence. Then it looks for all other reference 
sequences (hereafter referred to as 'secondary reference sequences') whose 
similarity with the primary reference sequence(s) is equal or higher than the 
similarity between the primary reference and the query sequences. Finally, it 
assigns the query sequence to the most recent common ancestor of the primary and 
secondary reference sequences. 

As input, `ecotag` requires the sequences to be assigned, a reference database 
in :doc:`fasta <../fasta>` format, where each sequence is associated with a taxon identified 
by a unique *taxid*, and a taxonomy database where taxonomic information is stored 
for each *taxid*.

  *Example:*
    
    .. code-block:: bash
        
          > ecotag -d embl_r113  -R ReferenceDB.fasta \
            --sort=count -m 0.95 -r seq.fasta > seq_tag.fasta
    
    The above command specifies that each sequence stored in ``seq.fasta`` 
    is compared to those in the reference database called ``ReferenceDB.fasta`` 
    for taxonomic assignment. In the output file ``seq_tag.fasta``, the sequences 
    are sorted from highest to lowest counts. When there is no reference sequence 
    with a similarity equal or higher than 0.95 for a given sequence, no taxonomic 
    information is provided for this sequence in ``seq_tag.fasta``.



***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar
  -R <FILENAME>, --ref-database=<FILENAME>
                        fasta file containing reference sequences
  -m identity, --minimum-identity=identity
                        minimum identity to consider.
  --minimum-circle=identity
                        minimum identity considered for the assignment circle.
  -x EXPLAIN, --explain=EXPLAIN
                        Add in the output CD (complementary data) record to
                        explain identification decision
  -u, --uniq            Apply a uniq filter on query sequences before
                        identification
  --sort=SORT           Sort output on input sequence tag
  -r, --reverse         Sort in reverse order (should be used with -S)
  -E ERROR, --errors=ERROR
                        Tolerated rate of wrong assignation
  -M MINMATCHES, --min-matches=MINMATCHES
                        Minimum congruent assignation
  --cache-size=<SIZE>   Cache size for the aligment score

  ****************************
  * Taxonomy loading options *
  ****************************
    -d <FILENAME>, --database=<FILENAME>
                        ecoPCR taxonomy Database name
    -t <FILENAME>, --taxonomy-dump=<FILENAME>
                        NCBI Taxonomy dump repository name

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)
Usage: ecotaxspecificity [options]

***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  ****************************
  * Taxonomy loading options *
  ****************************
    -d <FILENAME>, --database=<FILENAME>
                        ecoPCR taxonomy Database name
    -t <FILENAME>, --taxonomy-dump=<FILENAME>
                        NCBI Taxonomy dump repository name

  **************************************
  * ecotaxspecificity specific options *
  **************************************
    -e ###, --errors=###
                        Maximum errors between two sequences
    -q QUORUM, --quorum=QUORUM
                        Quorum
Usage: ecotaxstat [options]

***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar
  -d <FILENAME>, --ecopcrdb=<FILENAME>
                        ecoPCR Database name
  -r <TAXID>, --required=<TAXID>
                        required taxid
Usage: illuminapairedend [options]

***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar
  -r <FILENAME>, --reverse-reads=<FILENAME>
                        Filename containing reverse solexa reads
  --index-file=<FILENAME>
                        Filename containing illumina index reads
  --sanger              input file is in sanger fastq nucleic format (standard
                        fastq)
  --solexa              input file is in fastq nucleic format produced by
                        solexa sequencer
  --illumina            input file is in fastq nucleic format produced by old
                        solexa sequencer
  --score-min=#.###     minimum score for keeping aligment

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)
Usage: 
:py:mod:`ngsfilter` : Assigns sequence records to the corresponding experiment/sample based on DNA tags and primers
===================================================================================================================

.. codeauthor:: Eric Coissac <eric.coissac@metabarcoding.org>

To distinguish between sequences from different PCR products pooled in the same sequencing library, pairs of small DNA 
sequences (call tags, see the :py:mod:`oligoTag` command and its associated paper for more informations on the design 
of such tags) can be concatenated to the PCR primers. 

:py:mod:`ngsfilter` takes as input sequence record files and a file describing the DNA tags and primers sequences used 
for each PCR sample. :py:mod:`ngsfilter` allows to demultiplex sequence records file by identifying these DNA tags and 
the primers.

:py:mod:`ngsfilter` requires a sample description file containing the description of the primers and tags associated 
to each sample (specified by option ``-t``). The sample description file is a text file where each line describes one 
sample. Columns are separated by space or tab characters. Lines beginning with the '#' character will be considered 
as commentary lines and will simply be ignored by :py:mod:`ngsfilter`. 

Here is an example of a sample description file::
    
    #exp   sample     tags                   forward_primer       reverse_primer              extra_information
    gh     01_11a     cacgcagtc:cacgcatcg    GGGCAATCCTGAGCCAA    CCATTGAGTCTCTGCACCTATC    F @ community=Festuca; bucket=1; extraction=1;
    gh     01_12a     cacgcatcg:cacgcagtc    GGGCAATCCTGAGCCAA    CCATTGAGTCTCTGCACCTATC    F @ community=Festuca; bucket=1; extraction=2;
    gh     01_21a     cacgcgcat:cacgctact    GGGCAATCCTGAGCCAA    CCATTGAGTCTCTGCACCTATC    F @ community=Festuca; bucket=2; extraction=1;
    gh     01_22a     cacgctact:cacgcgcat    GGGCAATCCTGAGCCAA    CCATTGAGTCTCTGCACCTATC    F @ community=Festuca; bucket=2; extraction=2;
    gh     02_11a     cacgctgag:cacgtacga    GGGCAATCCTGAGCCAA    CCATTGAGTCTCTGCACCTATC    F @ community=Festuca; bucket=1; extraction=1;
    gh     02_12a     cacgtacga:cacgctgag    GGGCAATCCTGAGCCAA    CCATTGAGTCTCTGCACCTATC    F @ community=Festuca; bucket=1; extraction=2;


The results consist of sequence records, printed on the standard output, with their sequence trimmed of the primers and 
tags and annotated with the corresponding experiment and sample (and possibly some extra informations). Sequences for 
which the tags and primers have not been well identified, and which are thus unassigned to any sample, are stored in a 
file if option ``-u`` is specified and tagged as erroneous sequences (``error`` attribute) by :py:mod:`ngsfilter`. 


***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar

  ******************************
  * ngsfilter specific options *
  ******************************
    -t <FILENAME>, --tag-list=<FILENAME>
                        File containing the samples definition (with tags,
                        primers, sample names,...)
    -u <FILENAME>, --unidentified=<FILENAME>
                        Filename used to store the sequences unassigned to any
                        sample
    -e ###, --error=###
                        Number of errors allowed for matching primers [default
                        = 2]

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)
Usage: 
:py:mod:`obiaddtaxids`: adds *taxids* to sequence records using an ecopcr database
==================================================================================

.. codeauthor:: Celine Mercier <celine.mercier@metabarcoding.org>

The :py:mod:`obiaddtaxids` command annotates sequence records with a *taxid* based on 
a taxon scientific name stored in the sequence record header.

Taxonomic information linking a *taxid* to a taxon scientific name is stored in a 
database formatted as an ecoPCR database (see :doc:`obitaxonomy <obitaxonomy>`) or 
a NCBI taxdump (see NCBI ftp site).

The way to extract the taxon scientific name from the sequence record header can be
specified by two options:

    - By default, the sequence identifier is used. Underscore characters (``_``) are substituted
      by spaces before looking for the taxon scientific name into the taxonomic
      database.

    - If the input file is an ``OBITools`` extended :doc:`fasta <../fasta>` format, the ``-k`` option
      specifies the attribute containing the taxon scientific name.

    - If the input file is a :doc:`fasta <../fasta>` file imported from the UNITE or from the SILVA web sites,
      the ``-f`` option allows specifying this source and parsing correctly the associated 
      taxonomic information.
      
  
For each sequence record, :py:mod:`obiaddtaxids` tries to match the extracted taxon scientific name 
with those stored in the taxonomic database.

    - If a match is found, the sequence record is annotated with the corresponding *taxid*.

Otherwise,
    
    - If the ``-g`` option is set and the taxon name is composed of two words and only the 
      first one is found in the taxonomic database at the 'genus' rank, :py:mod:`obiaddtaxids` 
      considers that it found the genus associated with this sequence record and it stores this 
      sequence record in the file specified by the ``-g`` option.
    
    - If the ``-u`` option is set and no taxonomic information is retrieved from the 
      scientific taxon name, the sequence record is stored in the file specified by the 
      ``-u`` option.

    *Example*
    
    
    .. code-block:: bash
    
       > obiaddtaxids -k species_name -g genus_identified.fasta \
                      -u unidentified.fasta -d my_ecopcr_database \
                      my_sequences.fasta > identified.fasta

    Tries to match the value associated with the ``species_name`` key of each sequence record 
    from the ``my_sequences.fasta`` file with a taxon name from the ecoPCR database ``my_ecopcr_database``. 
        
            - If there is an exact match, the sequence record is stored in the ``identified.fasta`` file. 
        
            - If not and the ``species_name`` value is composed of two words, :py:mod:`obiaddtaxids` 
              considers the first word as a genus name and tries to find it into the taxonomic database. 
        
                - If a genus is found, the sequence record is stored in the ``genus_identified.fasta``
                  file. 
                  
                - Otherwise the sequence record is stored in the ``unidentified.fasta`` file.



***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar
  -g <FILENAME>, --genus_found=<FILENAME>
                        (not with UNITE databases) file used to store
                        sequences with the genus found.
  -u <FILENAME>, --unidentified=<FILENAME>
                        file used to store completely unidentified sequences.
  -s <FILENAME>, --dirty=<FILENAME>
                        (not with UNITE databases) if chosen, ALL the words in
                        the name used to identify the sequences will be
                        searched when neither the exact name nor the genus
                        have been found. Only use if the sequences in your
                        database are badly named with useless words or numbers
                        in the name etc. The sequences identified this way
                        will be written in <FILENAME>.
  -f <FORMAT>, --format=<FORMAT>
                        type of the database with the taxa to be added.
                        Possibilities : 'raw', 'UNITE_FULL', 'UNITE_GENERAL'
                        or 'SILVA'.The UNITE_FULL format is the one used for
                        the 'Full UNITE+INSD dataset', and the UNITE_GENERAL
                        format is the one used for the 'General FASTA
                        release'. Default : raw.
  -k <KEYNAME>, --key-name=<KEYNAME>
                        name of the key attribute containing the taxon name in
                        databases of 'raw' type. Default : the taxon name is
                        the id of the sequence. The taxon name MUST have '_'
                        between the words of the name when it's the id, and
                        CAN be of this form when it's in a field.
  -a <ANCESTOR>, --restricting_ancestor=<ANCESTOR>
                        can be a word or a taxid (number). Enables to restrict
                        the search of taxids under a specified ancestor. If
                        it's a word, it's the field containing the ancestor's
                        taxid in each sequence's header (can be different for
                        each sequence). If it's a number, it's the taxid of
                        the ancestor (in which case it's the same for all the
                        sequences)

  ****************************
  * Taxonomy loading options *
  ****************************
    -d <FILENAME>, --database=<FILENAME>
                        ecoPCR taxonomy Database name
    -t <FILENAME>, --taxonomy-dump=<FILENAME>
                        NCBI Taxonomy dump repository name
Usage: 
:py:mod:`obiannotate`: adds/edits sequence record annotations
=============================================================

.. codeauthor:: Eric Coissac <eric.coissac@metabarcoding.org>

:py:mod:`obiannotate` is the command that allows adding/modifying/removing 
annotation attributes attached to sequence records.

Once such attributes are added, they can be used by the other OBITools commands for 
filtering purposes or for statistics computing.

*Example 1:*

    .. code-block:: bash
        
        > obiannotate -S short:'len(sequence)<100' seq1.fasta > seq2.fasta

    The above command adds an attribute named *short* which has a boolean value indicating whether the sequence length is less than 100bp.

*Example 2:*

    .. code-block:: bash
        
        > obiannotate --seq-rank seq1.fasta | \
          obiannotate -C --set-identifier '"'FungA'_%05d" % seq_rank' \
          > seq2.fasta

    The above command adds a new attribute whose value is the sequence record 
    entry number in the file. Then it clears all the sequence record attributes 
    and sets the identifier to a string beginning with *FungA_* followed by a 
    suffix with 5 digits containing the sequence entry number.

*Example 3:*

    .. code-block:: bash
        
        > obiannotate -d my_ecopcr_database \
          --with-taxon-at-rank=genus seq1.fasta > seq2.fasta

    The above command adds taxonomic information at the *genus* rank to the 
    sequence records. 

*Example 4:*

    .. code-block:: bash
        
        > obiannotate -S 'new_seq:str(sequence).replace("a","t")' \
          seq1.fasta | obiannotate --set-sequence new_seq > seq2.fasta

    The overall aim of the above command is to edit the *sequence* object itself, 
    by replacing all nucleotides *a* by nucleotides *t*. First, a new attribute 
    named *new_seq* is created, which contains the modified sequence, and then 
    the former sequence is replaced by the modified one.
    


***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar

  *********************
  * Filtering options *
  *********************
    -s <REGULAR_PATTERN>, --sequence=<REGULAR_PATTERN>
                        regular expression pattern used to select the
                        sequence. The pattern is case insensitive
    -D <REGULAR_PATTERN>, --definition=<REGULAR_PATTERN>
                        regular expression pattern matched against the
                        definition of the sequence. The pattern is case
                        sensitive
    -I <REGULAR_PATTERN>, --identifier=<REGULAR_PATTERN>
                        regular expression pattern matched against the
                        identifier of the sequence. The pattern is case
                        sensitive
    --id-list=<FILENAME>
                        file containing identifiers of sequences to select
    -a <ATTRIBUTE_NAME>:<REGULAR_PATTERN>, --attribute=<ATTRIBUTE_NAME>:<REGULAR_PATTERN>
                        regular expression pattern matched against the
                        attributes of the sequence. the value of this atribute
                        is of the form : attribute_name:regular_pattern. The
                        pattern is case sensitive.Several -a option can be
                        used on the same commande line.
    -A <ATTRIBUTE_NAME>, --has-attribute=<ATTRIBUTE_NAME>
                        select sequence with attribute <ATTRIBUTE_NAME>
                        defined
    -p <PYTHON_EXPRESSION>, --predicat=<PYTHON_EXPRESSION>
                        python boolean expression to be evaluated in the
                        sequence context. The attribute name can be used in
                        the expression as variable name .An extra variable
                        named 'sequence' refersto the sequence object itself.
                        Several -p option can be used on the same commande
                        line.
    -L <##>, --lmax=<##>
                        keep sequences shorter than lmax
    -l <##>, --lmin=<##>
                        keep sequences longer than lmin
    -v, --inverse-match
                        revert the sequence selection [default : False]

  ****************************
  * Taxonomy loading options *
  ****************************
    -d <FILENAME>, --database=<FILENAME>
                        ecoPCR taxonomy Database name
    -t <FILENAME>, --taxonomy-dump=<FILENAME>
                        NCBI Taxonomy dump repository name

  **************************************
  * Taxonomy-related filtering options *
  **************************************
    --require-rank=<RANK_NAME>
                        select sequence with taxid tag containing a parent of
                        rank <RANK_NAME>
    -r <TAXID>, --required=<TAXID>
                        Select the sequences having the ancestor of taxid
                        <TAXID>. If several ancestors are specified (with  '-r
                        taxid1 -r taxid2'), the sequences having at least one
                        of them are selected
    -i <TAXID>, --ignore=<TAXID>
                        ignored taxid

  ********************************************
  * Sequences and attributes editing options *
  ********************************************
    --seq-rank          add a rank attribute to the sequence indicating the
                        sequence position in the input data
    -R <OLD_NAME:NEW_NAME>, --rename-tag=<OLD_NAME:NEW_NAME>
                        change tag name from OLD_NAME to NEW_NAME
    --delete-tag=<TAG_NAME>
                        delete tag TAG_NAME
    -S <TAG_NAME:PYTHON_EXPRESSION>, --set-tag=<TAG_NAME:PYTHON_EXPRESSION>
                        Add a new tag named TAG_NAME with a value computed
                        from PYTHON_EXPRESSION
    --tag-list=<FILENAME>
                        Indicate a file containing tag and values to modify on
                        specified sequences
    --set-identifier=<PYTHON_EXPRESSION>
                        Set sequence identifier with a value computed from
                        PYTHON_EXPRESSION
    --run=<PYTHON_EXPRESSION>
                        Run a python expression on each selected sequence
    --set-sequence=<PYTHON_EXPRESSION>
                        Change the sequence itself with a value computed from
                        PYTHON_EXPRESSION
    -T <PYTHON_EXPRESSION>, --set-definition=<PYTHON_EXPRESSION>
                        Set sequence definition with a value computed from
                        PYTHON_EXPRESSION
    -O, --only-valid-python
                        only valid python expressions are allowed
    -C, --clear         clear all tags associated to the sequences
    -k KEEP, --keep=KEEP
                        only keep this tag
    --length            add seqLength tag with sequence length
    --with-taxon-at-rank=TAXONRANK
                        add taxonomy annotation at a specified rank level
    -m <mclfile>, --mcl=<mclfile>
                        add cluster tag to sequences according to a mcl graph
                        clustering partition
    --uniq-id           force sequence ids to be uniq

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)
Usage: 
:py:mod:`obiclean`: tags a set of sequences for PCR/sequencing errors identification 
====================================================================================

.. codeauthor:: Eric Coissac <eric.coissac@metabarcoding.org>

:py:mod:`obiclean` is a command that classifies sequence records either as ``head``, ``internal`` or ``singleton``.

For that purpose, two pieces of information are used:
    - sequence record counts
    - sequence similarities

*S1* a sequence record is considered as a variant of *S2* another sequence record if and only if:
    - ``count`` of *S1* divided by ``count`` of *S2* is lesser than the ratio *R*.
      *R* default value is set to 1, and can be adjusted between 0 and 1 with the ``-r`` option.
    - both sequences are *related* to one another (they can align with some differences, 
      the maximum number of differences can be specified by the ``-d`` option).

Considering *S* a sequence record, the following properties hold for *S* tagged as:
    - ``head``: 
       + there exists **at least one** sequence record in the dataset that is a variant of *S*
       + there exists **no** sequence record in the dataset such that *S* is a variant of this 
         sequence record
    - ``internal``:
       + there exists **at least one** sequence record in the dataset such that *S* is a variant
         of this sequence record
    - ``singleton``: 
       + there exists **no** sequence record in the dataset that is a variant of *S*
       + there exists **no** sequence record in the dataset such that *S* is a variant of this 
         sequence record

By default, tagging is done once for the whole dataset, but it can also be done sample by sample
by specifying the ``-s`` option. In such a case, the counts are extracted from the sample 
information.

Finally, each sequence record is annotated with three new attributes ``head``, ``internal`` and 
``singleton``. The attribute values are the numbers of samples in which the sequence record has 
been classified in this manner.


***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar
  -d ###, --distance=###
                        Maximum numbers of errors between two variant
                        sequences [default: 1]
  -s <TAGNAME>, --sample=<TAGNAME>
                        Tag containing sample descriptions
  -g <TAGNAME>, --graph=<TAGNAME>
                        File name where the clustering graphs are saved
  -r <FLOAT>, --ratio=<FLOAT>
                        Minimum ratio between counts of two sequence records
                        so that the less abundant one can be considered as a
                        variant of the more abundant [default: 0.5]
  -H, --head            Outputs only head tagged sequence records
  -C, --cluster         Set obiclean in clustering mode

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)
Usage: 
:py:mod:`obicomplement`: reverse-complements sequences
======================================================

.. codeauthor:: Eric Coissac <eric.coissac@metabarcoding.org>

:py:mod:`obicomplement` reverse-complements the sequence records.


    .. TIP:: The identifiers of the sequence records are modified by appending
             to them the ``_CMP`` suffix.
             
    .. TIP:: a attribute with key ``complemented`` and value sets to ``True`` is added
             on each reversed complemented sequence record.
             
By using the selection option set, it is possible to reverse complement only a subset of the
sequence records included in the input file. The selected sequence are reversed complemented,
others are stored without modification 

    *Example 1:* 
    
    .. code-block:: bash
    
       > obicomplement seq.fasta > seqRC.fasta
       
    Reverses complements all sequence records from the ``seq.fasta`` file and stores the 
    result to the ``seqRC.fasta`` file.

    *Example 2:* 
    
    .. code-block:: bash
    
       > obicomplement -s 'A{10,}$' seq.fasta > seqRC.fasta
       
    Reverses complements sequence records from the ``seq.fasta`` file only if they finish
    by at least 10 ``A``. Others sequences are stored without modification.



***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar

  *********************
  * Filtering options *
  *********************
    -s <REGULAR_PATTERN>, --sequence=<REGULAR_PATTERN>
                        regular expression pattern used to select the
                        sequence. The pattern is case insensitive
    -D <REGULAR_PATTERN>, --definition=<REGULAR_PATTERN>
                        regular expression pattern matched against the
                        definition of the sequence. The pattern is case
                        sensitive
    -I <REGULAR_PATTERN>, --identifier=<REGULAR_PATTERN>
                        regular expression pattern matched against the
                        identifier of the sequence. The pattern is case
                        sensitive
    --id-list=<FILENAME>
                        file containing identifiers of sequences to select
    -a <ATTRIBUTE_NAME>:<REGULAR_PATTERN>, --attribute=<ATTRIBUTE_NAME>:<REGULAR_PATTERN>
                        regular expression pattern matched against the
                        attributes of the sequence. the value of this atribute
                        is of the form : attribute_name:regular_pattern. The
                        pattern is case sensitive.Several -a option can be
                        used on the same commande line.
    -A <ATTRIBUTE_NAME>, --has-attribute=<ATTRIBUTE_NAME>
                        select sequence with attribute <ATTRIBUTE_NAME>
                        defined
    -p <PYTHON_EXPRESSION>, --predicat=<PYTHON_EXPRESSION>
                        python boolean expression to be evaluated in the
                        sequence context. The attribute name can be used in
                        the expression as variable name .An extra variable
                        named 'sequence' refersto the sequence object itself.
                        Several -p option can be used on the same commande
                        line.
    -L <##>, --lmax=<##>
                        keep sequences shorter than lmax
    -l <##>, --lmin=<##>
                        keep sequences longer than lmin
    -v, --inverse-match
                        revert the sequence selection [default : False]

  ****************************
  * Taxonomy loading options *
  ****************************
    -d <FILENAME>, --database=<FILENAME>
                        ecoPCR taxonomy Database name
    -t <FILENAME>, --taxonomy-dump=<FILENAME>
                        NCBI Taxonomy dump repository name

  **************************************
  * Taxonomy-related filtering options *
  **************************************
    --require-rank=<RANK_NAME>
                        select sequence with taxid tag containing a parent of
                        rank <RANK_NAME>
    -r <TAXID>, --required=<TAXID>
                        Select the sequences having the ancestor of taxid
                        <TAXID>. If several ancestors are specified (with  '-r
                        taxid1 -r taxid2'), the sequences having at least one
                        of them are selected
    -i <TAXID>, --ignore=<TAXID>
                        ignored taxid

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)
Usage: obiconvert [options]

***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)

  ****************************
  * Taxonomy loading options *
  ****************************
    -d <FILENAME>, --database=<FILENAME>
                        ecoPCR taxonomy Database name
    -t <FILENAME>, --taxonomy-dump=<FILENAME>
                        NCBI Taxonomy dump repository name
Usage: 
:py:mod:`obicount`: counts the number of sequence records 
=========================================================

.. codeauthor:: Eric Coissac <eric.coissac@metabarcoding.org>

:py:mod:`obicount` counts the number of sequence records and/or the sum of the ``count`` attributes.

*Example:*

    .. code-block:: bash
        
        > obicount seq.fasta  

    Prints the number of sequence records contained in the ``seq.fasta`` 
    file and the sum of their ``count`` attributes.


***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar

  *****************************
  * Obicount specific options *
  *****************************
    -s, --sequence      Prints only the number of sequence records.
    -a, --all           Prints only the total count of sequence records (if a
                        sequence has no `count` attribute, its default count
                        is 1) (default: False).

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences
Usage: 
:py:mod:`obicut`: trims sequences
=================================

.. codeauthor:: Eric Coissac <eric.coissac@metabarcoding.org>

:py:mod:`obicut` is a command that trims sequence objects based on two integer 
values: the ``-b`` option gives the first position of the sequence to be kept, 
and the ``-e`` option gives the last position to be kept. Both values can be 
computed using a python expression.

  *Example:*
    
    .. code-block:: bash
        
          > obicut -b 50 -e seq_length seq1.fasta > seq2.fasta
    
    Keeps only the sequence part from the fiftieth position to the end.

  *Example:*
    
    .. code-block:: bash
        
          > obicut -b 50 -e seq_length-50 seq1.fasta > seq2.fasta
    
    Trims the first and last 50 nucleotides of the sequence object.


***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar

  *******************
  * Cutting options *
  *******************
    -b <PYTHON_EXPRESSION>, --begin=<PYTHON_EXPRESSION>
                        python expression to be evaluated in the sequence
                        context. The attribute name can be used in the
                        expression as variable name. An extra variable named
                        'sequence' refers to the sequence object itself.
    -e <PYTHON_EXPRESSION>, --end=<PYTHON_EXPRESSION>
                        python expression to be evaluated in the sequence
                        context. The attribute name can be used in the
                        expression as variable name .An extra variable named
                        'sequence' refersto the sequence object itself.

  *********************
  * Filtering options *
  *********************
    -s <REGULAR_PATTERN>, --sequence=<REGULAR_PATTERN>
                        regular expression pattern used to select the
                        sequence. The pattern is case insensitive
    -D <REGULAR_PATTERN>, --definition=<REGULAR_PATTERN>
                        regular expression pattern matched against the
                        definition of the sequence. The pattern is case
                        sensitive
    -I <REGULAR_PATTERN>, --identifier=<REGULAR_PATTERN>
                        regular expression pattern matched against the
                        identifier of the sequence. The pattern is case
                        sensitive
    --id-list=<FILENAME>
                        file containing identifiers of sequences to select
    -a <ATTRIBUTE_NAME>:<REGULAR_PATTERN>, --attribute=<ATTRIBUTE_NAME>:<REGULAR_PATTERN>
                        regular expression pattern matched against the
                        attributes of the sequence. the value of this atribute
                        is of the form : attribute_name:regular_pattern. The
                        pattern is case sensitive.Several -a option can be
                        used on the same commande line.
    -A <ATTRIBUTE_NAME>, --has-attribute=<ATTRIBUTE_NAME>
                        select sequence with attribute <ATTRIBUTE_NAME>
                        defined
    -p <PYTHON_EXPRESSION>, --predicat=<PYTHON_EXPRESSION>
                        python boolean expression to be evaluated in the
                        sequence context. The attribute name can be used in
                        the expression as variable name .An extra variable
                        named 'sequence' refersto the sequence object itself.
                        Several -p option can be used on the same commande
                        line.
    -L <##>, --lmax=<##>
                        keep sequences shorter than lmax
    -l <##>, --lmin=<##>
                        keep sequences longer than lmin
    -v, --inverse-match
                        revert the sequence selection [default : False]

  ****************************
  * Taxonomy loading options *
  ****************************
    -d <FILENAME>, --database=<FILENAME>
                        ecoPCR taxonomy Database name
    -t <FILENAME>, --taxonomy-dump=<FILENAME>
                        NCBI Taxonomy dump repository name

  **************************************
  * Taxonomy-related filtering options *
  **************************************
    --require-rank=<RANK_NAME>
                        select sequence with taxid tag containing a parent of
                        rank <RANK_NAME>
    -r <TAXID>, --required=<TAXID>
                        Select the sequences having the ancestor of taxid
                        <TAXID>. If several ancestors are specified (with  '-r
                        taxid1 -r taxid2'), the sequences having at least one
                        of them are selected
    -i <TAXID>, --ignore=<TAXID>
                        ignored taxid

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)
Usage: 
:py:mod:`obidistribute`: Distributes sequence records over several sequence records files 
=========================================================================================

.. codeauthor:: Eric Coissac <eric.coissac@metabarcoding.org>

:py:mod:`obidistribute` distributes equitably a set of sequence records over several files 
(No sequence records are printed on standard output).

The number of files is set using the ``-n`` option (required). File names are build with a prefix if
provided (``-p``option) and the file number (1 to ``n``).

*Example:*

    .. code-block:: bash
        
        > obidistribute -n 10 -p 'part' seq.fastq

    Distribute the sequence records contained in the ``seq.fastq`` 
    file and distributes them over files ``part_1.fastq`` to ``part_10.fastq``.


***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar

  **********************************
  * obidistribute specific options *
  **********************************
    -n ###, --number=###
                        Number of files to distribute over
    -p <PREFIX FILENAME>, --prefix=<PREFIX FILENAME>
                        prefix added at each file name

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)
Usage: 
:py:mod:`obiextract`: extract samples from a dataset 
====================================================

.. codeauthor:: Eric Coissac <eric.coissac@metabarcoding.org>

The :py:mod:`obiextract` command extract a subset of samples from a complete
dataset.

Extracted sample names can be specified or by indicating their names using option
on the command line or by indicating a file name containing a sample name per line

The count attribute of the sequence and the slot describing distribution of the sample
occurrences among samples are modified according to the selected samples.

A sequence not present in at least one of the selected samples is not conserved in the 
output of :py:mod:`obiextract`.



***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar
  -s <TAGNAME>, --sample=<TAGNAME>
                        Tag containing sample descriptions
  -e <SAMPLE_NAME>, --extract=<SAMPLE_NAME>
                        which <SAMPLE_NAME> have to be extracted
  -E <FILENAME>, --extract-list=<FILENAME>
                        File name where a list of sample is stored

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)
Usage: 
:py:mod:`obigrep`: filters sequence file 
========================================

.. codeauthor:: Eric Coissac <eric.coissac@metabarcoding.org>

The :py:mod:`obigrep` command is in some way analog to the standard Unix `grep`
command.
It selects a subset of sequence records from a sequence file. 

A sequence record is a complex object composed of an identifier, 
a set of attributes (``key=value``), a definition, and the sequence itself. 

Instead of working text line by text line as the standard Unix tool, selection is 
done sequence record by sequence record. 
A large set of options allows refining selection on any of the sequence record 
elements.

Moreover :py:mod:`obigrep` allows specifying simultaneously several conditions (that 
take the value ``TRUE`` or ``FALSE``) and only the sequence records that fulfill all 
the conditions (all conditions are ``TRUE``) are selected.



***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar

  *********************
  * Filtering options *
  *********************
    -s <REGULAR_PATTERN>, --sequence=<REGULAR_PATTERN>
                        regular expression pattern used to select the
                        sequence. The pattern is case insensitive
    -D <REGULAR_PATTERN>, --definition=<REGULAR_PATTERN>
                        regular expression pattern matched against the
                        definition of the sequence. The pattern is case
                        sensitive
    -I <REGULAR_PATTERN>, --identifier=<REGULAR_PATTERN>
                        regular expression pattern matched against the
                        identifier of the sequence. The pattern is case
                        sensitive
    --id-list=<FILENAME>
                        file containing identifiers of sequences to select
    -a <ATTRIBUTE_NAME>:<REGULAR_PATTERN>, --attribute=<ATTRIBUTE_NAME>:<REGULAR_PATTERN>
                        regular expression pattern matched against the
                        attributes of the sequence. the value of this atribute
                        is of the form : attribute_name:regular_pattern. The
                        pattern is case sensitive.Several -a option can be
                        used on the same commande line.
    -A <ATTRIBUTE_NAME>, --has-attribute=<ATTRIBUTE_NAME>
                        select sequence with attribute <ATTRIBUTE_NAME>
                        defined
    -p <PYTHON_EXPRESSION>, --predicat=<PYTHON_EXPRESSION>
                        python boolean expression to be evaluated in the
                        sequence context. The attribute name can be used in
                        the expression as variable name .An extra variable
                        named 'sequence' refersto the sequence object itself.
                        Several -p option can be used on the same commande
                        line.
    -L <##>, --lmax=<##>
                        keep sequences shorter than lmax
    -l <##>, --lmin=<##>
                        keep sequences longer than lmin
    -v, --inverse-match
                        revert the sequence selection [default : False]

  ****************************
  * Taxonomy loading options *
  ****************************
    -d <FILENAME>, --database=<FILENAME>
                        ecoPCR taxonomy Database name
    -t <FILENAME>, --taxonomy-dump=<FILENAME>
                        NCBI Taxonomy dump repository name

  **************************************
  * Taxonomy-related filtering options *
  **************************************
    --require-rank=<RANK_NAME>
                        select sequence with taxid tag containing a parent of
                        rank <RANK_NAME>
    -r <TAXID>, --required=<TAXID>
                        Select the sequences having the ancestor of taxid
                        <TAXID>. If several ancestors are specified (with  '-r
                        taxid1 -r taxid2'), the sequences having at least one
                        of them are selected
    -i <TAXID>, --ignore=<TAXID>
                        ignored taxid

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)
Usage: obihead [options]

***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar
  -n ###, --sequence-count=###
                        Count of first sequences to print

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)
Usage: obijoinpairedend [options]

***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar
  -r <FILENAME>, --reverse-reads=<FILENAME>
                        Filename containing reverse solexa reads

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)
Usage: obipr2 [options]

***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar
  --localdb=LOCAL       Local copy of the files located in the specified
                        directory will be used instead of those present on the
                        PR2 web site
  -m ####, --min-taxid=####
                        minimal taxid for the species taxid
Usage: obisample [options]

***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar
  -s ###, --sample-size=###
                        Size of the generated sample. If -a option is set,
                        size is expressed as fraction
  -a, --approx-sampling
                        Switch to an approximative algorithm, useful for large
                        files
  -w, --without-replacement
                        Ask for sampling without replacement

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)
Usage: obiselect [options]

***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar

  ******************************
  * obiselect specific options *
  ******************************
    -c <Attribute Name>, --category-attribute=<Attribute Name>
                        Add one attribute to the list of attribute used for
                        categorizing sequence records
    -n NUMBER, --number=NUMBER
                        number of sequence records to keep in each category
    -f FUNCTION, --function=FUNCTION
                        python code evaluated for each sequence record
                        [default: random value]
    -m, --min           select sequence record in each group minimizing the
                        function (exclusive with -M, -a, --median)
    -M, --max           select sequence record in each group maximizing the
                        function (exclusive with -m, -a, --median)
    -a, --mean          select sequence record in each group closest to the
                        mean of the function (exclusive with -m, -M, --median)
    --median            select sequence record in each group closest to the
                        median of the function (exclusive with -m, -M, -a)
    --merge=<TAG NAME>  attributes to merge within each group
    -s <TAGNAME>, --sample=<TAGNAME>
                        Tag containing sample descriptions, the default value
                        is set to *merged_sample*
    --merge-ids         add the merged id data to output

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)

  ****************************
  * Taxonomy loading options *
  ****************************
    -d <FILENAME>, --database=<FILENAME>
                        ecoPCR taxonomy Database name
    -t <FILENAME>, --taxonomy-dump=<FILENAME>
                        NCBI Taxonomy dump repository name
Usage: obisilva [options]

***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar
  -s, --ssu             specify that you are interested in the SSU database
  -l, --lsu             specify that you are interested in the LSU database
  -p, --parc            specify that you are interested in the parc version of
                        the database
  -r, --ref             specify that you are interested in the reference
                        version of the database
  -n, --nr              specify that you are interested in the non redundant
                        version of the database
  -t, --trunc           specify that you are interested in the truncated
                        version of database
  --localdb=LOCAL       Local copy of the files located in the specified
                        directory will be used instead of those present on the
                        ARB-Silva web site
  -m ####, --min-taxid=####
                        minimal taxid for the species taxid
Usage: obisort [options]

***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar

  ****************************
  * Obisort specific options *
  ****************************
    -k <TAG NAME>, --key=<TAG NAME>
                        Attribute used to sort the sequence records.
    -r, --reverse       Sorts in reverse order.

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)
Usage: obisplit [options]

***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar

  *****************************
  * Obisplit specific options *
  *****************************
    -p <PREFIX FILENAME>, --prefix=<PREFIX FILENAME>
                        Prefix added to each subfile name
    -t <tagname>, --tag-name=<tagname>
                        Attribute used to split the sequence file
    -u <FILENAME>, --undefined=<FILENAME>
                        Name of the file where undefined sequenced are stored

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)
Usage: 
:py:mod:`obistat`: computes basic statistics for attribute values 
=================================================================

.. codeauthor:: Eric Coissac <eric.coissac@metabarcoding.org>

:py:mod:`obistats` computes basic statistics for attribute values of sequence records.
The sequence records can be categorized or not using one or several ``-c`` options.
By default, only the number of sequence records and the total count are computed for each category. 
Additional statistics can be computed for attribute values in each category, like:

    - minimum value (``-m`` option) 
    - maximum value (``-M`` option) 
    - mean value (``-a`` option) 
    - variance (``-v`` option) 
    - standard deviation (``-s`` option)
    
The result is a contingency table with the different categories in rows, and the 
computed statistics in columns. 



***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar

  ****************************
  * obistat specific options *
  ****************************
    -c <Attribute Name>, --category-attribute=<Attribute Name>
                        Attribute used to categorize the sequence records.
    -m <Attribute Name>, --min=<Attribute Name>
                        Computes the minimum value of attribute for each
                        category.
    -M <Attribute Name>, --max=<Attribute Name>
                        Computes the maximum value of attribute for each
                        category.
    -a <Attribute Name>, --mean=<Attribute Name>
                        Computes the mean value of attribute for each
                        category.
    -v <Attribute Name>, --variance=<Attribute Name>
                        Computes the variance of attribute for each category.
    -s <Attribute Name>, --std-dev=<Attribute Name>
                        Computes the standard deviation of attribute for each
                        category.

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  ****************************
  * Taxonomy loading options *
  ****************************
    -d <FILENAME>, --database=<FILENAME>
                        ecoPCR taxonomy Database name
    -t <FILENAME>, --taxonomy-dump=<FILENAME>
                        NCBI Taxonomy dump repository name
Usage: 
:py:mod:`obisubset`: extract a subset of samples 
================================================

.. codeauthor:: Eric Coissac <eric.coissac@metabarcoding.org>

The :py:mod:`obisubset` command extracts a subset of samples from a sequence file
after its dereplication using :py:mod:`obiuniq` program.


***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)

  ******************************
  * obisubset specific options *
  ******************************
    -s <TAGNAME>, --sample=<TAGNAME>
                        Tag containing sample descriptions, the default value
                        is set to *merged_sample*
    -o <TAGNAME>, --other-tag=<TAGNAME>
                        Another tag to clean according to the sample subset
    -l <FILENAME>, --sample-list=<FILENAME>
                        File containing the samples names (one sample id per
                        line)
    -p <REGEX>, --sample-pattern=<REGEX>
                        A regular expression pattern matching the sample ids
                        to extract
    -n <SAMPLEIDS>, --sample-name=<SAMPLEIDS>
                        A sample id to extract
Usage: obitab [options]

***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar
  -n <NOT AVAILABLE STRING>, --na-string=<NOT AVAILABLE STRING>
                        String write in the table for not available value
  --output-field-separator=STRING
                        Field separator for CSV file
  -o, --output-seq      Add an extra column for sequence
  -d, --no-definition   Remove column for sequence definition
  -a <KEY>, --omit-attribute=<KEY>
                        Add attribute name to omit in the output tab

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)
Usage: obitail [options]

***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar
  -n ###, --sequence-count=###
                        Count of first sequences to print

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences

  *************************
  * Output format options *
  *************************
    --fasta-output      Output sequences in obitools fasta format
    --fastq-output      Output sequences in sanger fastq format
    --ecopcrdb-output=ECOPCROUTPUT
                        Output sequences in ecopcr database format (sequence
                        records are not printed on standard output)
    --uppercase         Print sequences in upper case (default is lower case)
Usage: obitaxonomy [options]

***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar
  -a <taxon_name>:rank:parent, --add-taxon=<taxon_name>:rank:parent
                        Adds a new taxon to the taxonomy. The new taxon is
                        described by three values separated by colons: the
                        scientific name, the rank of the new taxon, the taxid
                        of the parent taxon
  -D <TAXID>, --delete-local-taxon=<TAXID>
                        Erase a local taxon
  -s <SPECIES_NAME>, --add-species=<SPECIES_NAME>
                        Adds a new species to the taxonomy. The new species is
                        described by its scientific name
  -F <file name>, --add-file=<file name>
                        Add all the species from a fasta file to the taxonomy.
                        The header of the sequences must contain the field
                        defined by the -k option
  -k <key name>, --key_name=<key name>
                        Name of the attribute key used to find the species
                        names in the headers when the -F option is used.
                        Default = 'species_name'
  -f <taxon_name>:taxid, --add-favorite-name=<taxon_name>:taxid
                        Add a new favorite name to the taxonomy. The new name
                        is described by two values separated by a colon. the
                        new favorite name and the taxid of the taxon
  -m ####, --min-taxid=####
                        minimal taxid for the newly added taxid
  -A <ANCESTOR>, --restricting_ancestor=<ANCESTOR>
                        works with the -F option. Can be a word or a taxid
                        (number). Enables to restrict the adding of taxids
                        under a specified ancestor. If it's a word, it's the
                        field containing the ancestor's taxid in each
                        sequence's header (can be different for each
                        sequence). If it's a number, it's the taxid of the
                        ancestor (in which case it's the same for all the
                        sequences). All the sequences in the file for which
                        the genus can't be found will be added under this
                        ancestor.
  -p <path>, --path=<path>
                        works with the -F option. Field name for the taxonomy
                        path of the taxa if they are in the headers of the
                        sequences. Must be of the form
                        'Fungi,Agaricomycetes,Thelephorales,Thelephoraceae'
                        with the highest ancestors first and ',' as separators
                        between ancestors

  ****************************
  * Taxonomy loading options *
  ****************************
    -d <FILENAME>, --database=<FILENAME>
                        ecoPCR taxonomy Database name
    -t <FILENAME>, --taxonomy-dump=<FILENAME>
                        NCBI Taxonomy dump repository name
Usage: 
:py:mod:`obiuniq`: groups and dereplicates sequences  
====================================================

.. codeauthor:: Eric Coissac <eric.coissac@metabarcoding.org>

The :py:mod:`obiuniq` command is in some way analog to the standard Unix ``uniq -c`` command.

Instead of working text line by text line as the standard Unix tool, the processing is done on 
sequence records. 

A sequence record is a complex object composed of an identifier, a set of 
attributes (``key=value``), a definition, and the sequence itself. 

The :py:mod:`obiuniq` command groups together sequence records. Then, for each group, a sequence 
record is printed.

A group is defined by the sequence and optionally by the values of a set of attributes 
specified with the ``-c`` option.

As the identifier, the set of attributes (``key=value``) and the definition of the sequence 
records that are grouped together may be different, two options (``-m`` and ``-i``) 
allow refining how these parts of the records are reported.

    - By default, only attributes with identical values 
      within a group of sequence records are kept.

    - A ``count`` attribute is set to the total number of sequence records for each group.
      
    - For each attribute specified by the ``-m`` option, a new attribute whose key is prefixed 
      by ``merged_`` is created. These new attributes contain the number of times each value
      occurs within the group of sequence records. 
    
:py:mod:`obiuniq` and taxonomic information
-------------------------------------------
    
When a taxonomy is loaded (``-d`` or ``-t`` options), the ``merged_taxid`` 
attribute is created and records the number of times each *taxid* has been found in the 
group (it may be empty if no sequence record has a *taxid* attribute in the group). 
In addition, a set of taxonomy-related attributes are generated for each group having at 
least one sequence record with a *taxid* attribute. The *taxid* attribute of the sequence
group is set to the last common ancestor of the *taxids* of the group. All other taxonomy-related 
attributes created (``species``, ``genus``, ``family``, ``species_name``, ``genus_name``, 
``family_name``, ``rank``, ``scientific_name``) give information on the last common ancestor.
  


***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar

  ****************************
  * Obiuniq specific options *
  ****************************
    -m <TAG NAME>, --merge=<TAG NAME>
                        Attributes to merge
    -i, --merge-ids     Add the merged key with all ids of merged sequences
    -c <Attribute Name>, --category-attribute=<Attribute Name>
                        Add one attribute to the list of attributes used to
                        group sequences before dereplication (option can be
                        used several times)
    -p, --prefix        Dereplication is done based on prefix matching: (i)
                        The shortest sequence of each group is a prefix of any
                        sequence of its group (ii) Two shortest sequences of
                        any couple of groups are not theprefix of the other
                        one

  ****************************
  * Taxonomy loading options *
  ****************************
    -d <FILENAME>, --database=<FILENAME>
                        ecoPCR taxonomy Database name
    -t <FILENAME>, --taxonomy-dump=<FILENAME>
                        NCBI Taxonomy dump repository name

  *************************************
  * Restriction to a sub-part options *
  *************************************
    Allow to limit analysis to a sub-part of the data file

    --skip=<N>          skip the N first sequences
    --only=<N>          treat only N sequences

  ************************
  * Input format options *
  ************************
    If not specified, a test is done to determine the file format

    --genbank           Input file is in genbank format
    --embl              Input file is in embl format
    --skip-on-error     Skip sequence entries with parse error
    --fasta             Input file is in fasta nucleic format (including
                        obitools fasta extentions)
    --ecopcr            Input file is in ecopcr format
    --raw-fasta         Input file is in fasta format (but more tolerant to
                        format variant)
    --sanger            Input file is in sanger fastq nucleic format (standard
                        fastq)
    --solexa            Input file is in fastq nucleic format produced by
                        solexa sequencer
    --ecopcrdb          Input file is an ecopcr database
    --nuc               Input file contains nucleic sequences
    --prot              Input file contains protein sequences
Usage: oligotag [options]

***********
* Options *
***********
  -h, --help            show this help message and exit
  --DEBUG               Set logging in debug mode
  --without-progress-bar
                        desactivate progress bar
  -L <filename>, --oligo-list=<filename>
                        filename containing a list of oligonucleotide
  -s <###>, --oligo-size=<###>
                        Size of oligonucleotide to generate
  -f <###>, --family-size=<###>
                        Size of oligonucleotide family to generate
  -d <###>, --distance=<###>
                        minimal distance between two oligonucleotides
  -g <###>, --gc-max=<###>
                        maximum count of G or C nucleotide acceptable in a
                        word
  -a <regular pattern>, --accepted=<regular pattern>
                        pattern of accepted oligonucleotide
  -r <regular pattern>, --rejected=<regular pattern>
                        pattern of rejected oligonucleotide
  -p <###>, --homopolymer=<###>
                        reject oligo with homopolymer longer than.
  -P <###>, --homopolymer-min=<###>
                        accept only oligo with homopolymer longer or equal to.
  -T <seconde>, --timeout=<seconde>
                        timeout to identify a clique of good size

Resource usage statistics from testing obitools:
   Process count: 4
   CPU time: Sys=0:00:00.1, User=0:00:00.1
   Memory: 20.5M
   Disk usage: 12B
   Time elapsed: 0:00:14.4


TEST END: obitools-1.2.13-py27hf9ca5db_3.tar.bz2
--dirty flag and --keep-old-work not specified. Removing build/test folder after successful build/test.

