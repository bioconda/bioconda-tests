  Package              Version  Build               Channel                                    Size
─────────────────────────────────────────────────────────────────────────────────────────────────────
  Install:
─────────────────────────────────────────────────────────────────────────────────────────────────────

  + attrs               21.2.0  pyhd8ed1ab_0        conda-forge/noarch                       Cached
  + ca-certificates  2021.5.30  h033912b_0          conda-forge/osx-64                       Cached
  + colorama             0.4.4  pyh9f0ad1d_0        conda-forge/noarch                       Cached
  + iniconfig            1.1.1  pyh9f0ad1d_0        conda-forge/noarch                         8 KB
  + libcxx              12.0.1  habf9029_0          conda-forge/osx-64                       Cached
  + libffi                 3.3  h046ec9c_2          conda-forge/osx-64                       Cached
  + more-itertools       8.9.0  pyhd8ed1ab_0        conda-forge/noarch                        41 KB
  + ncurses                6.2  h2e338ed_4          conda-forge/osx-64                       Cached
  + openssl             1.1.1l  h0d85af4_0          conda-forge/osx-64                       Cached
  + orfipy               0.0.4  py39hcf0ab7e_0      /Users/runner/conda/conda-bld/osx-64     159 KB
  + packaging             21.0  pyhd8ed1ab_0        conda-forge/noarch                        35 KB
  + pip                 21.2.4  pyhd8ed1ab_0        conda-forge/noarch                       Cached
  + pluggy              0.13.1  py39h6e9494a_4      conda-forge/osx-64                        29 KB
  + psutil               5.8.0  py39h89e85a6_1      conda-forge/osx-64                       Cached
  + py                  1.10.0  pyhd3deb0d_0        conda-forge/noarch                        73 KB
  + pyahocorasick        1.4.0  py39hb5aae12_2      conda-forge/osx-64                        32 KB
  + pyfastx              0.8.4  py39h0bb3d0f_0      bioconda/osx-64                           64 KB
  + pyparsing            2.4.7  pyh9f0ad1d_0        conda-forge/noarch                        60 KB
  + pytest               6.2.5  py39h6e9494a_0      conda-forge/osx-64                       432 KB
  + python               3.9.7  hd187cdc_0_cpython  conda-forge/osx-64                       Cached
  + python_abi             3.9  2_cp39              conda-forge/osx-64                       Cached
  + readline               8.1  h05e3726_0          conda-forge/osx-64                       Cached
  + setuptools          57.4.0  py39h6e9494a_0      conda-forge/osx-64                       Cached
  + sqlite              3.36.0  h23a322b_0          conda-forge/osx-64                       Cached
  + tk                  8.6.11  h5dbffcc_1          conda-forge/osx-64                       Cached
  + toml                0.10.2  pyhd8ed1ab_0        conda-forge/noarch                        18 KB
  + tzdata               2021a  he74cb21_1          conda-forge/noarch                       Cached
  + wheel               0.37.0  pyhd8ed1ab_1        conda-forge/noarch                       Cached
  + xz                   5.2.5  haf1e3a3_1          conda-forge/osx-64                       Cached
  + zlib                1.2.11  h7795811_1010       conda-forge/osx-64                       Cached

  Summary:

  Install: 30 packages

  Total download: 952 KB

─────────────────────────────────────────────────────────────────────────────────────────────────────

Updating build index: /Users/runner/conda/conda-bld

TEST START: orfipy-0.0.4-py39hcf0ab7e_0.tar.bz2

## Package Plan ##

  environment location: /Users/runner/conda/conda-bld/orfipy_1630926717652/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pl


The following NEW packages will be INSTALLED:

    attrs:           21.2.0-pyhd8ed1ab_0      conda-forge
    ca-certificates: 2021.5.30-h033912b_0     conda-forge
    colorama:        0.4.4-pyh9f0ad1d_0       conda-forge
    iniconfig:       1.1.1-pyh9f0ad1d_0       conda-forge
    libcxx:          12.0.1-habf9029_0        conda-forge
    libffi:          3.3-h046ec9c_2           conda-forge
    more-itertools:  8.9.0-pyhd8ed1ab_0       conda-forge
    ncurses:         6.2-h2e338ed_4           conda-forge
    openssl:         1.1.1l-h0d85af4_0        conda-forge
    orfipy:          0.0.4-py39hcf0ab7e_0     local      
    packaging:       21.0-pyhd8ed1ab_0        conda-forge
    pip:             21.2.4-pyhd8ed1ab_0      conda-forge
    pluggy:          0.13.1-py39h6e9494a_4    conda-forge
    psutil:          5.8.0-py39h89e85a6_1     conda-forge
    py:              1.10.0-pyhd3deb0d_0      conda-forge
    pyahocorasick:   1.4.0-py39hb5aae12_2     conda-forge
    pyfastx:         0.8.4-py39h0bb3d0f_0     bioconda   
    pyparsing:       2.4.7-pyh9f0ad1d_0       conda-forge
    pytest:          6.2.5-py39h6e9494a_0     conda-forge
    python:          3.9.7-hd187cdc_0_cpython conda-forge
    python_abi:      3.9-2_cp39               conda-forge
    readline:        8.1-h05e3726_0           conda-forge
    setuptools:      57.4.0-py39h6e9494a_0    conda-forge
    sqlite:          3.36.0-h23a322b_0        conda-forge
    tk:              8.6.11-h5dbffcc_1        conda-forge
    toml:            0.10.2-pyhd8ed1ab_0      conda-forge
    tzdata:          2021a-he74cb21_1         conda-forge
    wheel:           0.37.0-pyhd8ed1ab_1      conda-forge
    xz:              5.2.5-haf1e3a3_1         conda-forge
    zlib:            1.2.11-h7795811_1010     conda-forge

Preparing transaction: ...working... done
Verifying transaction: ...working... done
Executing transaction: ...working... done
export PREFIX=/Users/runner/conda/conda-bld/orfipy_1630926717652/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pl
export SRC_DIR=/Users/runner/conda/conda-bld/orfipy_1630926717652/test_tmp
import: 'orfipy'
import: 'orfipy'
usage: 
    orfipy [<options>] <infile>
    By default orfipy reports ORFs as sequences between start and stop codons. See ORF searching options to change this behaviour.
    If no output type, i.e. dna, rna, pep, bed or bed12, is specified, default output is bed format to stdout.
    

orfipy: extract Open Reading Frames (version 0.0.4)

positional arguments:
  infile                The input file, in plain Fasta/Fastq or gzipped
                        format, containing Nucletide sequences

optional arguments:
  -h, --help            show this help message and exit
  --procs PROCS         Num processor cores to use Default:mp.cpu_count()
  --single-mode         Run in single mode i.e. no parallel processing
                        (SLOWER). If supplied with procs, this is ignored.
                        Default: False
  --table TABLE         The codon table number to use or path to .json file
                        with codon table. Use --show-tables to see available
                        tables compiled from: https://www.ncbi.nlm.nih.gov/Tax
                        onomy/Utils/wprintgc.cgi?chapter=cgencodes Default: 1
  --start START         Comma-separated list of start-codons. This will
                        override start codons described in translation table.
                        E.g. "--start ATG,ATT" Default: Derived from the
                        translation table selected
  --stop STOP           Comma-separated list of stop codons. This will
                        override stop codons described in translation table.
                        E.g. "--start TAG,TTT" Default: Derived from the
                        translation table selected
  --outdir OUTDIR       Path to outdir default: orfipy_<infasta>_out
  --bed12 BED12         bed12 out file Default: None
  --bed BED             bed out file Default: None
  --dna DNA             fasta (DNA) out file Default: None
  --rna RNA             fasta (RNA) out file Default: None
  --pep PEP             fasta (peptide) out file Default: None
  --min MIN             Minimum length of ORF, excluding stop codon
                        (nucleotide) Default: 30
  --max MAX             Maximum length of ORF, excluding stop codon
                        (nucleotide) Default: 1,000,000,000
  --strand {f,r,b}      Strands to find ORFs [(f)orward,(r)everse,(b)oth]
                        Default: b
  --ignore-case         Ignore case and find ORFs in lower case sequences too.
                        Useful for soft-masked sequences. Default: False
  --partial-3           Output ORFs with a start codon but lacking an inframe
                        stop codon. E.g. "ATG TTT AAA" Default: False
  --partial-5           Output ORFs with an inframe stop codon lacking an
                        inframe start codon. E.g. "TTT AAA TAG" Default: False
  --between-stops       Output ORFs defined as regions between stop codons
                        (regions free of stop codon). This will set
                        --partial-3 and --partial-5 true. Default: False
  --include-stop        Include stop codon in the results, if a stop codon
                        exists. This output format is compatible with
                        TransDecoder's which includes stop codon coordinates
                        Default: False
  --longest             Output a separate BED file for longest ORFs per
                        sequence. Requires bed option. Default: False
  --by-frame            Output separate BED files for ORFs by frame. Can be
                        combined with "--longest" to output longest ORFs in
                        each frame. Requires bed option. Default: False
  --chunk-size CHUNK_SIZE
                        Max chunk size in MB. This is useful for limiting
                        memory usage when processing large fasta files using
                        multiple processes The files are processed in chunks
                        if file size is greater than chunk-size. By default
                        orfipy computes the chunk size based on available
                        memory and cpu cores. Providing a smaller chunk-size
                        will lower the memory usage but, actual memory used by
                        orfipy can be more than the chunk-size. Providing a
                        very high chunk-size can lead to memory issues for
                        larger sequences such as large chromosomes. It is best
                        to let orfipy decide on the chunk-size. Default:
                        estimated by orfipy based on system memory and cpu
  --show-tables         Print translation tables and exit. Default: False
  --version             Print version information and exit

Resource usage statistics from testing orfipy:
   Process count: 4
   CPU time: Sys=0:00:00.0, User=0:00:00.1
   Memory: 21.3M
   Disk usage: 20B
   Time elapsed: 0:00:04.1


TEST END: orfipy-0.0.4-py39hcf0ab7e_0.tar.bz2
--dirty flag and --keep-old-work not specified. Removing build/test folder after successful build/test.

