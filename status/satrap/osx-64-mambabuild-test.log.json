  Package        Version  Build       Channel                                    Size
───────────────────────────────────────────────────────────────────────────────────────
  Install:
───────────────────────────────────────────────────────────────────────────────────────

  + libcxx        12.0.1  habf9029_0  conda-forge/osx-64                       Cached
  + llvm-openmp   12.0.1  hda6cdc1_1  conda-forge/osx-64                       287 KB
  + satrap           0.2  hb280591_3  /Users/runner/conda/conda-bld/osx-64     495 KB

  Summary:

  Install: 3 packages

  Total download: 782 KB

───────────────────────────────────────────────────────────────────────────────────────

Updating build index: /Users/runner/conda/conda-bld

TEST START: satrap-0.2-hb280591_3.tar.bz2

## Package Plan ##

  environment location: /Users/runner/conda/conda-bld/satrap_1630919234350/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pl


The following NEW packages will be INSTALLED:

    libcxx:      12.0.1-habf9029_0 conda-forge
    llvm-openmp: 12.0.1-hda6cdc1_1 conda-forge
    satrap:      0.2-hb280591_3    local      

Preparing transaction: ...working... done
Verifying transaction: ...working... done
Executing transaction: ...working... done
export PREFIX=/Users/runner/conda/conda-bld/satrap_1630919234350/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pl
export SRC_DIR=/Users/runner/conda/conda-bld/satrap_1630919234350/test_tmp


SATRAP - a Solid Assembly TRAnslator Program
Version 0.1 - 10/8/13

Usage example :  bin/satrap -step 3 4 -reads_path directory/ -file_esten .csfastq \
                            -fasta double_encoded_assembly

---------------
GENERAL SETTING
---------------
   (1) There are 2 possible situations. In the first one the SOLiD raw data must be assembled to produce a 
       de novo transcriptome assembly. In this case you can consider all steps of the pipeline using 
       (-step 1 2 3 4) parameter. In the second situation a color space assembly produced in a previous time
       must be translated. In this case only the steps 3 and 4 are required and you can use (-step 3 4).
   (2) If step 1 or 3 are considered you need to create a directory containing the csfastq files or 
       the symbolic links to these files and then you should pass the path to the "-reads_path" parameter.
       If your data are in the native color space format you can use the program "csfasta_to_fastq" inside
       this package to convert them in the csfastq format. Example of conversion:
       "csfasta_fastq -csfasta reads_file -qual quality_file > DIR/reads.csfastq"

-step                (vector<int>)     PLEASE SELECT THE DESIRED STEP OF THE ANALYSIS USING "-step" parameter:
                                       "1" for STEP 1, "2" for STEP 2 etc. For instance the Oases pipeline
                                       requires: "-step 1 2". The steps 3 and 4 are set by default, so the
                                       omitting of this parameter will erase the previous results in these steps
-bin                   (string)        Set the directory path where binaries are located [bin/]
-tmp_dir               (string)        Set the temporary directory where results will be saved [tmp/].

---------------------------------------------------------------
STEP 1 - HOW TO PRODUCE THE DOUBLE ENCODED READS FOR ASSEMBLING 
---------------------------------------------------------------
   (1) Please skips this step if you have just produced a double encoded assembly to be translated.
       This step has the only purpose to produce the double encoded reads to be assembled with the
       assembly pipelines (for instance Oases). Basing on the hardware capability, users can tune the amount
       of reads to be assembled also considering quality and trimming. The file 1.de that will be saved in 
       the STEP1 directory inside the temporary directory will contain the double encoded reads. This file
       will not be considered for translation purpose (see STEP3).
   (2) You need to create the directory containing the csfastq files or the symbolic links to these
       files and then you should pass the directory path to the "-reads_path" parameter.
   (3) You need to indicate the extension of the csfastq files with "-file_esten" parameter

       (*) -reads_path (string)        directory containing the SOLiD reads in CSFASTQ format
       (*) -file_esten (string)        extension of read files. Example "-file_esten .csfastq"
           -max_reads  (float)         Max number of reads per analyzed file or files [10]
           -tags    (string,string)    pair-end tag names for assembling purpose. It enables paired-end
                                       management (-t1) (tag examples: F3, F5-RNA ...)
           -t1          (int)          it trims the first sequenced end at 3' (if paired-end) [0]
           -t2          (int)          it trims the second sequenced end at 3' [0]
           -q           (int)          minimum mean quality tolerated for paired_end sequences [15]
           -len         (int)          minimum read size after trimming [30]
           -mate-pair                  The sequences coming from mate pair libraries will be 
                                       managed as paired-end (for assembling purpose) [disabled]

----------------------------------
STEP 2 - OASES PIPELINE PROCESSING
----------------------------------
   (1) Please skips this step if you have just produced a double encoded assembly to be translated.
       In this step the Oases pipeline will be executed. In the bin directory the CONFIG file contains
       the base setting for velvet and oases programs. You can edit and modify this file to change the
       setting but some parameters and the output will be managed by the pipeline. Before to run this step
       you must set the paths for Velvet and oases binaries using -velvet_path and -oases_path parameters.
       Remember that Oases and velvet must be compiled using the color option. This is the example for
       Oases: make color 'VELVET_DIR=/full_path_of_velvet_dir/' 'MAXKMERLENGTH=63' 'LONGSEQUENCES=1' and
       this is the other one for Velvet: make color 'MAXKMERLENGTH=63' 'LONGSEQUENCES=1'

           -velvet_path (string)       path to velvet binaries - example: path/velvet/ 
           -oases_path  (string)       path to Oases binary - example: path/oases/ 
           -strand_specific            Velvet will be set considering specific strand
           -kmer_set  (vector<int>)    Set the kmer to be considered. [23 25 27 29 31]
           -oases_kmer  (int)          Oases kmer parameter [27]

----------------------------------------
STEP 3 - DOUBLE ENCODING FOR TRANSLATION
----------------------------------------
   (1) Firstly you need to create the directory containing the csfastq files or the symbolic links to
       these files and then you should pass the directory path to the "-reads_path" parameter.
       If your data are in the native color space format you can use the program "csfasta_to_fastq" inside
       this package to convert them in the csfastq format. Example of conversion:
       "csfasta_fastq -csfasta reads_file -qual quality_file > DIR/reads.csfastq"
   (2) You need to indicate the extension of the csfastq files with "-file_esten" parameter

       (*) -reads_path (string)        directory containing the SOLiD reads in CSFASTQ format
       (*) -file_esten (string)        extension of read files. Example "-file_esten .csfastq"
           -T2          (int)          it trims sequences at 3' end [0]
           -Q           (int)          minimum mean quality for reads [9]
           -len         (int)          minimum read size after trimming [30]

--------------------------------
STEP 4 - COLOR SPACE TRANSLATION
--------------------------------
   (1) it executes the color space translation and requires the output of STEP 3 or the path where the
       color space assembly is located (you should set the -fasta parameter)

       (*) -fasta      (string)        Double encoded color space assembly in FASTA format.
           -l           (int)          Minimum contig length [100]
           -n          (float)         Maximum tolerated fraction of Ns for each translated contig[1].
           -c           (int)          Minimum coverage required to operate the assembly correction
                                       If this parameter is used -z will be not considered.
           -erode       (int)          Minimum coverage considered to erode contig ends [2]
           -z          (float)         z-score required to calculate the coverage threshold basing on
                                       the statistical analysis of the sequence coverage [3]. Low values
                                       are more conservative when the error correction is applied. As
                                       consequence of this fact Ns will be introduced around color
                                       incoherence not supported by enough sequence coverage.
           -erosion                    it doesn't erodes contig ends in any way
           -no_clustering              For DNA-seq assembly. It doesn't considers the clustering analysis

(*) required input.

OUTPUT:
A temporary directory will be created in the directory where the pipeline is running. All results
will be saved in the "-tmp_dir" path. Inside this directory other STEP* directory will be created and
the translated assembly will be saved into the file STEP4/translated.fa. The files STEP4/clusters.* 
represent the files produced by the clustering process of transcripts. Finally, the file 
STEP4/translated_clustered_transcrips.fa represents the final output file and the file STEP4/STEP4.log
will contain some statistics about the color space translation.

CONFIG FILE DESCRIPTION:
Important notice: The row order follow the order of commands! If you erase a row the associated command
will not be executed. For optimization purpose we strongly suggest to modify only the field number 4.
Field 1: Referred analysis step
Field 2: Referred loop or sub-step inside the analysis
Field 3: binary name to be executed
Field 4: base setting that doesn't need changes during the analysis or loops

Author: Davide Campagna


Resource usage statistics from testing satrap:
   Process count: 2
   CPU time: Sys=0:00:00.0, User=0:00:00.0
   Memory: 10.2M
   Disk usage: 12B
   Time elapsed: 0:00:02.2


TEST END: satrap-0.2-hb280591_3.tar.bz2
--dirty flag and --keep-old-work not specified. Removing build/test folder after successful build/test.

