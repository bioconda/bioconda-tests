  Package                           Version  Build                Channel                                   Size
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  Install:
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────

  + _libgcc_mutex                       0.1  conda_forge          conda-forge/linux-64                    Cached
  + _openmp_mutex                       4.5  1_gnu                conda-forge/linux-64                    Cached
  + alsa-lib                          1.2.3  h516909a_0           conda-forge/linux-64                    560 KB
  + atk-1.0                          2.36.0  h3371d22_4           conda-forge/linux-64                    560 KB
  + biopython                          1.77  py39h27cfd23_0       pkgs/main/linux-64                        2 MB
  + bowtie                            1.3.0  py39h176da8b_2       bioconda/linux-64                       988 KB
  + bzip2                             1.0.8  h7f98852_4           conda-forge/linux-64                    Cached
  + c-ares                           1.17.2  h7f98852_0           conda-forge/linux-64                    Cached
  + ca-certificates               2021.5.30  ha878542_0           conda-forge/linux-64                    Cached
  + cairo                            1.16.0  h6cf1ce9_1008        conda-forge/linux-64                    Cached
  + certifi                       2021.5.30  py39hf3d152e_0       conda-forge/linux-64                    Cached
  + chrpath                            0.16  h7f98852_1002        conda-forge/linux-64                     29 KB
  + cycler                           0.10.0  py_2                 conda-forge/noarch                        9 KB
  + cython                          0.29.24  py39he80948d_0       conda-forge/linux-64                      2 MB
  + dbus                             1.13.6  h48d8840_2           conda-forge/linux-64                    572 KB
  + expat                             2.4.1  h9c3ff4c_0           conda-forge/linux-64                    182 KB
  + fastx_toolkit                    0.0.14  he1b5a44_8           bioconda/linux-64                       524 KB
  + font-ttf-dejavu-sans-mono          2.37  hab24e00_0           conda-forge/noarch                      Cached
  + font-ttf-inconsolata              3.000  h77eed37_0           conda-forge/noarch                      Cached
  + font-ttf-source-code-pro          2.038  h77eed37_0           conda-forge/noarch                      Cached
  + font-ttf-ubuntu                    0.83  hab24e00_0           conda-forge/noarch                      Cached
  + fontconfig                       2.13.1  hba837de_1005        conda-forge/linux-64                    Cached
  + fonts-conda-ecosystem                 1  0                    conda-forge/noarch                      Cached
  + fonts-conda-forge                     1  0                    conda-forge/noarch                      Cached
  + freetype                         2.10.4  h0708190_1           conda-forge/linux-64                    Cached
  + fribidi                          1.0.10  h36c2ea0_0           conda-forge/linux-64                    Cached
  + gdk-pixbuf                       2.42.6  h04a7f16_0           conda-forge/linux-64                    609 KB
  + gettext                        0.19.8.1  h0b5b191_1005        conda-forge/linux-64                    Cached
  + giflib                            5.2.1  h36c2ea0_2           conda-forge/linux-64                     77 KB
  + glib                             2.68.4  h9c3ff4c_0           conda-forge/linux-64                    447 KB
  + glib-tools                       2.68.4  h9c3ff4c_0           conda-forge/linux-64                     86 KB
  + gnuplot                           5.4.1  hec6539f_2           conda-forge/linux-64                      1 MB
  + graphite2                        1.3.13  h58526e2_1001        conda-forge/linux-64                    Cached
  + gst-plugins-base                 1.18.4  hf529b03_2           conda-forge/linux-64                      3 MB
  + gstreamer                        1.18.4  h76c114f_2           conda-forge/linux-64                      2 MB
  + gtk2                            2.24.33  h539f30e_1           conda-forge/linux-64                      7 MB
  + harfbuzz                          2.9.0  h83ec7ef_0           conda-forge/linux-64                    Cached
  + icu                                68.1  h58526e2_0           conda-forge/linux-64                    Cached
  + jbig                                2.1  h7f98852_2003        conda-forge/linux-64                    Cached
  + jpeg                                 9d  h36c2ea0_0           conda-forge/linux-64                    Cached
  + kiwisolver                        1.3.2  py39h1a9c180_0       conda-forge/linux-64                     79 KB
  + krb5                             1.19.2  hcc1bbae_0           conda-forge/linux-64                    Cached
  + lcms2                              2.12  hddcbb42_0           conda-forge/linux-64                    443 KB
  + ld_impl_linux-64                 2.36.1  hea4e1c9_2           conda-forge/linux-64                    Cached
  + lerc                              2.2.1  h9c3ff4c_0           conda-forge/linux-64                    Cached
  + libblas                           3.9.0  11_linux64_openblas  conda-forge/linux-64                    Cached
  + libcblas                          3.9.0  11_linux64_openblas  conda-forge/linux-64                    Cached
  + libclang                         11.1.0  default_ha53f305_1   conda-forge/linux-64                     19 MB
  + libcurl                          7.78.0  h2574ce0_0           conda-forge/linux-64                    Cached
  + libdeflate                          1.7  h7f98852_5           conda-forge/linux-64                    Cached
  + libedit                    3.1.20191231  he28a2e2_2           conda-forge/linux-64                    Cached
  + libev                              4.33  h516909a_1           conda-forge/linux-64                    Cached
  + libevent                         2.1.10  hcdb4288_3           conda-forge/linux-64                      1 MB
  + libffi                              3.3  h58526e2_2           conda-forge/linux-64                    Cached
  + libgcc                            7.2.0  h69d50b8_2           conda-forge/linux-64                    304 KB
  + libgcc-ng                        11.1.0  hc902ee8_8           conda-forge/linux-64                    Cached
  + libgd                             2.3.2  h78a0170_0           conda-forge/linux-64                    299 KB
  + libgfortran-ng                   11.1.0  h69a702a_8           conda-forge/linux-64                    Cached
  + libgfortran5                     11.1.0  h6c583b3_8           conda-forge/linux-64                    Cached
  + libglib                          2.68.4  h3e27bee_0           conda-forge/linux-64                    Cached
  + libgomp                          11.1.0  hc902ee8_8           conda-forge/linux-64                    Cached
  + libgtextutils                       0.7  h1b792b2_7           bioconda/linux-64                       154 KB
  + libiconv                           1.16  h516909a_0           conda-forge/linux-64                    Cached
  + liblapack                         3.9.0  11_linux64_openblas  conda-forge/linux-64                    Cached
  + libllvm11                        11.1.0  hf817b99_2           conda-forge/linux-64                     29 MB
  + libnghttp2                       1.43.0  h812cca2_0           conda-forge/linux-64                    Cached
  + libogg                            1.3.4  h7f98852_1           conda-forge/linux-64                    206 KB
  + libopenblas                      0.3.17  pthreads_h8fe5266_1  conda-forge/linux-64                    Cached
  + libopus                           1.3.1  h7f98852_1           conda-forge/linux-64                    255 KB
  + libpng                           1.6.37  h21135ba_2           conda-forge/linux-64                    Cached
  + libpq                              13.3  hd57d9b9_0           conda-forge/linux-64                      3 MB
  + libssh2                          1.10.0  ha56f1ee_0           conda-forge/linux-64                    Cached
  + libstdcxx-ng                     11.1.0  h56837e0_8           conda-forge/linux-64                    Cached
  + libtiff                           4.3.0  hf544144_1           conda-forge/linux-64                    Cached
  + libuuid                          2.32.1  h7f98852_1000        conda-forge/linux-64                    Cached
  + libvorbis                         1.3.7  h9c3ff4c_0           conda-forge/linux-64                    280 KB
  + libwebp                           1.2.1  h3452ae3_0           conda-forge/linux-64                     84 KB
  + libwebp-base                      1.2.1  h7f98852_0           conda-forge/linux-64                    Cached
  + libxcb                             1.13  h7f98852_1003        conda-forge/linux-64                    Cached
  + libxkbcommon                      1.0.3  he3ba5ed_0           conda-forge/linux-64                    581 KB
  + libxml2                          2.9.12  h72842e0_0           conda-forge/linux-64                    Cached
  + lz4-c                             1.9.3  h9c3ff4c_1           conda-forge/linux-64                    Cached
  + matplotlib-base                   3.4.3  py39h2fa2bec_0       conda-forge/linux-64                      7 MB
  + mysql-common                     8.0.25  ha770c72_2           conda-forge/linux-64                      2 MB
  + mysql-libs                       8.0.25  hfa10184_2           conda-forge/linux-64                      2 MB
  + ncurses                             6.2  h58526e2_4           conda-forge/linux-64                    Cached
  + nspr                               4.30  h9c3ff4c_0           conda-forge/linux-64                    233 KB
  + nss                                3.69  hb5efdd6_0           conda-forge/linux-64                      2 MB
  + numpy                            1.21.2  py39hdbf815f_0       conda-forge/linux-64                      6 MB
  + olefile                            0.46  pyh9f0ad1d_1         conda-forge/noarch                       32 KB
  + openjpeg                          2.4.0  hb52868f_1           conda-forge/linux-64                    444 KB
  + openssl                          1.1.1k  h7f98852_1           conda-forge/linux-64                    Cached
  + pandas                            1.3.2  py39hde0f152_0       conda-forge/linux-64                     13 MB
  + pango                            1.48.9  hb8ff022_0           conda-forge/linux-64                    Cached
  + pcre                               8.45  h9c3ff4c_0           conda-forge/linux-64                    Cached
  + perl                             5.32.1  0_h7f98852_perl5     conda-forge/linux-64                     14 MB
  + perl-gd                            2.56  5                    bioconda/linux-64                        82 KB
  + perl-gdgraph                       1.49  2                    bioconda/linux-64                        44 KB
  + perl-gdgraph-histogram              1.1  0                    bioconda/linux-64                         5 KB
  + perl-gdtextutil                    0.86  2                    bioconda/linux-64                        13 KB
  + perl-perlio-gzip                   0.19  0                    bioconda/linux-64                        12 KB
  + perl-threaded                    5.26.0  0                    bioconda/linux-64                         4 KB
  + pillow                            8.3.1  py39ha612740_0       conda-forge/linux-64                    687 KB
  + pip                              21.2.4  pyhd8ed1ab_0         conda-forge/noarch                      Cached
  + pixman                           0.40.0  h36c2ea0_0           conda-forge/linux-64                    Cached
  + plastid                           0.5.1  py39hd1f1204_3       /home/vsts/conda/conda-bld/linux-64       2 MB
  + pthread-stubs                       0.4  h36c2ea0_1001        conda-forge/linux-64                    Cached
  + pyparsing                         2.4.7  pyh9f0ad1d_0         conda-forge/noarch                       60 KB
  + pysam                          0.16.0.1  py39h051187c_3       bioconda/linux-64                         3 MB
  + python                            3.9.6  h49503c6_1_cpython   conda-forge/linux-64                    Cached
  + python-dateutil                   2.8.2  pyhd8ed1ab_0         conda-forge/noarch                      240 KB
  + python_abi                          3.9  2_cp39               conda-forge/linux-64                    Cached
  + pytz                             2021.1  pyhd8ed1ab_0         conda-forge/noarch                      Cached
  + qt                               5.12.9  hda022c4_4           conda-forge/linux-64                    100 MB
  + readline                            8.1  h46c0cb4_0           conda-forge/linux-64                    Cached
  + scipy                             1.7.1  py39hee8e79c_0       conda-forge/linux-64                     22 MB
  + setuptools                       57.4.0  py39hf3d152e_0       conda-forge/linux-64                    Cached
  + six                              1.16.0  pyh6c4a22f_0         conda-forge/noarch                      Cached
  + sqlite                           3.36.0  h9cd32fc_0           conda-forge/linux-64                    Cached
  + tbb                              2020.2  h4bd325d_4           conda-forge/linux-64                      1 MB
  + termcolor                         1.1.0  py_2                 conda-forge/noarch                        6 KB
  + tk                               8.6.11  h21135ba_0           conda-forge/linux-64                    Cached
  + tornado                             6.1  py39h3811e60_1       conda-forge/linux-64                    646 KB
  + twobitreader                      3.1.7  pyh864c0ab_1         bioconda/noarch                          18 KB
  + tzdata                            2021a  he74cb21_1           conda-forge/noarch                      Cached
  + wheel                            0.37.0  pyhd8ed1ab_1         conda-forge/noarch                      Cached
  + xorg-kbproto                      1.0.7  h7f98852_1002        conda-forge/linux-64                    Cached
  + xorg-libice                      1.0.10  h7f98852_0           conda-forge/linux-64                    Cached
  + xorg-libsm                        1.2.3  hd9c2040_1000        conda-forge/linux-64                    Cached
  + xorg-libx11                       1.7.2  h7f98852_0           conda-forge/linux-64                    Cached
  + xorg-libxau                       1.0.9  h7f98852_0           conda-forge/linux-64                    Cached
  + xorg-libxdmcp                     1.1.3  h7f98852_0           conda-forge/linux-64                    Cached
  + xorg-libxext                      1.3.4  h7f98852_1           conda-forge/linux-64                    Cached
  + xorg-libxrender                  0.9.10  h7f98852_1003        conda-forge/linux-64                    Cached
  + xorg-libxt                        1.2.1  h7f98852_2           conda-forge/linux-64                    Cached
  + xorg-renderproto                 0.11.1  h7f98852_1002        conda-forge/linux-64                    Cached
  + xorg-xextproto                    7.3.0  h7f98852_1002        conda-forge/linux-64                    Cached
  + xorg-xproto                      7.0.31  h7f98852_1007        conda-forge/linux-64                    Cached
  + xz                                5.2.5  h516909a_1           conda-forge/linux-64                    Cached
  + zlib                             1.2.11  h516909a_1010        conda-forge/linux-64                    Cached
  + zstd                              1.5.0  ha95c52a_0           conda-forge/linux-64                    Cached

  Summary:

  Install: 141 packages

  Total download: 253 MB

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Updating build index: /home/vsts/conda/conda-bld

TEST START: plastid-0.5.1-py39hd1f1204_3.tar.bz2

## Package Plan ##

  environment location: /home/vsts/conda/conda-bld/plastid_1630568311712/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac


The following NEW packages will be INSTALLED:

    _libgcc_mutex:             0.1-conda_forge            conda-forge
    _openmp_mutex:             4.5-1_gnu                  conda-forge
    alsa-lib:                  1.2.3-h516909a_0           conda-forge
    atk-1.0:                   2.36.0-h3371d22_4          conda-forge
    biopython:                 1.77-py39h27cfd23_0                   
    bowtie:                    1.3.0-py39h176da8b_2       bioconda   
    bzip2:                     1.0.8-h7f98852_4           conda-forge
    c-ares:                    1.17.2-h7f98852_0          conda-forge
    ca-certificates:           2021.5.30-ha878542_0       conda-forge
    cairo:                     1.16.0-h6cf1ce9_1008       conda-forge
    certifi:                   2021.5.30-py39hf3d152e_0   conda-forge
    chrpath:                   0.16-h7f98852_1002         conda-forge
    cycler:                    0.10.0-py_2                conda-forge
    cython:                    0.29.24-py39he80948d_0     conda-forge
    dbus:                      1.13.6-h48d8840_2          conda-forge
    expat:                     2.4.1-h9c3ff4c_0           conda-forge
    fastx_toolkit:             0.0.14-he1b5a44_8          bioconda   
    font-ttf-dejavu-sans-mono: 2.37-hab24e00_0            conda-forge
    font-ttf-inconsolata:      3.000-h77eed37_0           conda-forge
    font-ttf-source-code-pro:  2.038-h77eed37_0           conda-forge
    font-ttf-ubuntu:           0.83-hab24e00_0            conda-forge
    fontconfig:                2.13.1-hba837de_1005       conda-forge
    fonts-conda-ecosystem:     1-0                        conda-forge
    fonts-conda-forge:         1-0                        conda-forge
    freetype:                  2.10.4-h0708190_1          conda-forge
    fribidi:                   1.0.10-h36c2ea0_0          conda-forge
    gdk-pixbuf:                2.42.6-h04a7f16_0          conda-forge
    gettext:                   0.19.8.1-h0b5b191_1005     conda-forge
    giflib:                    5.2.1-h36c2ea0_2           conda-forge
    glib:                      2.68.4-h9c3ff4c_0          conda-forge
    glib-tools:                2.68.4-h9c3ff4c_0          conda-forge
    gnuplot:                   5.4.1-hec6539f_2           conda-forge
    graphite2:                 1.3.13-h58526e2_1001       conda-forge
    gst-plugins-base:          1.18.4-hf529b03_2          conda-forge
    gstreamer:                 1.18.4-h76c114f_2          conda-forge
    gtk2:                      2.24.33-h539f30e_1         conda-forge
    harfbuzz:                  2.9.0-h83ec7ef_0           conda-forge
    icu:                       68.1-h58526e2_0            conda-forge
    jbig:                      2.1-h7f98852_2003          conda-forge
    jpeg:                      9d-h36c2ea0_0              conda-forge
    kiwisolver:                1.3.2-py39h1a9c180_0       conda-forge
    krb5:                      1.19.2-hcc1bbae_0          conda-forge
    lcms2:                     2.12-hddcbb42_0            conda-forge
    ld_impl_linux-64:          2.36.1-hea4e1c9_2          conda-forge
    lerc:                      2.2.1-h9c3ff4c_0           conda-forge
    libblas:                   3.9.0-11_linux64_openblas  conda-forge
    libcblas:                  3.9.0-11_linux64_openblas  conda-forge
    libclang:                  11.1.0-default_ha53f305_1  conda-forge
    libcurl:                   7.78.0-h2574ce0_0          conda-forge
    libdeflate:                1.7-h7f98852_5             conda-forge
    libedit:                   3.1.20191231-he28a2e2_2    conda-forge
    libev:                     4.33-h516909a_1            conda-forge
    libevent:                  2.1.10-hcdb4288_3          conda-forge
    libffi:                    3.3-h58526e2_2             conda-forge
    libgcc:                    7.2.0-h69d50b8_2           conda-forge
    libgcc-ng:                 11.1.0-hc902ee8_8          conda-forge
    libgd:                     2.3.2-h78a0170_0           conda-forge
    libgfortran-ng:            11.1.0-h69a702a_8          conda-forge
    libgfortran5:              11.1.0-h6c583b3_8          conda-forge
    libglib:                   2.68.4-h3e27bee_0          conda-forge
    libgomp:                   11.1.0-hc902ee8_8          conda-forge
    libgtextutils:             0.7-h1b792b2_7             bioconda   
    libiconv:                  1.16-h516909a_0            conda-forge
    liblapack:                 3.9.0-11_linux64_openblas  conda-forge
    libllvm11:                 11.1.0-hf817b99_2          conda-forge
    libnghttp2:                1.43.0-h812cca2_0          conda-forge
    libogg:                    1.3.4-h7f98852_1           conda-forge
    libopenblas:               0.3.17-pthreads_h8fe5266_1 conda-forge
    libopus:                   1.3.1-h7f98852_1           conda-forge
    libpng:                    1.6.37-h21135ba_2          conda-forge
    libpq:                     13.3-hd57d9b9_0            conda-forge
    libssh2:                   1.10.0-ha56f1ee_0          conda-forge
    libstdcxx-ng:              11.1.0-h56837e0_8          conda-forge
    libtiff:                   4.3.0-hf544144_1           conda-forge
    libuuid:                   2.32.1-h7f98852_1000       conda-forge
    libvorbis:                 1.3.7-h9c3ff4c_0           conda-forge
    libwebp:                   1.2.1-h3452ae3_0           conda-forge
    libwebp-base:              1.2.1-h7f98852_0           conda-forge
    libxcb:                    1.13-h7f98852_1003         conda-forge
    libxkbcommon:              1.0.3-he3ba5ed_0           conda-forge
    libxml2:                   2.9.12-h72842e0_0          conda-forge
    lz4-c:                     1.9.3-h9c3ff4c_1           conda-forge
    matplotlib-base:           3.4.3-py39h2fa2bec_0       conda-forge
    mysql-common:              8.0.25-ha770c72_2          conda-forge
    mysql-libs:                8.0.25-hfa10184_2          conda-forge
    ncurses:                   6.2-h58526e2_4             conda-forge
    nspr:                      4.30-h9c3ff4c_0            conda-forge
    nss:                       3.69-hb5efdd6_0            conda-forge
    numpy:                     1.21.2-py39hdbf815f_0      conda-forge
    olefile:                   0.46-pyh9f0ad1d_1          conda-forge
    openjpeg:                  2.4.0-hb52868f_1           conda-forge
    openssl:                   1.1.1k-h7f98852_1          conda-forge
    pandas:                    1.3.2-py39hde0f152_0       conda-forge
    pango:                     1.48.9-hb8ff022_0          conda-forge
    pcre:                      8.45-h9c3ff4c_0            conda-forge
    perl:                      5.32.1-0_h7f98852_perl5    conda-forge
    perl-gd:                   2.56-5                     bioconda   
    perl-gdgraph:              1.49-2                     bioconda   
    perl-gdgraph-histogram:    1.1-0                      bioconda   
    perl-gdtextutil:           0.86-2                     bioconda   
    perl-perlio-gzip:          0.19-0                     bioconda   
    perl-threaded:             5.26.0-0                   bioconda   
    pillow:                    8.3.1-py39ha612740_0       conda-forge
    pip:                       21.2.4-pyhd8ed1ab_0        conda-forge
    pixman:                    0.40.0-h36c2ea0_0          conda-forge
    plastid:                   0.5.1-py39hd1f1204_3       local      
    pthread-stubs:             0.4-h36c2ea0_1001          conda-forge
    pyparsing:                 2.4.7-pyh9f0ad1d_0         conda-forge
    pysam:                     0.16.0.1-py39h051187c_3    bioconda   
    python:                    3.9.6-h49503c6_1_cpython   conda-forge
    python-dateutil:           2.8.2-pyhd8ed1ab_0         conda-forge
    python_abi:                3.9-2_cp39                 conda-forge
    pytz:                      2021.1-pyhd8ed1ab_0        conda-forge
    qt:                        5.12.9-hda022c4_4          conda-forge
    readline:                  8.1-h46c0cb4_0             conda-forge
    scipy:                     1.7.1-py39hee8e79c_0       conda-forge
    setuptools:                57.4.0-py39hf3d152e_0      conda-forge
    six:                       1.16.0-pyh6c4a22f_0        conda-forge
    sqlite:                    3.36.0-h9cd32fc_0          conda-forge
    tbb:                       2020.2-h4bd325d_4          conda-forge
    termcolor:                 1.1.0-py_2                 conda-forge
    tk:                        8.6.11-h21135ba_0          conda-forge
    tornado:                   6.1-py39h3811e60_1         conda-forge
    twobitreader:              3.1.7-pyh864c0ab_1         bioconda   
    tzdata:                    2021a-he74cb21_1           conda-forge
    wheel:                     0.37.0-pyhd8ed1ab_1        conda-forge
    xorg-kbproto:              1.0.7-h7f98852_1002        conda-forge
    xorg-libice:               1.0.10-h7f98852_0          conda-forge
    xorg-libsm:                1.2.3-hd9c2040_1000        conda-forge
    xorg-libx11:               1.7.2-h7f98852_0           conda-forge
    xorg-libxau:               1.0.9-h7f98852_0           conda-forge
    xorg-libxdmcp:             1.1.3-h7f98852_0           conda-forge
    xorg-libxext:              1.3.4-h7f98852_1           conda-forge
    xorg-libxrender:           0.9.10-h7f98852_1003       conda-forge
    xorg-libxt:                1.2.1-h7f98852_2           conda-forge
    xorg-renderproto:          0.11.1-h7f98852_1002       conda-forge
    xorg-xextproto:            7.3.0-h7f98852_1002        conda-forge
    xorg-xproto:               7.0.31-h7f98852_1007       conda-forge
    xz:                        5.2.5-h516909a_1           conda-forge
    zlib:                      1.2.11-h516909a_1010       conda-forge
    zstd:                      1.5.0-ha95c52a_0           conda-forge

Preparing transaction: ...working... done
Verifying transaction: ...working... done
Executing transaction: ...working... 
done
export PREFIX=/home/vsts/conda/conda-bld/plastid_1630568311712/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac
export SRC_DIR=/home/vsts/conda/conda-bld/plastid_1630568311712/test_tmp
import: 'plastid'
import: 'plastid'
usage: counts_in_region [-h] [-q] [-v]
                        [--count_files COUNT_FILES [COUNT_FILES ...]]
                        [--countfile_format {BAM,bigwig,bowtie,wiggle}]
                        [--sum SUM] [--min_length N] [--max_length N]
                        [--big_genome] [--fiveprime_variable] [--fiveprime]
                        [--threeprime] [--center] [--offset OFFSET]
                        [--nibble N]
                        [--annotation_files infile.[BED | BigBed | GTF2 | GFF3]
                        [infile.[BED | BigBed | GTF2 | GFF3] ...]]
                        [--annotation_format {BED,BigBed,GTF2,GFF3}]
                        [--add_three] [--tabix] [--sorted]
                        [--bed_extra_columns BED_EXTRA_COLUMNS [BED_EXTRA_COLUMNS ...]]
                        [--maxmem MAXMEM]
                        [--gff_transcript_types GFF_TRANSCRIPT_TYPES [GFF_TRANSCRIPT_TYPES ...]]
                        [--gff_exon_types GFF_EXON_TYPES [GFF_EXON_TYPES ...]]
                        [--gff_cds_types GFF_CDS_TYPES [GFF_CDS_TYPES ...]]
                        [--mask_annotation_files infile.[BED | BigBed | GTF2 | GFF3 | PSL]
                        [infile.[BED | BigBed | GTF2 | GFF3 | PSL] ...]]
                        [--mask_annotation_format {BED,BigBed,GTF2,GFF3,PSL}]
                        [--mask_add_three] [--mask_tabix] [--mask_sorted]
                        [--mask_bed_extra_columns MASK_BED_EXTRA_COLUMNS [MASK_BED_EXTRA_COLUMNS ...]]
                        [--mask_maxmem MASK_MAXMEM]
                        [--mask_gff_transcript_types MASK_GFF_TRANSCRIPT_TYPES [MASK_GFF_TRANSCRIPT_TYPES ...]]
                        [--mask_gff_exon_types MASK_GFF_EXON_TYPES [MASK_GFF_EXON_TYPES ...]]
                        [--mask_gff_cds_types MASK_GFF_CDS_TYPES [MASK_GFF_CDS_TYPES ...]]
                        outfile

------------------------------------------------------------------------------

Count the number of :term:`read alignments<alignment>` covering 
regions of interest in the genome, and calculate read densities (in reads
per nucleotide and in RPKM) over these regions.

Results are output as a table with the following columns:

    ========================  ==================================================
    **Name**                  **Definition**
    ------------------------  --------------------------------------------------
    `region_name`             Name or ID of region of interest
    
    `region`                  Genomic coordinates of region, formatted as
                              described in
                              plastid.genomics.roitools.SegmentChain.from_str
                              
    `counts`                  Number of reads mapping to region
    
    `counts_per_nucleotide`   Read density, measured in number of reads mapping
                              to region, divided by length of region
                              
    `rpkm`                    Read density, measured in RPKM
    
    `length`                  Region length, in nucleotides
    ========================  ==================================================
    
If a mask annotation file is supplied, masked portions of regions
will be excluded when tabulating counts, measuring region length, and calculating
`counts_per_nucleotide` and `rpkm`.

See also
--------
~plastid.bin.cs script
    Count the number of :term:`read alignments<alignment>` and calculate
    read densities (in RPKM) specifically for genes and sub-regions
    (5' UTR, CDS, 3' UTR), excluding positions covered by multiple genes

------------------------------------------------------------------------------

positional arguments:
  outfile               Output filename

optional arguments:
  -h, --help            show this help message and exit

warning/error options:
  -q, --quiet           Suppress all warning messages. Cannot use with '-v'.
  -v, --verbose         Increase verbosity. With '-v', show every warning.
                        With '-vv', turn warnings into exceptions. Cannot use
                        with '-q'. (Default: show each type of warning once)

count & alignment file options:
  Open alignment or count files and optionally set mapping rules

  --count_files COUNT_FILES [COUNT_FILES ...]
                        One or more count or alignment file(s) from a single
                        sample or set of samples to be pooled.
  --countfile_format {BAM,bigwig,bowtie,wiggle}
                        Format of file containing alignments or counts
                        (Default: BAM)
  --sum SUM             Sum used in normalization of counts and RPKM/RPNT
                        calculations (Default: total mapped reads/counts in
                        dataset)
  --min_length N        Minimum read length required to be included (BAM &
                        bowtie files only. Default: 25)
  --max_length N        Maximum read length permitted to be included (BAM &
                        bowtie files only. Default: 100)
  --big_genome          Use slower but memory-efficient implementation for big
                        genomes or for memory-limited computers. For wiggle &
                        bowtie files only.

alignment mapping functions (BAM & bowtie files only):
  For BAM or bowtie files, one of the mutually exclusive read mapping functions
  is required:

  --fiveprime_variable  Map read alignment to a variable offset from 5'
                        position of read, with offset determined by read
                        length. Requires `--offset` below
  --fiveprime           Map read alignment to 5' position.
  --threeprime          Map read alignment to 3' position
  --center              Subtract N positions from each end of read, and add
                        1/(length-N), to each remaining position, where N is
                        specified by `--nibble`

filtering and alignment mapping options:
  
  The remaining arguments are optional and affect the behavior of specific
  mapping functions:

  --offset OFFSET       For `--fiveprime` or `--threeprime`, provide an
                        integer representing the offset into the read,
                        starting from either the 5' or 3' end, at which data
                        should be plotted. For `--fiveprime_variable`, provide
                        the filename of a two-column tab-delimited text file,
                        in which first column represents read length or the
                        special keyword `'default'`, and the second column
                        represents the offset from the five prime end of that
                        read length at which the read should be mapped.
                        (Default: 0)
  --nibble N            For use with `--center` only. nt to remove from each
                        end of read before mapping (Default: 0)

annotation file options (one or more annotation files required):
  Open one or more genome annotation files

  --annotation_files infile.[BED | BigBed | GTF2 | GFF3] [infile.[BED | BigBed | GTF2 | GFF3] ...]
                        Zero or more annotation files (max 1 file if BigBed)
  --annotation_format {BED,BigBed,GTF2,GFF3}
                        Format of annotation_files (Default: GTF2). Note: GFF3
                        assembly assumes SO v.2.5.2 feature ontologies, which
                        may or may not match your specific file.
  --add_three           If supplied, coding regions will be extended by 3
                        nucleotides at their 3' ends (except for GTF2 files
                        that explicitly include `stop_codon` features). Use if
                        your annotation file excludes stop codons from CDS.
  --tabix               annotation_files are tabix-compressed and indexed
                        (Default: False). Ignored for BigBed files.
  --sorted              annotation_files are sorted by chromosomal position
                        (Default: False)

BED-specific options:
  --bed_extra_columns BED_EXTRA_COLUMNS [BED_EXTRA_COLUMNS ...]
                        Number of extra columns in BED file (e.g. in custom
                        ENCODE formats) or list of names for those columns.
                        (Default: 0).
  --mask_bed_extra_columns MASK_BED_EXTRA_COLUMNS [MASK_BED_EXTRA_COLUMNS ...]
                        Number of extra columns in BED file (e.g. in custom
                        ENCODE formats) or list of names for those columns.
                        (Default: 0).

BigBed-specific options:
  --maxmem MAXMEM       Maximum desired memory footprint in MB to devote to
                        BigBed/BigWig files. May be exceeded by large queries.
                        (Default: 0, No maximum)
  --mask_maxmem MASK_MAXMEM
                        Maximum desired memory footprint in MB to devote to
                        BigBed/BigWig files. May be exceeded by large queries.
                        (Default: 0, No maximum)

GFF3-specific options:
  --gff_transcript_types GFF_TRANSCRIPT_TYPES [GFF_TRANSCRIPT_TYPES ...]
                        GFF3 feature types to include as transcripts, even if
                        no exons are present (for GFF3 only; default: use SO
                        v2.5.3 specification)
  --gff_exon_types GFF_EXON_TYPES [GFF_EXON_TYPES ...]
                        GFF3 feature types to include as exons (for GFF3 only;
                        default: use SO v2.5.3 specification)
  --gff_cds_types GFF_CDS_TYPES [GFF_CDS_TYPES ...]
                        GFF3 feature types to include as CDS (for GFF3 only;
                        default: use SO v2.5.3 specification)
  --mask_gff_transcript_types MASK_GFF_TRANSCRIPT_TYPES [MASK_GFF_TRANSCRIPT_TYPES ...]
                        GFF3 feature types to include as transcripts, even if
                        no exons are present (for GFF3 only; default: use SO
                        v2.5.3 specification)
  --mask_gff_exon_types MASK_GFF_EXON_TYPES [MASK_GFF_EXON_TYPES ...]
                        GFF3 feature types to include as exons (for GFF3 only;
                        default: use SO v2.5.3 specification)
  --mask_gff_cds_types MASK_GFF_CDS_TYPES [MASK_GFF_CDS_TYPES ...]
                        GFF3 feature types to include as CDS (for GFF3 only;
                        default: use SO v2.5.3 specification)

mask file options (optional):
  Add mask file(s) that annotate regions that should be excluded from analyses
  (e.g. repetitive genomic regions).

  --mask_annotation_files infile.[BED | BigBed | GTF2 | GFF3 | PSL] [infile.[BED | BigBed | GTF2 | GFF3 | PSL] ...]
                        Zero or more annotation files (max 1 file if BigBed)
  --mask_annotation_format {BED,BigBed,GTF2,GFF3,PSL}
                        Format of mask_annotation_files (Default: GTF2). Note:
                        GFF3 assembly assumes SO v.2.5.2 feature ontologies,
                        which may or may not match your specific file.
  --mask_add_three      If supplied, coding regions will be extended by 3
                        nucleotides at their 3' ends (except for GTF2 files
                        that explicitly include `stop_codon` features). Use if
                        your annotation file excludes stop codons from CDS.
  --mask_tabix          mask_annotation_files are tabix-compressed and indexed
                        (Default: False). Ignored for BigBed files.
  --mask_sorted         mask_annotation_files are sorted by chromosomal
                        position (Default: False)
usage: cs [-h] {generate,count,chart} ...

------------------------------------------------------------------------------

Count the number of :term:`read alignments<alignment>` and calculate
read densities (in RPKM) over genes, correcting gene boundaries
for overlap with other genes or regions specified in a mask file.

Counts and densities are calculated separately per gene for
exons, 5' UTRs, coding regions, and 3' UTRs. In addition, positions overlapped
by multiple genes are excluded, as are positions annotated in
:term:`mask annotation files<crossmap>`, if one is provided.

The script's operation is divided into three subprograms:

Generate
    The generate mode pre-process a genome annotation
    as follows:

     #. All genes whose transcripts share exact exons are collapsed to
        "merged" genes.

     #. Positions covered by more than one merged gene on the same strand
        are excluded from analysis, and subtracted from each merged genes.

     #. Remaining positions in each merged gene are then divided
        into the following groups:

            *exon*
                all positions in all transcripts mapping to the merged gene

            *CDS*
                positions which appear in coding regions in *all* transcript
                isoforms mapping to the merged gene. i.e. These positions
                are never part of a fiveprime or threeprime UTR in *any*
                transcript mapping to the merged gene

            *UTR5*
                positions which are annotated only as *5' UTR* in all
                transcript isoforms mapping to the merged gene

            *UTR3*
                positions which are annotated only as *3 UTR* in all
                transcript isoforms mapping to the merged gene

            *masked*
                positions excluded from analyses as directed in an optional
                mask file

    The following files are output, where `OUTBASE` is a name supplied
    by the user:

        OUTBASE_gene.positions
            Tab-delimited text file. Each line is a merged gene, and columns
            indicate the genomic coordinates and lengths of each of the position
            sets above.

        OUTBASE_transcript.positions
            Tab-delimited text file. Each line is a transcript, and columns
            indicate the genomic coordinates and lengths of each of the position
            sets above.

        OUTBASE_gene_REGION.bed
             BED files showing position sets for `REGION`,
             where `REGION` is one of *exon*, *CDS*, *UTR5*, and *UTR3* or
             *masked*. These contain the same information in
             ``OUTBASE_gene.positions``, but can be visualized easily in a
             genome browser

Count
    The count mode counts the number and density of
    read alignments in each sub-region (*exon*, *CDS*, *UTR5*, and *UTR3*)
    of each gene.

Chart
    The chart mode takes output from one or more samples
    run under count mode and generates several tables and
    charts that provide broad overviews of the data.

See command-line help for each subprogram for details on each mode

See also
--------
~plastid.bin.counts_in_region script
    Calculate  the number and density  of read alignments
    covering any set of regions of interest, making no corrections for gene
    boundaries.

------------------------------------------------------------------------------

optional arguments:
  -h, --help            show this help message and exit

subcommands:
  choose one of the following

  {generate,count,chart}
    generate            Create unambiguous position file from GFF3 annotation
    count               Count reads in unambiguous gene positions
    chart               Produce charts comparing reads between samples
usage: get_count_vectors [-h] [-q] [-v]
                         [--count_files COUNT_FILES [COUNT_FILES ...]]
                         [--countfile_format {BAM,bigwig,bowtie,wiggle}]
                         [--normalize] [--sum SUM] [--min_length N]
                         [--max_length N] [--big_genome]
                         [--fiveprime_variable] [--fiveprime] [--threeprime]
                         [--center] [--offset OFFSET] [--nibble N]
                         [--annotation_files infile.[BED | BigBed | GTF2 | GFF3]
                         [infile.[BED | BigBed | GTF2 | GFF3] ...]]
                         [--annotation_format {BED,BigBed,GTF2,GFF3}]
                         [--add_three] [--tabix] [--sorted]
                         [--bed_extra_columns BED_EXTRA_COLUMNS [BED_EXTRA_COLUMNS ...]]
                         [--maxmem MAXMEM]
                         [--gff_transcript_types GFF_TRANSCRIPT_TYPES [GFF_TRANSCRIPT_TYPES ...]]
                         [--gff_exon_types GFF_EXON_TYPES [GFF_EXON_TYPES ...]]
                         [--gff_cds_types GFF_CDS_TYPES [GFF_CDS_TYPES ...]]
                         [--mask_annotation_files infile.[BED | BigBed | GTF2 | GFF3 | PSL]
                         [infile.[BED | BigBed | GTF2 | GFF3 | PSL] ...]]
                         [--mask_annotation_format {BED,BigBed,GTF2,GFF3,PSL}]
                         [--mask_add_three] [--mask_tabix] [--mask_sorted]
                         [--mask_bed_extra_columns MASK_BED_EXTRA_COLUMNS [MASK_BED_EXTRA_COLUMNS ...]]
                         [--mask_maxmem MASK_MAXMEM]
                         [--mask_gff_transcript_types MASK_GFF_TRANSCRIPT_TYPES [MASK_GFF_TRANSCRIPT_TYPES ...]]
                         [--mask_gff_exon_types MASK_GFF_EXON_TYPES [MASK_GFF_EXON_TYPES ...]]
                         [--mask_gff_cds_types MASK_GFF_CDS_TYPES [MASK_GFF_CDS_TYPES ...]]
                         [--out_prefix OUT_PREFIX] [--format FORMAT]
                         out_folder

------------------------------------------------------------------------------

Fetch vectors of counts at each nucleotide position in one or more
regions of interest (ROIs).

Output files
------------
Vectors are saved as individual line-delimited files -- one position per line --
in a user-specified output folder. Each file is named for the ROI to which it
corresponds. If a mask file -- e.g. from  ~plastid.bin.crossmap
-- is provided, masked positions will be have value `nan` in output.

------------------------------------------------------------------------------

positional arguments:
  out_folder            Folder in which to save output vectors

optional arguments:
  -h, --help            show this help message and exit
  --out_prefix OUT_PREFIX
                        Prefix to prepend to output files (default: no prefix)
  --format FORMAT       printf-style format string for output (default:
                        '%.8f')

warning/error options:
  -q, --quiet           Suppress all warning messages. Cannot use with '-v'.
  -v, --verbose         Increase verbosity. With '-v', show every warning.
                        With '-vv', turn warnings into exceptions. Cannot use
                        with '-q'. (Default: show each type of warning once)

count & alignment file options:
  Open alignment or count files and optionally set mapping rules

  --count_files COUNT_FILES [COUNT_FILES ...]
                        One or more count or alignment file(s) from a single
                        sample or set of samples to be pooled.
  --countfile_format {BAM,bigwig,bowtie,wiggle}
                        Format of file containing alignments or counts
                        (Default: BAM)
  --normalize           Whether counts should be normalized to counts per
                        million (usually not. default: False)
  --sum SUM             Sum used in normalization of counts and RPKM/RPNT
                        calculations (Default: total mapped reads/counts in
                        dataset)
  --min_length N        Minimum read length required to be included (BAM &
                        bowtie files only. Default: 25)
  --max_length N        Maximum read length permitted to be included (BAM &
                        bowtie files only. Default: 100)
  --big_genome          Use slower but memory-efficient implementation for big
                        genomes or for memory-limited computers. For wiggle &
                        bowtie files only.

alignment mapping functions (BAM & bowtie files only):
  For BAM or bowtie files, one of the mutually exclusive read mapping functions
  is required:

  --fiveprime_variable  Map read alignment to a variable offset from 5'
                        position of read, with offset determined by read
                        length. Requires `--offset` below
  --fiveprime           Map read alignment to 5' position.
  --threeprime          Map read alignment to 3' position
  --center              Subtract N positions from each end of read, and add
                        1/(length-N), to each remaining position, where N is
                        specified by `--nibble`

filtering and alignment mapping options:
  
  The remaining arguments are optional and affect the behavior of specific
  mapping functions:

  --offset OFFSET       For `--fiveprime` or `--threeprime`, provide an
                        integer representing the offset into the read,
                        starting from either the 5' or 3' end, at which data
                        should be plotted. For `--fiveprime_variable`, provide
                        the filename of a two-column tab-delimited text file,
                        in which first column represents read length or the
                        special keyword `'default'`, and the second column
                        represents the offset from the five prime end of that
                        read length at which the read should be mapped.
                        (Default: 0)
  --nibble N            For use with `--center` only. nt to remove from each
                        end of read before mapping (Default: 0)

annotation file options (one or more annotation files required):
  Open one or more genome annotation files

  --annotation_files infile.[BED | BigBed | GTF2 | GFF3] [infile.[BED | BigBed | GTF2 | GFF3] ...]
                        Zero or more annotation files (max 1 file if BigBed)
  --annotation_format {BED,BigBed,GTF2,GFF3}
                        Format of annotation_files (Default: GTF2). Note: GFF3
                        assembly assumes SO v.2.5.2 feature ontologies, which
                        may or may not match your specific file.
  --add_three           If supplied, coding regions will be extended by 3
                        nucleotides at their 3' ends (except for GTF2 files
                        that explicitly include `stop_codon` features). Use if
                        your annotation file excludes stop codons from CDS.
  --tabix               annotation_files are tabix-compressed and indexed
                        (Default: False). Ignored for BigBed files.
  --sorted              annotation_files are sorted by chromosomal position
                        (Default: False)

BED-specific options:
  --bed_extra_columns BED_EXTRA_COLUMNS [BED_EXTRA_COLUMNS ...]
                        Number of extra columns in BED file (e.g. in custom
                        ENCODE formats) or list of names for those columns.
                        (Default: 0).
  --mask_bed_extra_columns MASK_BED_EXTRA_COLUMNS [MASK_BED_EXTRA_COLUMNS ...]
                        Number of extra columns in BED file (e.g. in custom
                        ENCODE formats) or list of names for those columns.
                        (Default: 0).

BigBed-specific options:
  --maxmem MAXMEM       Maximum desired memory footprint in MB to devote to
                        BigBed/BigWig files. May be exceeded by large queries.
                        (Default: 0, No maximum)
  --mask_maxmem MASK_MAXMEM
                        Maximum desired memory footprint in MB to devote to
                        BigBed/BigWig files. May be exceeded by large queries.
                        (Default: 0, No maximum)

GFF3-specific options:
  --gff_transcript_types GFF_TRANSCRIPT_TYPES [GFF_TRANSCRIPT_TYPES ...]
                        GFF3 feature types to include as transcripts, even if
                        no exons are present (for GFF3 only; default: use SO
                        v2.5.3 specification)
  --gff_exon_types GFF_EXON_TYPES [GFF_EXON_TYPES ...]
                        GFF3 feature types to include as exons (for GFF3 only;
                        default: use SO v2.5.3 specification)
  --gff_cds_types GFF_CDS_TYPES [GFF_CDS_TYPES ...]
                        GFF3 feature types to include as CDS (for GFF3 only;
                        default: use SO v2.5.3 specification)
  --mask_gff_transcript_types MASK_GFF_TRANSCRIPT_TYPES [MASK_GFF_TRANSCRIPT_TYPES ...]
                        GFF3 feature types to include as transcripts, even if
                        no exons are present (for GFF3 only; default: use SO
                        v2.5.3 specification)
  --mask_gff_exon_types MASK_GFF_EXON_TYPES [MASK_GFF_EXON_TYPES ...]
                        GFF3 feature types to include as exons (for GFF3 only;
                        default: use SO v2.5.3 specification)
  --mask_gff_cds_types MASK_GFF_CDS_TYPES [MASK_GFF_CDS_TYPES ...]
                        GFF3 feature types to include as CDS (for GFF3 only;
                        default: use SO v2.5.3 specification)

mask file options (optional):
  Add mask file(s) that annotate regions that should be excluded from analyses
  (e.g. repetitive genomic regions).

  --mask_annotation_files infile.[BED | BigBed | GTF2 | GFF3 | PSL] [infile.[BED | BigBed | GTF2 | GFF3 | PSL] ...]
                        Zero or more annotation files (max 1 file if BigBed)
  --mask_annotation_format {BED,BigBed,GTF2,GFF3,PSL}
                        Format of mask_annotation_files (Default: GTF2). Note:
                        GFF3 assembly assumes SO v.2.5.2 feature ontologies,
                        which may or may not match your specific file.
  --mask_add_three      If supplied, coding regions will be extended by 3
                        nucleotides at their 3' ends (except for GTF2 files
                        that explicitly include `stop_codon` features). Use if
                        your annotation file excludes stop codons from CDS.
  --mask_tabix          mask_annotation_files are tabix-compressed and indexed
                        (Default: False). Ignored for BigBed files.
  --mask_sorted         mask_annotation_files are sorted by chromosomal
                        position (Default: False)
usage: make_wiggle [-h] [-q] [-v]
                   [--count_files COUNT_FILES [COUNT_FILES ...]]
                   [--countfile_format {BAM,bigwig,bowtie,wiggle}]
                   [--normalize] [--sum SUM] [--min_length N] [--max_length N]
                   [--maxmem MAXMEM] [--big_genome] [--fiveprime_variable]
                   [--fiveprime] [--threeprime] [--center] [--offset OFFSET]
                   [--nibble N] -o FILENAME [--window_size N] [--color COLOR]
                   [-t TRACK_NAME] [--output_format {bedgraph,variable_step}]

------------------------------------------------------------------------------

Create genome browser tracks from read alignments, using
mapping rules to extract the biology of interest
(e.g. ribosomal P-sites, et c) from the alignments.

Output files
------------
Tracks can be output in wiggle and bedGraph formats. Because these formats
are unstranded, two files are created:

    OUTBASE_fw.wig
        Counts at each position for the plus/forward strand of each chromosome
    
    OUTBASE_rc.wig
        Counts at each position for the minus/reverse strand of each chromosome

where `OUTBASE` is given by the user.

See also
--------
/concepts/mapping_rules
    Explanations of mapping rules and why they can be useful

plastid.genomics.map_factories
    For lists of mapping rules and their parameters

------------------------------------------------------------------------------

optional arguments:
  -h, --help            show this help message and exit
  -o FILENAME, --out FILENAME
                        Base name for output files
  --window_size N       Size of nucleotides to fetch at once for export. Large
                        values are faster but require more memory (Default:
                        100000)

warning/error options:
  -q, --quiet           Suppress all warning messages. Cannot use with '-v'.
  -v, --verbose         Increase verbosity. With '-v', show every warning.
                        With '-vv', turn warnings into exceptions. Cannot use
                        with '-q'. (Default: show each type of warning once)

count & alignment file options:
  Open alignment or count files and optionally set mapping rules

  --count_files COUNT_FILES [COUNT_FILES ...]
                        One or more count or alignment file(s) from a single
                        sample or set of samples to be pooled.
  --countfile_format {BAM,bigwig,bowtie,wiggle}
                        Format of file containing alignments or counts
                        (Default: BAM)
  --normalize           Whether counts should be normalized to counts per
                        million (usually not. default: False)
  --sum SUM             Sum used in normalization of counts and RPKM/RPNT
                        calculations (Default: total mapped reads/counts in
                        dataset)
  --min_length N        Minimum read length required to be included (BAM &
                        bowtie files only. Default: 25)
  --max_length N        Maximum read length permitted to be included (BAM &
                        bowtie files only. Default: 100)
  --maxmem MAXMEM       Maximum desired memory footprint in MB to devote to
                        BigBed/BigWig files. May be exceeded by large queries.
                        (Default: 0, No maximum)
  --big_genome          Use slower but memory-efficient implementation for big
                        genomes or for memory-limited computers. For wiggle &
                        bowtie files only.

alignment mapping functions (BAM & bowtie files only):
  For BAM or bowtie files, one of the mutually exclusive read mapping functions
  is required:

  --fiveprime_variable  Map read alignment to a variable offset from 5'
                        position of read, with offset determined by read
                        length. Requires `--offset` below
  --fiveprime           Map read alignment to 5' position.
  --threeprime          Map read alignment to 3' position
  --center              Subtract N positions from each end of read, and add
                        1/(length-N), to each remaining position, where N is
                        specified by `--nibble`

filtering and alignment mapping options:
  
  The remaining arguments are optional and affect the behavior of specific
  mapping functions:

  --offset OFFSET       For `--fiveprime` or `--threeprime`, provide an
                        integer representing the offset into the read,
                        starting from either the 5' or 3' end, at which data
                        should be plotted. For `--fiveprime_variable`, provide
                        the filename of a two-column tab-delimited text file,
                        in which first column represents read length or the
                        special keyword `'default'`, and the second column
                        represents the offset from the five prime end of that
                        read length at which the read should be mapped.
                        (Default: 0)
  --nibble N            For use with `--center` only. nt to remove from each
                        end of read before mapping (Default: 0)

Browser track options:
  --color COLOR         An RGB hex string (`'#NNNNNN'`, `N` in `[0-9,A-F]`)
                        specifying the track color.
  -t TRACK_NAME, --track_name TRACK_NAME
                        Name to give browser track
  --output_format {bedgraph,variable_step}
                        Format of output file (Default: bedgraph)
usage: metagene [-h] {generate,count,chart} ...

------------------------------------------------------------------------------

Performs metagene analyses. The workflow is separated into the
following subprograms:

Generate
    A metagene profile is a position-wise average over all genes
    in the vicinity of an interesting landmark (e.g. a start codon). Because
    genes can have multiple transcript isoforms that may cover different
    genomic positions, which transcript positions (and therefore which
    genomic positions) to include in the average can be ambiguous when
    the isoforms are not knnow.
    
    To handle this problem, we define for each gene the maximal spanning window
    over which every position at a given distance from the landmark of interest
    (e.g. a start or stop codon) maps to the same genomic coordinates in all
    transcript isoforms. The windows are defined by the following algorithm: 
    
     #. Transcripts are grouped by gene.
    
     #. Landmarks are detected on each transcript for each gene. For genes in
        which all transcripts do not share the same genomic coordinate for the
        landmark of interest, no window can be defined, and that gene is
        excluded from further analysis.
    
     #. For each set of transcripts that passes step (2), the maximal spanning
        window is created by aligning the set of transcripts at the landmark, and
        bidirectionally growing the maximal spanning window until either:
        
           - the next nucleotide position added no longer corresponds to 
             the same genomic position in all transcripts
            
           - the window reaches the maximum user-specified size

    **Note**: if annotations are supplied as BED files, transcripts cannot be
    grouped by gene, because BED files don't contain this information.
    In this case one ROI is generated per transcript.
    
    
    .. Rubric :: Output files
    
    OUTBASE_rois.txt
        A tab-delimited text file describing the maximal spanning window for
        each gene, with columns as follows:
        
        ================   ==================================================
        **Column**         **Contains**
        ----------------   --------------------------------------------------

        alignment_offset   Offset to align window to all other windows in the
                           file, if the window happens to be shorter on the 5'
                           end than specified in ``--flank_upstream``. Typically
                           this is `0`.

        region_id          ID of region (e.g. gene) from which window was made
        
        region             maximal spanning window, formatted as
                           `chromosome:start-end:(strand)`
        
        window_size        with of window
        
        zero_point         distance from 5' end of window to landmark
        ================   ==================================================
        
    
    OUTBASE_rois.bed
        Maximal spanning windows in BED format for visualization in
        a genome browser. The thickly-rendered portion of a window
        indicates its landmark

    where `OUTBASE` is supplied by the user.
    
    
Count
    This program generates metagene profiles from a dataset of
    counts or alignments, taking the following steps:
    
     1. The **raw counts** at each position in each maximal spanning window
        (from the ``generate`` subprogram) fetched as a raw count vector for the
        window.

     2. A **normalized count vector** is created for each window by dividing
        its raw count vector by the total number of counts occurring within a
        user-defined normalization region within the window.
    
     3. A **metagene average** is created by taking aligning all of the
        normalized count vectors, and taking the median normalized counts
        over all vectors at each nucleotide position. Count vectors deriving
        from windows that don't meet a minimum count threshold (set via the
        ``--norm_region`` option) are excluded.
    
    
    .. Rubric :: Output files

    Raw count vectors, normalized count vectors, and metagene profiles are all
    saved as tab-delimited text files, for subsequent plotting, filtering,
    or reanalysis.
    
    OUTBASE_metagene_profile.txt
        Tab-delimited table of metagene profile, containing the following
        columns:

        ================   ==================================================
        **Column**         **Contains**
        ----------------   --------------------------------------------------
        x                  Distance in nucleotides from the landmark
        
        metagene_average   Value of metagene average at that position
        
        regions_counted    Number of maximal spanning windows included at
                           that position in the average. i.e. windows that
                           both met the threshold set by ``--min_counts`` and
                           were not masked at that position by a mask file
        ================   ==================================================        
        
    OUTBASE_rawcounts.txt
        Saved if ``--keep`` is specified. Table of raw counts. Each row is a
        maximal spanning window for a gene, and each column a nucleotide position
        in that window. All windows are aligned at the landmark.
    
    OUTBASE_normcounts.txt
        Saved if ``--keep`` is specified. Table of normalized counts, produced
        by dividing each row in the raw count table by the of counts in that
        row within the columns specified by ``--normalize_over``.

    OUTBASE_mask.txt
        Saved if ``--keep`` is specified. Matrix of masks indicating which
        cells in ``normcounts`` were excluded from computations.

    OUTBASE_metagene_overview.[png  svg  pdf | et c...]
        Metagene average plotted above a heatmap of normalized counts,
        in which each row of pixels is a maximal spanning window for a gene,
        and rows are sorted by the column in which they reach their
        max value. To facilitate visualization, colors in the heatmap are scaled
        from 0 to the 95th percentile of non-zero numbers in the normalized counts
        
    `OUTBASE` is supplied by the user.

    
Chart
    One or more metagene profiles generated by the ``count`` subprogram,
    for example, on different datasets, are plotted against each other. 

See command-line help for each subprogram for details on parameters for each

------------------------------------------------------------------------------

optional arguments:
  -h, --help            show this help message and exit

subcommands:
  choose one of the following

  {generate,count,chart}
    generate            Create ROI file from genome annotation
    count               Count reads falling into regions of interest,
                        normalize, and average into a metagene profile
    chart               Plot metagene profiles
usage: phase_by_size [-h] [-q] [-v]
                     [--annotation_files infile.[BED | BigBed | GTF2 | GFF3]
                     [infile.[BED | BigBed | GTF2 | GFF3] ...]]
                     [--annotation_format {BED,BigBed,GTF2,GFF3}]
                     [--add_three] [--tabix] [--sorted]
                     [--bed_extra_columns BED_EXTRA_COLUMNS [BED_EXTRA_COLUMNS ...]]
                     [--maxmem MAXMEM]
                     [--gff_transcript_types GFF_TRANSCRIPT_TYPES [GFF_TRANSCRIPT_TYPES ...]]
                     [--gff_exon_types GFF_EXON_TYPES [GFF_EXON_TYPES ...]]
                     [--gff_cds_types GFF_CDS_TYPES [GFF_CDS_TYPES ...]]
                     [--count_files COUNT_FILES [COUNT_FILES ...]]
                     [--countfile_format {BAM}] [--sum SUM] [--min_length N]
                     [--max_length N] [--fiveprime_variable] [--fiveprime]
                     [--threeprime] [--center] [--offset OFFSET] [--nibble N]
                     [--figformat {eps,jpeg,jpg,pdf,pgf,png,ps,raw,rgba,svg,svgz,tif,tiff}]
                     [--figsize N N] [--title TITLE] [--cmap CMAP] [--dpi DPI]
                     [--stylesheet {Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}]
                     [--codon_buffer CODON_BUFFER]
                     [roi_file] outbase

------------------------------------------------------------------------------

Estimate sub-codon phasing in a ribosome profiling dataset,
stratified by read length.

Because ribosomes step three nucleotides in each cycle of translation elongation,
in many ribosome profiling datasets a triplet periodicity is observable
in the distribution of ribosome-protected footprints.

In a good dataset, 70-90% of the reads on a codon fall within the first of the
three codon positions. This allows deduction of translation reading frames, if
the reading frame is not known *a priori.* See Ingolia2009 for more
details.

Output files
------------
    OUTBASE_phasing.txt
        Read phasing for each read length

    OUTBASE_phasing.svg
        Plot of phasing by read length

where `OUTBASE` is supplied by the user.

 .. note::

    To avoid double-counting of codons, users should either use an *ROI file*
    made by the ``generate`` subprogram of the metagene script, or supply
    an annotation file that includes only one transcript isoform per
    gene.

------------------------------------------------------------------------------

positional arguments:
  roi_file              Optional. ROI file of maximal spanning windows
                        surrounding start codons, from ``metagene generate``
                        subprogram. Using this instead of `--annotation_files`
                        prevents double-counting of codons when multiple
                        transcript isoforms exist for a gene. See the
                        documentation for `metagene` for more info about ROI
                        files.If an ROI file is not given, supply an
                        annotation with ``--annotation_files``
  outbase               Required. Basename for output files

optional arguments:
  -h, --help            show this help message and exit
  --codon_buffer CODON_BUFFER
                        Codons before and after start codon to ignore
                        (Default: 5)

warning/error options:
  -q, --quiet           Suppress all warning messages. Cannot use with '-v'.
  -v, --verbose         Increase verbosity. With '-v', show every warning.
                        With '-vv', turn warnings into exceptions. Cannot use
                        with '-q'. (Default: show each type of warning once)

annotation file options (one or more annotation files required):
  Open one or more genome annotation files

  --annotation_files infile.[BED | BigBed | GTF2 | GFF3] [infile.[BED | BigBed | GTF2 | GFF3] ...]
                        Zero or more annotation files (max 1 file if BigBed)
  --annotation_format {BED,BigBed,GTF2,GFF3}
                        Format of annotation_files (Default: GTF2). Note: GFF3
                        assembly assumes SO v.2.5.2 feature ontologies, which
                        may or may not match your specific file.
  --add_three           If supplied, coding regions will be extended by 3
                        nucleotides at their 3' ends (except for GTF2 files
                        that explicitly include `stop_codon` features). Use if
                        your annotation file excludes stop codons from CDS.
  --tabix               annotation_files are tabix-compressed and indexed
                        (Default: False). Ignored for BigBed files.
  --sorted              annotation_files are sorted by chromosomal position
                        (Default: False)

BED-specific options:
  --bed_extra_columns BED_EXTRA_COLUMNS [BED_EXTRA_COLUMNS ...]
                        Number of extra columns in BED file (e.g. in custom
                        ENCODE formats) or list of names for those columns.
                        (Default: 0).

BigBed-specific options:
  --maxmem MAXMEM       Maximum desired memory footprint in MB to devote to
                        BigBed/BigWig files. May be exceeded by large queries.
                        (Default: 0, No maximum)

GFF3-specific options:
  --gff_transcript_types GFF_TRANSCRIPT_TYPES [GFF_TRANSCRIPT_TYPES ...]
                        GFF3 feature types to include as transcripts, even if
                        no exons are present (for GFF3 only; default: use SO
                        v2.5.3 specification)
  --gff_exon_types GFF_EXON_TYPES [GFF_EXON_TYPES ...]
                        GFF3 feature types to include as exons (for GFF3 only;
                        default: use SO v2.5.3 specification)
  --gff_cds_types GFF_CDS_TYPES [GFF_CDS_TYPES ...]
                        GFF3 feature types to include as CDS (for GFF3 only;
                        default: use SO v2.5.3 specification)

count & alignment file options:
  Open alignment or count files and optionally set mapping rules

  --count_files COUNT_FILES [COUNT_FILES ...]
                        One or more count or alignment file(s) from a single
                        sample or set of samples to be pooled.
  --countfile_format {BAM}
                        Format of file containing alignments or counts
                        (Default: BAM)
  --sum SUM             Sum used in normalization of counts and RPKM/RPNT
                        calculations (Default: total mapped reads/counts in
                        dataset)
  --min_length N        Minimum read length required to be included (BAM &
                        bowtie files only. Default: 25)
  --max_length N        Maximum read length permitted to be included (BAM &
                        bowtie files only. Default: 100)

alignment mapping functions (BAM & bowtie files only):
  For BAM or bowtie files, one of the mutually exclusive read mapping functions
  is required:

  --fiveprime_variable  Map read alignment to a variable offset from 5'
                        position of read, with offset determined by read
                        length. Requires `--offset` below
  --fiveprime           Map read alignment to 5' position.
  --threeprime          Map read alignment to 3' position
  --center              Subtract N positions from each end of read, and add
                        1/(length-N), to each remaining position, where N is
                        specified by `--nibble`

filtering and alignment mapping options:
  
  The remaining arguments are optional and affect the behavior of specific
  mapping functions:

  --offset OFFSET       For `--fiveprime` or `--threeprime`, provide an
                        integer representing the offset into the read,
                        starting from either the 5' or 3' end, at which data
                        should be plotted. For `--fiveprime_variable`, provide
                        the filename of a two-column tab-delimited text file,
                        in which first column represents read length or the
                        special keyword `'default'`, and the second column
                        represents the offset from the five prime end of that
                        read length at which the read should be mapped.
                        (Default: 0)
  --nibble N            For use with `--center` only. nt to remove from each
                        end of read before mapping (Default: 0)

Plotting options:
  --figformat {eps,jpeg,jpg,pdf,pgf,png,ps,raw,rgba,svg,svgz,tif,tiff}
                        File format for figure(s); Default: png)
  --figsize N N         Figure width and height, in inches. (Default: use
                        matplotlibrc params)
  --title TITLE         Base title for plot(s).
  --cmap CMAP           Matplotlib color map from which palette will be made
                        (e.g. 'Blues','autumn','Set1'; default: use colors
                        from ``--stylesheet`` if given, or color cycle in
                        matplotlibrc)
  --dpi DPI             Figure resolution (Default: 150)
  --stylesheet {Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}
                        Use this matplotlib stylesheet instead of matplotlibrc
                        params
usage: psite [-h] [-q] [-v] [--count_files COUNT_FILES [COUNT_FILES ...]]
             [--countfile_format {BAM}] [--sum SUM] [--min_length N]
             [--max_length N]
             [--figformat {eps,jpeg,jpg,pdf,pgf,png,ps,raw,rgba,svg,svgz,tif,tiff}]
             [--figsize N N] [--title TITLE] [--cmap CMAP] [--dpi DPI]
             [--stylesheet {Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}]
             [--min_counts N] [--normalize_over N N] [--norm_region N N]
             [--require_upstream] [--constrain X X] [--aggregate] [--keep]
             [--default DEFAULT]
             roi_file outbase

------------------------------------------------------------------------------

This script estimates P-site offsets, stratified by read length,
in a ribosome profiling dataset. To do so, read alignments are mapped to
their fiveprime ends, and a metagene profile surrounding the start 
codon is calculated separately for each read length.

The start codon peak for each read length is heuristically identified as the
largest peak upstream of the start codon, or within a region defined by the user.
The distance between that peak and the start codon itself is taken to be the
P-site offset for that read length.

Notes
------
Generate an *ROI file first*
    This script requires an ROI file of maximal spanning windows
    surrounding each gene's start codon. This file can be generated by the
    ``generate`` subprogram of the metagene script.
    
Check the data
    Users should examine the graphical output to make sure the P-site estimates
    are reasonable, because if clear start codon peaks are not present in the
    data, the algorithm described above will have trouble.

For RNase I only
    This algorithm presumes that the RNase used to prepare the ribosome-protected
    footprints has no appreciable cutting bias, so that footprints may be
    clearly resolved to the edge of the ribosome.

Output files
------------
    OUTBASE_p_offsets.txt
        Tab-delimited text file with two columns. The first is read length,
        and the second the offset from the fiveprime end of that read length
        to the ribosomal P-site. This table can be supplied as the argument 
        for ``--offset`` when using ``--fiveprime_variable`` mapping in any
        of the other scripts in plastid.bin

    OUTBASE_p_offsets.[svg  png  pdf | et c]
        Plot of metagene profiles for each read length, when reads are mapped
        to their 5' ends, P-site offsets are applied.

    OUTBASE_metagene_profiles.txt
        Metagene profiles, stratified by read length, before P-site offsets
        are applied.

    OUTBASE_K_rawcounts.txt
        Saved if ``--keep`` is given on command line. Raw count vectors for each
        metagene window specified in input ROI file, without P-site
        mapping rules applied, for reads of length `K`

    OUTBASE_K_normcounts.txt
        Saved if ``--keep`` is given on command line. Normalized count vectors
        for each metagene window specified in input ROI file, without P-site
        mapping rules applied, for reads of length `K`

where `OUTBASE` is supplied by the user.

------------------------------------------------------------------------------

positional arguments:
  roi_file              ROI file surrounding start codons, from ``metagene
                        generate`` subprogram
  outbase               Basename for output files

optional arguments:
  -h, --help            show this help message and exit
  --min_counts N        Minimum counts required in normalization region to be
                        included in metagene average (Default: 10)
  --normalize_over N N  Portion of each window against which its individual
                        raw count profile will be normalized. Specify two
                        integers, in nucleotide distance from landmark
                        (negative for upstream, positive for downstream.
                        Surround negative numbers with quotes.). (Default: 20
                        50)
  --norm_region N N     Deprecated. Use ``--normalize_over`` instead.
                        Formerly, Portion of each window against which its
                        individual raw count profile will be normalized.
                        Specify two integers, in nucleotide distance, from 5'
                        end of window. (Default: 70 100)
  --require_upstream    If supplied, the P-site offset is taken to be the
                        distance between the largest peak upstream of the
                        start codon and the start codon itself. Otherwise, the
                        P-site offset is taken to be the distance between the
                        largest peak in the entire ROI and the start codon.
                        Ignored if ``--constrain`` is used.
  --constrain X X       Constrain P-site offset to be between specified
                        distance from start codon. Useful for noisy data.
                        (Reasonable set: 10 15; default: not constrained)
  --aggregate           Estimate P-site from aggregate reads at each position,
                        instead of median normalized read density. Noisier,
                        but helpful for lower-count data or read lengths with
                        few counts. (Default: False)
  --keep                Save intermediate count files. Useful for additional
                        computations (Default: False)
  --default DEFAULT     Default 5' P-site offset for read lengths that are not
                        present or evaluated in the dataset. Unaffected by
                        ``--constrain`` (Default: 13)

warning/error options:
  -q, --quiet           Suppress all warning messages. Cannot use with '-v'.
  -v, --verbose         Increase verbosity. With '-v', show every warning.
                        With '-vv', turn warnings into exceptions. Cannot use
                        with '-q'. (Default: show each type of warning once)

count & alignment file options:
  Open alignment or count files and optionally set mapping rules

  --count_files COUNT_FILES [COUNT_FILES ...]
                        One or more count or alignment file(s) from a single
                        sample or set of samples to be pooled.
  --countfile_format {BAM}
                        Format of file containing alignments or counts
                        (Default: BAM)
  --sum SUM             Sum used in normalization of counts and RPKM/RPNT
                        calculations (Default: total mapped reads/counts in
                        dataset)
  --min_length N        Minimum read length required to be included (BAM &
                        bowtie files only. Default: 25)
  --max_length N        Maximum read length permitted to be included (BAM &
                        bowtie files only. Default: 100)

Plotting options:
  --figformat {eps,jpeg,jpg,pdf,pgf,png,ps,raw,rgba,svg,svgz,tif,tiff}
                        File format for figure(s); Default: png)
  --figsize N N         Figure width and height, in inches. (Default: use
                        matplotlibrc params)
  --title TITLE         Base title for plot(s).
  --cmap CMAP           Matplotlib color map from which palette will be made
                        (e.g. 'Blues','autumn','Set1'; default: use colors
                        from ``--stylesheet`` if given, or color cycle in
                        matplotlibrc)
  --dpi DPI             Figure resolution (Default: 150)
  --stylesheet {Solarize_Light2,_classic_test_patch,bmh,classic,dark_background,fast,fivethirtyeight,ggplot,grayscale,seaborn,seaborn-bright,seaborn-colorblind,seaborn-dark,seaborn-dark-palette,seaborn-darkgrid,seaborn-deep,seaborn-muted,seaborn-notebook,seaborn-paper,seaborn-pastel,seaborn-poster,seaborn-talk,seaborn-ticks,seaborn-white,seaborn-whitegrid,tableau-colorblind10}
                        Use this matplotlib stylesheet instead of matplotlibrc
                        params
usage: crossmap [-h] [-q] [-v]
                [--sequence_file infile.[fasta | fastq | twobit | genbank | embl]]
                [--sequence_format {fasta,fastq,twobit,genbank,embl}]
                [-k READ_LENGTH] [--offset OFFSET] [--mismatches N]
                [--bowtie BOWTIE] [--have_kmers] [--save_kmers] [-p N]
                ebwt outbase

------------------------------------------------------------------------------

This script empirically determines which positions in a genome yield 
multimapping reads under a given set of alignment parameters. These positions
are saved in a BED-formatted mask file, so that they may be excluded
as from further analyses.

To identify multimapping regions, a genome sequence is diced into :term:`k-mers
<k-mer>` and the k-mers aligned back to the genome. Positions in the
genome that give rise to k-mers that align equally well to more
than one genomic location are then marked as multimapping..

`k` is specified by the user, as are the alignment parameters.

Output files
------------
The following files are made:

    OUTBASE_READLENGTH_MISMATCHES_crossmap.bed
        Final mask file annotation, in BED format

    OUTBASE_READLENGTH_MISMATCHES_CHROMOSOME_kmers.fa
        K-mers derived from chromosome `CHROMOSOME`. These
        files can be reused in subsequent runs allowing a different number of
        mismatches, using the ``--have_kmers`` option

where:

  - `OUTBASE` is a name meaningful to the user
  - `READLENGTH` is the k-mer length chosen by the user
  - `MISMATCHES` is the number of mismatches permitted during alignment,
    also set by the user.

Considerations for large genomes
--------------------------------

For large genomes (e.g. vertebrate, plant, or some *very* big amoebas):

  - crossmap can require a ton of memory if genome sequence is stored 
    in a fasta file. If crossmap maxes out your system's memory, it may
    be terminated by your system before it completes.

    Consider converting the file to a 2bit file to save memory and
    avoid this potential problem

  - Enabling mismatches with short read sizes will make crossmap take
    a lot longer, especially on large genomes. Consider using ``--mismatches
    0`` if you run into this problem 

  - Using multiple processes (e.g. via ``-p 2``) will speed crossmap's
    execution time, but will increase its memory footprint, as each process
    will need its own memory space to create and align k-mers from chromosomal
    sequence

  - By default, crossmap creates BED files. Consider converting these to
    BigBed files will save substantial amounts of time and memory in the future.

    This can be achieved using Jim Kent's ``bedToBigBed`` utility as follows
    (from the terminal)::

        $ bowtie-inspect --summary BOWTIE_INDEX  grep Sequence \
                         cut -f2,3 | sed -e "s/\([^ ]\+\).*\t/\1\t/"  >OUTFILE.sizes
        $ sort -k1,1 -k2,2n OUTBASE.bed > OUTBASE_sorted.bed
        $ bedToBigBed OUTBASE_sorted.bed OUTBASE.sizes OUTBASE_sorted.bb

    See https://github.com/ENCODE-DCC/kentUtils/tree/master/src/product/scripts
    for download & documentation of Kent utilities

------------------------------------------------------------------------------

positional arguments:
  ebwt                  Bowtie index of genome against which crossmap will be
                        made. In most cases, should be generated from the same
                        sequences that are in `sequence_file`.
  outbase               Basename for output files

optional arguments:
  -h, --help            show this help message and exit
  -k READ_LENGTH        K-mer length to generate from input file. (Default:
                        29)
  --offset OFFSET       Offset from 5' end of plus-strand read at which to
                        attribute score (Default: 14)
  --mismatches N        Number of mismatches tolerated in alignment. (Default:
                        0)
  --bowtie BOWTIE       Location of bowtie binary (Default:
                        ``/usr/local/bin/bowtie``)
  --have_kmers          If specified, use k-mer files from previous run. In
                        this case 'sequence_file' should be the value
                        'outbase' from the k-mer files you want to use.
  --save_kmers          Save k-mer files for reuse in a subsequent run.
  -p N, --processes N   Number of processes to use (should be <= number of
                        chromosomes

warning/error options:
  -q, --quiet           Suppress all warning messages. Cannot use with '-v'.
  -v, --verbose         Increase verbosity. With '-v', show every warning.
                        With '-vv', turn warnings into exceptions. Cannot use
                        with '-q'. (Default: show each type of warning once)

sequence options:

  --sequence_file infile.[fasta | fastq | twobit | genbank | embl]
                        A file of DNA sequence
  --sequence_format {fasta,fastq,twobit,genbank,embl}
                        Format of sequence_file (Default: fasta).
usage: gff_parent_types [-h] [-q] [-v] [--exclude EXCLUDE [EXCLUDE ...]]
                        infile.gff outfile.txt

------------------------------------------------------------------------------

Exports a table of parent-child feature relationships for all feature types
found in a GFF3 file. Features with multiple parents are sorted into a category
called `Multiple`.

------------------------------------------------------------------------------

positional arguments:
  infile.gff            Input GFF3 file
  outfile.txt           Name of output file

optional arguments:
  -h, --help            show this help message and exit
  --exclude EXCLUDE [EXCLUDE ...]
                        Feature types to exclude from consideration

warning/error options:
  -q, --quiet           Suppress all warning messages. Cannot use with '-v'.
  -v, --verbose         Increase verbosity. With '-v', show every warning.
                        With '-vv', turn warnings into exceptions. Cannot use
                        with '-q'. (Default: show each type of warning once)
usage: reformat_transcripts [-h] [-q] [-v]
                            [--annotation_files infile.[BED | BigBed | GTF2 | GFF3]
                            [infile.[BED | BigBed | GTF2 | GFF3] ...]]
                            [--annotation_format {BED,BigBed,GTF2,GFF3}]
                            [--add_three] [--tabix] [--sorted]
                            [--bed_extra_columns BED_EXTRA_COLUMNS [BED_EXTRA_COLUMNS ...]]
                            [--maxmem MAXMEM]
                            [--gff_transcript_types GFF_TRANSCRIPT_TYPES [GFF_TRANSCRIPT_TYPES ...]]
                            [--gff_exon_types GFF_EXON_TYPES [GFF_EXON_TYPES ...]]
                            [--gff_cds_types GFF_CDS_TYPES [GFF_CDS_TYPES ...]]
                            [--no_escape] [--output_format {BED,GTF2}]
                            [--extra_columns EXTRA_COLUMNS [EXTRA_COLUMNS ...]]
                            [--empty_value EMPTY_VALUE]
                            outfile.[bed | gtf]

------------------------------------------------------------------------------

Convert transcripts from BED, BigBed, GTF2, GFF3, or PSL format
to BED, extended BED, or GTF2 format.

 .. note::

    GFF3 schemas vary
        Different GFF3s have different schemas of hierarchy. By default, we
        assume the ontology used by the Sequence Ontology consortium. Users
        that require a different schema may supply `transcript_types` and
        `exon_types`, to indicate which sorts of features should be included.

    Identity relationships between elements vary between GFF3 files
        GFF3 files can represent discontiguous features using two strategies. In 
        one strategy, the exons of a transcript have unique IDs, but will share
        contain the same parent ID in their same `Parent` attribute in column 9
        of the GFF. In another strategy different exons of the same transcript
        simply share the same ID, and don't define a `Parent`. Here, both schemes
        are accepted, although what happens if they conflict within a single
        transcript is undefined.

------------------------------------------------------------------------------

positional arguments:
  outfile.[ bed | gtf ]
                        Output file

optional arguments:
  -h, --help            show this help message and exit
  --no_escape           If specified and output format is GTF2, special
                        characters in column 9 will be escaped (default: True)
  --output_format {BED,GTF2}
                        Format of output file. (default: GTF2)
  --extra_columns EXTRA_COLUMNS [EXTRA_COLUMNS ...]
                        Attributes (e.g. 'gene_id' to output as extra columns
                        in extended BED format (BED output only).
  --empty_value EMPTY_VALUE
                        Value to use of an attribute in `extra_columns` is not
                        defined for a particular record (Default: 'na'

warning/error options:
  -q, --quiet           Suppress all warning messages. Cannot use with '-v'.
  -v, --verbose         Increase verbosity. With '-v', show every warning.
                        With '-vv', turn warnings into exceptions. Cannot use
                        with '-q'. (Default: show each type of warning once)

annotation file options (one or more annotation files required):
  Open one or more genome annotation files

  --annotation_files infile.[BED | BigBed | GTF2 | GFF3] [infile.[BED | BigBed | GTF2 | GFF3] ...]
                        Zero or more annotation files (max 1 file if BigBed)
  --annotation_format {BED,BigBed,GTF2,GFF3}
                        Format of annotation_files (Default: GTF2). Note: GFF3
                        assembly assumes SO v.2.5.2 feature ontologies, which
                        may or may not match your specific file.
  --add_three           If supplied, coding regions will be extended by 3
                        nucleotides at their 3' ends (except for GTF2 files
                        that explicitly include `stop_codon` features). Use if
                        your annotation file excludes stop codons from CDS.
  --tabix               annotation_files are tabix-compressed and indexed
                        (Default: False). Ignored for BigBed files.
  --sorted              annotation_files are sorted by chromosomal position
                        (Default: False)

BED-specific options:
  --bed_extra_columns BED_EXTRA_COLUMNS [BED_EXTRA_COLUMNS ...]
                        Number of extra columns in BED file (e.g. in custom
                        ENCODE formats) or list of names for those columns.
                        (Default: 0).

BigBed-specific options:
  --maxmem MAXMEM       Maximum desired memory footprint in MB to devote to
                        BigBed/BigWig files. May be exceeded by large queries.
                        (Default: 0, No maximum)

GFF3-specific options:
  --gff_transcript_types GFF_TRANSCRIPT_TYPES [GFF_TRANSCRIPT_TYPES ...]
                        GFF3 feature types to include as transcripts, even if
                        no exons are present (for GFF3 only; default: use SO
                        v2.5.3 specification)
  --gff_exon_types GFF_EXON_TYPES [GFF_EXON_TYPES ...]
                        GFF3 feature types to include as exons (for GFF3 only;
                        default: use SO v2.5.3 specification)
  --gff_cds_types GFF_CDS_TYPES [GFF_CDS_TYPES ...]
                        GFF3 feature types to include as CDS (for GFF3 only;
                        default: use SO v2.5.3 specification)
usage: findjuncs [-h] [-q] [-v]
                 [--annotation_files infile.[BED | BigBed | GTF2 | GFF3 | PSL]
                 [infile.[BED | BigBed | GTF2 | GFF3 | PSL] ...]]
                 [--annotation_format {BED,BigBed,GTF2,GFF3,PSL}]
                 [--add_three] [--tabix] [--sorted]
                 [--bed_extra_columns BED_EXTRA_COLUMNS [BED_EXTRA_COLUMNS ...]]
                 [--maxmem MAXMEM]
                 [--gff_transcript_types GFF_TRANSCRIPT_TYPES [GFF_TRANSCRIPT_TYPES ...]]
                 [--gff_exon_types GFF_EXON_TYPES [GFF_EXON_TYPES ...]]
                 [--gff_cds_types GFF_CDS_TYPES [GFF_CDS_TYPES ...]]
                 [--export_tophat]
                 outbase

------------------------------------------------------------------------------

This script identify all the unique splice junctions in one or more transcript
annotations, and exports these as a BED file with one splice junction per line
Optionally, this script can also export junctions as a Tophat ``.juncs`` file.

If a splice junction appears multiple times (e.g. used by more than one transcript),
only the first occurrence of the junction will be reported. Scores, if present,
are exported unaltered in BED output.

Examples:

.. code-block:: shell

   # identify splice junctions from a transcript annotation supplied in GTF2
   # creates output file 'annotation.bed'
   $ findjuncs my_annotation --annotation_format GTF2 \
               --annotation_files transcripts.gtf
    
   # merge unique annotations from annotation.bed and newly_discovered.bed,
   # export only unique junctions to 'merged_unique.bed'
   $ findjuncs merged_unique --annotation_format BED \
               --annotation_files annotation.bed newly_discovered.bed

See also
--------
plastid.bin.slidejuncs
   Script that makes richer comparisons between discovered and annotated
   junctions, using genomic sequence and plastid.bin.crossmap
   results to classify junctions

------------------------------------------------------------------------------

positional arguments:
  outbase               Basename for output files

optional arguments:
  -h, --help            show this help message and exit
  --export_tophat       Export tophat `.juncs` file in addition to BED output

warning/error options:
  -q, --quiet           Suppress all warning messages. Cannot use with '-v'.
  -v, --verbose         Increase verbosity. With '-v', show every warning.
                        With '-vv', turn warnings into exceptions. Cannot use
                        with '-q'. (Default: show each type of warning once)

annotation file options (one or more annotation files required):
  Open one or more genome annotation files

  --annotation_files infile.[BED | BigBed | GTF2 | GFF3 | PSL] [infile.[BED | BigBed | GTF2 | GFF3 | PSL] ...]
                        Zero or more annotation files (max 1 file if BigBed)
  --annotation_format {BED,BigBed,GTF2,GFF3,PSL}
                        Format of annotation_files (Default: GTF2). Note: GFF3
                        assembly assumes SO v.2.5.2 feature ontologies, which
                        may or may not match your specific file.
  --add_three           If supplied, coding regions will be extended by 3
                        nucleotides at their 3' ends (except for GTF2 files
                        that explicitly include `stop_codon` features). Use if
                        your annotation file excludes stop codons from CDS.
  --tabix               annotation_files are tabix-compressed and indexed
                        (Default: False). Ignored for BigBed files.
  --sorted              annotation_files are sorted by chromosomal position
                        (Default: False)

BED-specific options:
  --bed_extra_columns BED_EXTRA_COLUMNS [BED_EXTRA_COLUMNS ...]
                        Number of extra columns in BED file (e.g. in custom
                        ENCODE formats) or list of names for those columns.
                        (Default: 0).

BigBed-specific options:
  --maxmem MAXMEM       Maximum desired memory footprint in MB to devote to
                        BigBed/BigWig files. May be exceeded by large queries.
                        (Default: 0, No maximum)

GFF3-specific options:
  --gff_transcript_types GFF_TRANSCRIPT_TYPES [GFF_TRANSCRIPT_TYPES ...]
                        GFF3 feature types to include as transcripts, even if
                        no exons are present (for GFF3 only; default: use SO
                        v2.5.3 specification)
  --gff_exon_types GFF_EXON_TYPES [GFF_EXON_TYPES ...]
                        GFF3 feature types to include as exons (for GFF3 only;
                        default: use SO v2.5.3 specification)
  --gff_cds_types GFF_CDS_TYPES [GFF_CDS_TYPES ...]
                        GFF3 feature types to include as CDS (for GFF3 only;
                        default: use SO v2.5.3 specification)
usage: slidejuncs [-h] [-q] [-v]
                  [--sequence_file infile.[fasta | fastq | twobit | genbank | embl]]
                  [--sequence_format {fasta,fastq,twobit,genbank,embl}]
                  [--mask_annotation_files infile.[BED | BigBed | GTF2 | GFF3 | PSL]
                  [infile.[BED | BigBed | GTF2 | GFF3 | PSL] ...]]
                  [--mask_annotation_format {BED,BigBed,GTF2,GFF3,PSL}]
                  [--mask_add_three] [--mask_tabix] [--mask_sorted]
                  [--mask_bed_extra_columns MASK_BED_EXTRA_COLUMNS [MASK_BED_EXTRA_COLUMNS ...]]
                  [--mask_maxmem MASK_MAXMEM]
                  [--mask_gff_transcript_types MASK_GFF_TRANSCRIPT_TYPES [MASK_GFF_TRANSCRIPT_TYPES ...]]
                  [--mask_gff_exon_types MASK_GFF_EXON_TYPES [MASK_GFF_EXON_TYPES ...]]
                  [--mask_gff_cds_types MASK_GFF_CDS_TYPES [MASK_GFF_CDS_TYPES ...]]
                  [--maxslide MAXSLIDE] [--ref ref.bed] [--slide_canonical]
                  input.bed outbase

------------------------------------------------------------------------------

Compare splice junctions discovered in a dataset to those in an annotation
of known splice junctions, amending misplaced junctions, and identifying 
junctions that fall within repetitive areas of the genome.

Known splice junctions can be misidentified as novel or non-canonical junctions
when intronic sequence immediately downstream of the fiveprime splice site
exactly matches the exonic sequence immediately downstream of the threeprime
splice site. In fact, the junction point could appear anywhere in this
locally-repeated region with equal support from sequencing data. For example,
suppose we have a splice junction as follows::

        
                Exon 1 [0,6)            Intron                                  Exon 2 [16,24)
                ---------------------   --------------------------------------  ------------------------------
    Sequence    G   C   T   C   T   A   C   T   A   G   N   N   N   C   T   A   C   T   A   G   A   T   G   G
    Position    0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23
    Repeated                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
In this case, the splice junction could be moved 3 bases to the left, or
four bases to the right, without losing consistency with the sequence of
any cDNA or read alignment covering the junction.
   
To identify this and other causes of false positive splice junction calls,
the following operations are performed on each query junction:

    1.  If a mask file from crossmap
        is provided, junctions in which one or more of the 5' and 3' splice
        sites appear in a repetitive region of the genome are flagged as
        non-informative and written to a separate file. 

    2.  For remaining splice junctions, the extent of locally repeated nucleotide
        sequence, if any, surrounding the query junction's splice donor and
        acceptor sites, are determined in both the 5' and 3' directions.
        
        This is the maximum window (*equal-support region*) across which the
        actual splice junction could be moved without reducing sequence support.
    
    3.  If there is one or more known splice junctions in this region, the
        query junction is assumed to match these, and the known junctions are
        reported rather than the query. 
    
    4.  If (3) is not satisfied, and the query junction is a canonical splice
        junction, it is reported as is.

    5.  If (3) is not satisfied, and the query junction represents a non-canonical
        splice junction, the program determines if one or more canonical splice
        junctions is present in the equal-support region. If so, these canonical
        splice junction are reported rather than the query junction.
        
    6.  If (5) is not satisfied, the non-canonical query junction is reported as-is.

Output files
------------
The following files are written, where `OUTBASE` is a string supplied by the
user. Scores of splice junctions, if present in the input, are ignored.
Each record in each BED file represents a single exon-exon junction, rather
than a transcript:

    OUTBASE_repetitive.bed
        Splice junctions in which one or more of the splice sites lands
        in a repetitive/degenerate region of the genome, which gives rise to
        mapping ambiguities (step 1 above)
    
    OUTBASE_shifted_known.bed
        The result of shifting query splice junctions to known splice junctions
        with equal sequence support (step 3 above)
    
    OUTBASE_shifted_canonical.bed
        The result of shifting non-canonical query splice junctions to canonical
        splice junctions with equal sequence support (step 5 above)
    
    OUTBASE_untouched.bed
        Query junctions reported without changes (steps 4 and 6 above)

where `OUTBASE` is given by the user.

------------------------------------------------------------------------------

positional arguments:
  input.bed             BED file describing discovered junctions
  outbase               Basename for output files

optional arguments:
  -h, --help            show this help message and exit
  --maxslide MAXSLIDE   Maximum number of nt to search 5' and 3' of intron
                        boundaries (Default: 10)
  --ref ref.bed         Reference file describing known splice junctions
  --slide_canonical     Slide junctions to canonical junctions if present
                        within equal support region

warning/error options:
  -q, --quiet           Suppress all warning messages. Cannot use with '-v'.
  -v, --verbose         Increase verbosity. With '-v', show every warning.
                        With '-vv', turn warnings into exceptions. Cannot use
                        with '-q'. (Default: show each type of warning once)

sequence options:

  --sequence_file infile.[fasta | fastq | twobit | genbank | embl]
                        A file of DNA sequence
  --sequence_format {fasta,fastq,twobit,genbank,embl}
                        Format of sequence_file (Default: fasta).

mask file options (optional):
  Add mask file(s) that annotate regions that should be excluded from analyses
  (e.g. repetitive genomic regions).

  --mask_annotation_files infile.[BED | BigBed | GTF2 | GFF3 | PSL] [infile.[BED | BigBed | GTF2 | GFF3 | PSL] ...]
                        Zero or more annotation files (max 1 file if BigBed)
  --mask_annotation_format {BED,BigBed,GTF2,GFF3,PSL}
                        Format of mask_annotation_files (Default: GTF2). Note:
                        GFF3 assembly assumes SO v.2.5.2 feature ontologies,
                        which may or may not match your specific file.
  --mask_add_three      If supplied, coding regions will be extended by 3
                        nucleotides at their 3' ends (except for GTF2 files
                        that explicitly include `stop_codon` features). Use if
                        your annotation file excludes stop codons from CDS.
  --mask_tabix          mask_annotation_files are tabix-compressed and indexed
                        (Default: False). Ignored for BigBed files.
  --mask_sorted         mask_annotation_files are sorted by chromosomal
                        position (Default: False)

BED-specific options:
  --mask_bed_extra_columns MASK_BED_EXTRA_COLUMNS [MASK_BED_EXTRA_COLUMNS ...]
                        Number of extra columns in BED file (e.g. in custom
                        ENCODE formats) or list of names for those columns.
                        (Default: 0).

BigBed-specific options:
  --mask_maxmem MASK_MAXMEM
                        Maximum desired memory footprint in MB to devote to
                        BigBed/BigWig files. May be exceeded by large queries.
                        (Default: 0, No maximum)

GFF3-specific options:
  --mask_gff_transcript_types MASK_GFF_TRANSCRIPT_TYPES [MASK_GFF_TRANSCRIPT_TYPES ...]
                        GFF3 feature types to include as transcripts, even if
                        no exons are present (for GFF3 only; default: use SO
                        v2.5.3 specification)
  --mask_gff_exon_types MASK_GFF_EXON_TYPES [MASK_GFF_EXON_TYPES ...]
                        GFF3 feature types to include as exons (for GFF3 only;
                        default: use SO v2.5.3 specification)
  --mask_gff_cds_types MASK_GFF_CDS_TYPES [MASK_GFF_CDS_TYPES ...]
                        GFF3 feature types to include as CDS (for GFF3 only;
                        default: use SO v2.5.3 specification)

Resource usage statistics from testing plastid:
   Process count: 3
   CPU time: Sys=0:00:01.0, User=0:00:05.0
   Memory: 126.4M
   Disk usage: 20B
   Time elapsed: 0:00:18.5


TEST END: plastid-0.5.1-py39hd1f1204_3.tar.bz2
--dirty flag and --keep-old-work not specified. Removing build/test folder after successful build/test.

