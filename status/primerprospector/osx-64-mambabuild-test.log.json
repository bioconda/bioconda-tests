Updating build index: /Users/runner/conda/conda-bld

TEST START: primerprospector-1.0.1-py27_1.tar.bz2
Adding in variants from internal_defaults
Adding in variants from /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmpxn7s1omw/info/recipe/conda_build_config.yaml
  Package                             Version  Build                  Channel                                    Size
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  Install:
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

  + backports                             1.0  py27_1                 conda-forge/osx-64                         4 KB
  + backports.functools_lru_cache       1.6.1  py_0                   conda-forge/noarch                         8 KB
  + backports_abc                         0.5  py27_0                 conda-forge/osx-64                         6 KB
  + ca-certificates                 2021.5.30  h033912b_0             conda-forge/osx-64                       Cached
  + certifi                        2019.11.28  py27h8c360ce_1         conda-forge/osx-64                       Cached
  + cogent                                1.9  py27hf9ca5db_3         bioconda/osx-64                            2 MB
  + cycler                             0.10.0  py27_0                 conda-forge/osx-64                        13 KB
  + freetype                           2.10.4  h4cff582_1             conda-forge/osx-64                       Cached
  + functools32                       3.2.3.2  py27_2                 conda-forge/osx-64                        23 KB
  + futures                             3.3.0  py27h8c360ce_1         conda-forge/osx-64                        25 KB
  + kiwisolver                          1.1.0  py27h5cd23e5_1         conda-forge/osx-64                        57 KB
  + libblas                             3.9.0  11_osx64_openblas      conda-forge/osx-64                       Cached
  + libcblas                            3.9.0  11_osx64_openblas      conda-forge/osx-64                       Cached
  + libcxx                             12.0.1  habf9029_0             conda-forge/osx-64                       Cached
  + libffi                              3.2.1  hb1e8313_1007          conda-forge/osx-64                       Cached
  + libgfortran                         5.0.0  9_3_0_h6c81a4c_23      conda-forge/osx-64                       Cached
  + libgfortran5                        9.3.0  h6c81a4c_23            conda-forge/osx-64                       Cached
  + liblapack                           3.9.0  11_osx64_openblas      conda-forge/osx-64                       Cached
  + libopenblas                        0.3.17  openmp_h3351f45_1      conda-forge/osx-64                       Cached
  + libpng                             1.6.37  h7cec526_2             conda-forge/osx-64                       Cached
  + llvm-openmp                        12.0.1  hda6cdc1_1             conda-forge/osx-64                       Cached
  + matplotlib                          2.2.5  h694c41f_3             conda-forge/osx-64                         7 KB
  + matplotlib-base                     2.2.5  py27h11da6c2_1         conda-forge/osx-64                         7 MB
  + ncurses                               6.2  h2e338ed_4             conda-forge/osx-64                       Cached
  + numpy                              1.16.5  py27hde6bac1_0         conda-forge/osx-64                         4 MB
  + openssl                            1.1.1l  h0d85af4_0             conda-forge/osx-64                       Cached
  + pip                                20.1.1  pyh9f0ad1d_0           conda-forge/noarch                       Cached
  + primerprospector                    1.0.1  py27_1                 /Users/runner/conda/conda-bld/osx-64      95 KB
  + pyparsing                           2.4.7  pyh9f0ad1d_0           conda-forge/noarch                        60 KB
  + python                             2.7.15  h8e446fc_1011_cpython  conda-forge/osx-64                       Cached
  + python-dateutil                     2.8.1  py_0                   conda-forge/noarch                       220 KB
  + python_abi                            2.7  1_cp27m                conda-forge/osx-64                       Cached
  + pytz                               2020.1  pyh9f0ad1d_0           conda-forge/noarch                       227 KB
  + readline                              8.1  h05e3726_0             conda-forge/osx-64                       Cached
  + setuptools                         44.0.0  py27_0                 conda-forge/osx-64                       Cached
  + singledispatch                      3.6.1  pyh44b312d_0           conda-forge/noarch                        12 KB
  + six                                1.16.0  pyh6c4a22f_0           conda-forge/noarch                       Cached
  + sqlite                             3.36.0  h23a322b_0             conda-forge/osx-64                       Cached
  + subprocess32                        3.5.4  py27h0b31af3_0         conda-forge/osx-64                        44 KB
  + tk                                 8.6.11  h5dbffcc_1             conda-forge/osx-64                       Cached
  + tornado                             5.1.1  py27h1de35cc_1000      conda-forge/osx-64                       642 KB
  + wheel                              0.37.0  pyhd8ed1ab_1           conda-forge/noarch                       Cached
  + zlib                               1.2.11  h7795811_1010          conda-forge/osx-64                       Cached

  Summary:

  Install: 43 packages

  Total download: 14 MB

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


## Package Plan ##

  environment location: /Users/runner/conda/conda-bld/primerprospector_1630887859192/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pl


The following NEW packages will be INSTALLED:

    backports:                     1.0-py27_1                   conda-forge
    backports.functools_lru_cache: 1.6.1-py_0                   conda-forge
    backports_abc:                 0.5-py27_0                   conda-forge
    ca-certificates:               2021.5.30-h033912b_0         conda-forge
    certifi:                       2019.11.28-py27h8c360ce_1    conda-forge
    cogent:                        1.9-py27hf9ca5db_3           bioconda   
    cycler:                        0.10.0-py27_0                conda-forge
    freetype:                      2.10.4-h4cff582_1            conda-forge
    functools32:                   3.2.3.2-py27_2               conda-forge
    futures:                       3.3.0-py27h8c360ce_1         conda-forge
    kiwisolver:                    1.1.0-py27h5cd23e5_1         conda-forge
    libblas:                       3.9.0-11_osx64_openblas      conda-forge
    libcblas:                      3.9.0-11_osx64_openblas      conda-forge
    libcxx:                        12.0.1-habf9029_0            conda-forge
    libffi:                        3.2.1-hb1e8313_1007          conda-forge
    libgfortran:                   5.0.0-9_3_0_h6c81a4c_23      conda-forge
    libgfortran5:                  9.3.0-h6c81a4c_23            conda-forge
    liblapack:                     3.9.0-11_osx64_openblas      conda-forge
    libopenblas:                   0.3.17-openmp_h3351f45_1     conda-forge
    libpng:                        1.6.37-h7cec526_2            conda-forge
    llvm-openmp:                   12.0.1-hda6cdc1_1            conda-forge
    matplotlib:                    2.2.5-h694c41f_3             conda-forge
    matplotlib-base:               2.2.5-py27h11da6c2_1         conda-forge
    ncurses:                       6.2-h2e338ed_4               conda-forge
    numpy:                         1.16.5-py27hde6bac1_0        conda-forge
    openssl:                       1.1.1l-h0d85af4_0            conda-forge
    pip:                           20.1.1-pyh9f0ad1d_0          conda-forge
    primerprospector:              1.0.1-py27_1                 local      
    pyparsing:                     2.4.7-pyh9f0ad1d_0           conda-forge
    python:                        2.7.15-h8e446fc_1011_cpython conda-forge
    python-dateutil:               2.8.1-py_0                   conda-forge
    python_abi:                    2.7-1_cp27m                  conda-forge
    pytz:                          2020.1-pyh9f0ad1d_0          conda-forge
    readline:                      8.1-h05e3726_0               conda-forge
    setuptools:                    44.0.0-py27_0                conda-forge
    singledispatch:                3.6.1-pyh44b312d_0           conda-forge
    six:                           1.16.0-pyh6c4a22f_0          conda-forge
    sqlite:                        3.36.0-h23a322b_0            conda-forge
    subprocess32:                  3.5.4-py27h0b31af3_0         conda-forge
    tk:                            8.6.11-h5dbffcc_1            conda-forge
    tornado:                       5.1.1-py27h1de35cc_1000      conda-forge
    wheel:                         0.37.0-pyhd8ed1ab_1          conda-forge
    zlib:                          1.2.11-h7795811_1010         conda-forge

Preparing transaction: ...working... done
Verifying transaction: ...working... done
Executing transaction: ...working... done
export PREFIX=/Users/runner/conda/conda-bld/primerprospector_1630887859192/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pl
export SRC_DIR=/Users/runner/conda/conda-bld/primerprospector_1630887859192/test_tmp
Usage: amplicons_histograms.py [options] {-f/--amplicons_filepath AMPLICONS_FILEPATH}

[] indicates optional input (order unimportant)
{} indicates required input (order unimportant)

Using amplicons files (generated with get_amplicons_and_reads.py), this module will generate histogram(s) showing the predicted amplicon sizes.  If a taxonomy mapping file is passed, the histograms will be separated according to domain (archaea, bacteria, and eukaryotic).

Example usage: 
Print help message and exit
 amplicons_histograms.py -h

Standard Example usage (create a histogram from an amplicon file, output to the current directory)
 amplicons_histograms.py [options] {-f amplicons_filepath }

Test for all _amplicons.fasta files in current directory, pass a taxonomy mapping file so histograms are plotted according to domain, and output to amplicons_graph directory
 amplicons_histograms.py -f . -r -t taxonomy_mapping.txt -o amplicons_graph

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         Print information during execution -- useful for
                        debugging [default: False]
  -o OUTPUT_DIR, --output_dir=OUTPUT_DIR
                        Specify output directory for amplicons and reads.
                        [default: .]
  -r, --all_files       Generate histograms for all files ending with
                        _amplicons.fasta in the directory specified with the
                        -f parameter [default: False]
  -t TAXA_MAP, --taxa_map=TAXA_MAP
                        Filepath to taxonomy mapping file, used to separate
                        graphs according to domain. [default: none]

  REQUIRED options:
    The following options must be provided under all circumstances.

    -f AMPLICONS_FILEPATH, --amplicons_filepath=AMPLICONS_FILEPATH
                        Target amplicons files.  Separate multiple files with
                        a colon. [REQUIRED]
Usage: analyze_primers.py [options] {-f/--fasta_seqs FASTA_SEQS}

[] indicates optional input (order unimportant)
{} indicates required input (order unimportant)



This module performs a local alignment for the input primer(s) against target 
sequences, and then determines a weighted score based upon the number of 
mismatches and gaps.  A summary graph showing mismatches and weighted scores is 
generated for all input fasta files, as is a hits file containing details about 
the primer mismatches, index in the sequence, and other details about primer 
binding.

This module takes an input primer file and one or more fasta files.  Each
primer is tested against every sequence to find the best local alignment.
Mismatches and gaps are calculated for the primer, along with a weighting score 
which gives larger penalties to gaps and mismatches in the 3' end of the primer.

An output hits file is generated for each primer, recording information about
the primer hit site, mismatches, and overall weighted score (a perfect score
starts at zero and increases as penalties are added).  A graph is
also generated, showing mismatches/gaps and overall score information for the 
primer and the target sequences.

The primers input file should be generated with the following format:
Comments are preceeded by a pound "#" symbol.
The primer data are tab delineated with the primer name first, such as
"349_v2r", the actual nucleotide sequence next, listed in a 5' to 3' sequence, 
(example: "AATCGRACGNTYA"), and finally a comment 
or citation, if any, can be listed.  Forward primers should be followed by a 
"f" while reverse primers are followed by "r".
A complete example line is listed below.

815_v34f	GTGGCCNATRRCYAGAACGC	Darrow,Scopes,Bryan et al. 1926

The input sequences should be in fasta format.  If more than one file is 
supplied, they should be separated by a colon.  Each fasta file passed will
have its sequence coverage displayed in separate output graphics and hits
files.


Example usage: 
Print help message and exit
 analyze_primers.py -h

Example: Standard Example
 analyze_primers.py [options] {-P input_primers_filepath [required] -f input_fasta_filepath [required]}

Manually specify a primer name and sequence: Note - primer name must end with 'f' or 'r'
 analyze_primers.py -p "primer_name_f" -s "ACCTGACRGGTAATC" -f input_fasta_filepath

Use multiple target files, change scoring parameters: Pass a primers file, two target fasta files, change the size of the 3' region from the default 5 bases to 7 bases, and lower the 3' mismatch penalty from the default 1.0 to 0.6
 analyze_primers.py -P primers.txt -f bacterial_seqs.fasta:eukaryotic_seqs.fasta -e 7 -t 0.6

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         Print information during execution -- useful for
                        debugging [default: False]
  -P PRIMERS_FILEPATH, --primers_filepath=PRIMERS_FILEPATH
                        Path to input primers file.  This file is tab
                        delineated, with the first column being the primer
                        name, which must end with an 'f' or a 'r'.  The second
                        column contains the primer sequence in 5' to  3'
                        format. One must supply either a primer file or a
                        primer name  (-p parameter) and primer sequence (-s
                        parameter). [default: none]
  -p PRIMER_NAME, --primer_name=PRIMER_NAME
                        Specify a single primer to analyze.  One can either
                        specify a single primer that is listed in a primers
                        file (-P parameter) or  specify a sequence with the -s
                        parameter.  Primer name must end with a "f" or "r" to
                        designate orientation. [default: none]
  -s PRIMER_SEQUENCE, --primer_sequence=PRIMER_SEQUENCE
                        Primer sequence if using the -p option.  Must be
                        specified if not passing a primers file with the -P
                        option.  If both -P and -p parameters are passed, the
                        sequence given with this option will be taken rather
                        than sequences in the -P primers file. [default: none]
  -o OUTPUT_DIR, --output_dir=OUTPUT_DIR
                        Specify output directory for hits files and primer
                        summary graphs. [default: .]
  -e THREE_PRIME_LEN, --three_prime_len=THREE_PRIME_LEN
                        Length of primer considered to be part of the 3'
                        region for the purpose of giving a weighted score for
                        mismatches and/or gaps. [default: 5]
  -l LAST_BASE_MISMATCH, --last_base_mismatch=LAST_BASE_MISMATCH
                        Sets penalty for mismatch in final base of 3' end of
                        the primer. [default: 3]
  -t THREE_PRIME_MISMATCH, --three_prime_mismatch=THREE_PRIME_MISMATCH
                        Penalty for all 3' mismatches except final
                        base.[default: 1]
  -T NON_THREE_PRIME_MISMATCH, --non_three_prime_mismatch=NON_THREE_PRIME_MISMATCH
                        Penalty for all non-3' mismatches. [default: 0.4]
  -g THREE_PRIME_GAP, --three_prime_gap=THREE_PRIME_GAP
                        Penalty for gaps in the 3' region of the primer.
                        [default: 3]
  -G NON_THREE_PRIME_GAP, --non_three_prime_gap=NON_THREE_PRIME_GAP
                        Penalty for non 3' gaps. [default: 1]

  REQUIRED options:
    The following options must be provided under all circumstances.

    -f FASTA_SEQS, --fasta_seqs=FASTA_SEQS
                        Target fasta file(s) to score input primer(s) against.
                        Separate multiple files with a colon. [REQUIRED]
Usage: check_primer_barcode_dimers.py [options] {-b/--barcodes BARCODES -p/--primer1 PRIMER1 -P/--primer2 PRIMER2 -e/--energy_parameters ENERGY_PARAMETERS}

[] indicates optional input (order unimportant)
{} indicates required input (order unimportant)



This module takes an input text file containing barcodes, line separated, and
listed in 5' to 3' direction.  Two primers are specified at the command line.
The first, primer 1, is the primer sequence (and linker) that is associated
with a barcode.  Primer 2 by default has no barcode associated with it, 
although barcode association with both primers can be enabled.

Each barcode/primer combination that potentially will form secondary 
structures will be listed with line number, barcode sequence, secondary 
structure, and energy in an output text file.  Additionally, a postscript file
showing graphical output for the secondary structure will be generated in a 
subdirectory of the output directory.  Degenerate primers will be listed in 
the form(s) that are likely to have secondary structure.


Example usage: 
Print help message and exit
 check_primer_barcode_dimers.py -h

Example: Standard Example
 check_primer_barcode_dimers.py [options] {-b barcode_filepath [required] -p primer_sequence_1 [required] -P primer_sequence_2 [required] -e DNA_energy_parameters_filepath [required]}

Set the annealing temperature to 65, set score threshold to -10, and point to the energy parameters file in the directory /home/BigErn/pprospector/DNA_parameters: 
 check_primer_barcode_dimers.py -b barcodes.txt -p "ACCTGACRGGTAATC" -P "CGACCAGTACG" -t 65 -s -10 -e /home/BigErn/pprospector/DNA_parameters/dna_DM.par

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         Print information during execution -- useful for
                        debugging [default: False]
  -t ANNEALING_TEMP, --annealing_temp=ANNEALING_TEMP
                        Specify an annealing temperature in degrees Celsius.
                        [default: 50]
  -s SCORE_THRESHOLD, --score_threshold=SCORE_THRESHOLD
                        Specify a score threshold for the Gibbs energy
                        calculation, below which a barcode/primer combination
                        is flagged for potential secondary structure.
                        [default: -10.0]
  -o OUTPUT_DIR, --output_dir=OUTPUT_DIR
                        Specify output directory for barcode/primer secondary
                        structure summary and graphs. [default: .]
  -B, --paired_end_barcodes
                        If enabled, barcodes will be appended to both primer 1
                        and primer 2.  [default: False]
  -g, --suppress_graphs
                        Suppress retention of output postscript graphs.
                        [default: False]

  REQUIRED options:
    The following options must be provided under all circumstances.

    -b BARCODES, --barcodes=BARCODES
                        Filepath of barcodes to score input primer(s) against.
                        [REQUIRED]
    -p PRIMER1, --primer1=PRIMER1
                        Primer, written in 5' to 3', that is linked to
                        barcodes tested.  If linker sequence is present
                        between primer and barcode, include it with this
                        sequences. [REQUIRED]
    -P PRIMER2, --primer2=PRIMER2
                        Second primer, written in 5' to 3' orientation.  This
                        primer by default is not associated with any barcodes.
                        [REQUIRED]
    -e ENERGY_PARAMETERS, --energy_parameters=ENERGY_PARAMETERS
                        Specify energy parameters file for predicting
                        secondary structures.  A DNA parameters file,
                        dna_DM.par, is found in the DNA_parameters folder of
                        Primer Prospector, and should be pointed to with this
                        parameter.  If an incorrect file is used, the Vienna
                        software will use default parameters, which are for
                        RNA folding, and could give misleading results.  The
                        provided DNA parameters file is a modified form of the
                        DNA parameters from  David Mathews' RNAstructure
                        program. [REQUIRED]
Usage: clean_fasta.py [options] {-f/--fasta_seqs FASTA_SEQS}

[] indicates optional input (order unimportant)
{} indicates required input (order unimportant)

This module will filter out gap characters ('.' and '-'), spaces, and/or uracil characters ('U') from an input fasta file(s).  The module can also capitalize the characters in the filtered file(s).  This should be done for fasta files to be utilized with analyze_primers.py or any downstream module requring input fasta files. 

Example usage: 
Print help message and exit
 clean_fasta.py -h

Standard Example usage: 
 clean_fasta.py [options] {-f input_fasta_filepath [required] }

Keep gap characters in two aligned fasta files, but allow all other filtering: 
 clean_fasta.py -f input_aligned_seqs1.fasta:input_aligned_seqs2.fasta -g

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         Print information during execution -- useful for
                        debugging [default: False]
  -o OUTPUT_DIR, --output_dir=OUTPUT_DIR
                        Output directory for filtered fasta file(s). [default:
                        .]
  -g, --gap_chars       Filter gap characters "." and "-" [default: True]
  -s, --space_chars     Filter space characters. [default: True]
  -u, --convert_uracil  Convert Uracil "U" characters to "T". [default: True]
  -c, --cap_seqs        Capitalize filtered sequences [default: True]

  REQUIRED options:
    The following options must be provided under all circumstances.

    -f FASTA_SEQS, --fasta_seqs=FASTA_SEQS
                        Target fasta file(s) to filter. Separate multiple
                        files with a colon. [REQUIRED]
Usage: generate_linkers.py [options] {-i/--hits_fps HITS_FPS -f/--fasta_fps FASTA_FPS}

[] indicates optional input (order unimportant)
{} indicates required input (order unimportant)



generate_linkers is designed to suggest primer linkers based upon the least frequently occuring base pairs (default 2) immediately upstream from the 5' region of the primer.

A single _hits.txt file, multiple hits files, or a directory of hits.txt 
files can be passed as input (see the analyze_primers.py file for 
information about the hits.txt file format).  The fasta files used to 
generate the _hits.txt files are also required input for this module.

The output file will contain the percentage occurance of each base at 
all positions in the linker and a suggested linker based on complementarity 
to the least frequently occurring bases.


Example usage: 
Print help message and exit
 generate_linkers.py -h

Standard Example usage: 
 generate_linkers.py [options] {-i hits_filepath [required] -f input_fasta_filepath [required]}

Change linker size to 3, manually pass 2 hits files to test, use overall mismatches for scoring: 
 generate_linkers.py -i primer1f_hits.txt:primer2r_hits.txt -f seqs.fasta -l 3 -s overall_mismatches

Test all hits file in a target directory, put output in linkers directory: 
 generate_linkers.py -i hits_dir/ -f seqs.fasta -o linkers/

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         Print information during execution -- useful for
                        debugging [default: False]
  -l LINKER_LEN, --linker_len=LINKER_LEN
                        Size of linker in base pairs. [default: 2]
  -r, --all_files       Test all _hits.txt files in directory specified with
                        -i.   [default: False]
  -o OUTPUT_DIR, --output_dir=OUTPUT_DIR
                        Specify output directory for linkers summary.
                        [default: .]
  -s SCORE_TYPE, --score_type=SCORE_TYPE
                        Value to use from primer hits file to determine a
                        given primer's amplification success.  Valid choices
                        are weighted_score, overall_mismatches, tp_mismatches.
                        Gibbs energy scores not currently implemented
                        [default: weighted_score]
  -t SCORE_THRESHOLD, --score_threshold=SCORE_THRESHOLD
                        If primer has score at or below this parameter, the
                        primer amplification is considered to be successful.
                        [default: 1.0]

  REQUIRED options:
    The following options must be provided under all circumstances.

    -i HITS_FPS, --hits_fps=HITS_FPS
                        Target primer hits files to generate linkers with.
                        Separate multiple files with a colon. [REQUIRED]
    -f FASTA_FPS, --fasta_fps=FASTA_FPS
                        Fasta filepath(s).  Must include all fasta sequences
                        used to generate the hits files.  Separate multiple
                        files with a colon. [REQUIRED]
Usage: generate_primers_denovo.py [options] {-i/--target_seqs TARGET_SEQS -o/--output_filepath OUTPUT_FILEPATH}

[] indicates optional input (order unimportant)
{} indicates required input (order unimportant)

The generate_primers_denovo module is designed to take an input sequence length (default 5) and aligned fasta file(s) to search for all Xmers of the given sequence length that are conserved in the target fasta files.  Optionally, any Xmers that are found to exist above a certain threshold (1% is the default) in the excluded fasta sequences are discarded.  The remaining Xmers, along with their upstream and downstream sequences are written to an output file.

Example usage: 
Print help message and exit
 generate_primers_denovo.py -h

Standard Example usage: 
 generate_primers_denovo.py [options] {-i include_fasta_filepath(s) -o output_primers_filepath}

Look for common 5mers in a given aligned fasta file, bact_sample.fasta, that are conserved at least 60% (default setting) of the time.  Output to primers.txt: 
 generate_primers_denovo.py -i bact_sample.fasta -o primers.txt

Look for common 6mers in two input aligned fasta files (bact_sample.fasta, arch_sample.fasta), that are not found in the aligned fasta file euk_sample.fasta: 
 generate_primers_denovo.py -i bact_sample:arch_sample.fasta -x 6 -e euk_sample.fasta -o primers.txt

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         Print information during execution -- useful for
                        debugging [default: False]
  -e EXCLUDE_FASTA_FILEPATH, --exclude_fasta=EXCLUDE_FASTA_FILEPATH
                        Excluded aligned fasta file(s).  To pass multiple
                        files, separate each file with a colon.  Example: -e
                        test1.fasta:test2.fasta.  If not specified, will skip
                        exclusion step [default: none]
  -p PERCENT_MATCH, --percent_match=PERCENT_MATCH
                        Percentage of sequence matches to primer that must
                        match in order to retain prospective sequence in
                        dictionary. [default: 0.6]
  -s FULL_PRIMER_LENGTH, --full_primer_length=FULL_PRIMER_LENGTH
                        Overall primer length to retrieve from sequences.
                        [default: 20]
  -x SEQUENCE_LENGTH, --xmer_length=SEQUENCE_LENGTH
                        Xmer length to search for in target fasta sequence(s).
                        [default: 5]
  -S SPECIFICITY_THRESHOLD, --specificity_threshold=SPECIFICITY_THRESHOLD
                        Sets specificity threshold for excluded fasta
                        sequences. [default: 0.01]
  -l LOG_FILE, --log_file=LOG_FILE
                        log filepath. If not specified, no log file will be
                        written.  [default: none]
  -a STANDARD_INDEX_FILE, --standard_index_file=STANDARD_INDEX_FILE
                        Aligned sequence file with which to assign prospective
                        primer indices to.  The alignment where a conserved
                        sequence is found will be used to determine the
                        unaligned index in the supplied file (for instance an
                        E. coli sequence) and will be recorded in the output
                        file for the purpose of giving a meaningful name to
                        prospective primers.  Only the first sequence in the
                        file will be used for determining an index [default:
                        none]
  -r SEARCH_RANGE, --search_range=SEARCH_RANGE
                        Range of nucleotides in the supplied aligned target
                        sequences to search for primers.  Supply the starting
                        index and end index separated by a colon.  Example -r
                        1500:2700  Enable this option to generate primers that
                        target certain regions. [default: none]

  REQUIRED options:
    The following options must be provided under all circumstances.

    -i TARGET_SEQS, --target_seqs=TARGET_SEQS
                        Target aligned fasta sequence files to find conserved
                        sites for primer design.  Separate multiple files with
                        a colon. [REQUIRED]
    -o OUTPUT_FILEPATH, --output_filepath=OUTPUT_FILEPATH
                        name of output filepath to write details about
                        conserved sequence sites. [REQUIRED]
Usage: get_amplicons_and_reads.py [options] {-i/--primer_hits PRIMER_HITS -f/--fasta_fps FASTA_FPS}

[] indicates optional input (order unimportant)
{} indicates required input (order unimportant)

Using hits files (generated with analyze_primers.py), this module will look at an individual primer or a specified primer pair to generate amplicons and reads.  By default, the weighted score is used to determine if a particular primer will amplify, but other results (3' mismatches, overall mismatches) can be used to determine if a primer will amplify.  Every fasta file used to generate the hits file must be passed to this module (multiple fastas should be separated by a colon).  If a single hits file is specified, the amplicon will be the entire sequence following the 3' end of the primer.

Example usage: 
Print help message and exit
 get_amplicons_and_reads.py -h

Standard Example usage (examine pair of primer hits files): 
 get_amplicons_and_reads.py [options] {-f fasta_filepath -i primer_hits_filepath1:primer_hits_filepath2 [required] }

Use total mismatches instead of weighted score to determine if a given primer will amplify: 
 get_amplicons_and_reads.py -f fasta_filepath -i primer_hits_filepath1:primer_hits_filepath2 -s total_mismatches

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         Print information during execution -- useful for
                        debugging [default: False]
  -o OUTPUT_DIR, --output_dir=OUTPUT_DIR
                        Specify output directory for amplicons and reads.
                        [default: .]
  -s SCORE_TYPE, --score_type=SCORE_TYPE
                        Value to use from primer hits file to determine a
                        given primer's amplification success.  Valid choices
                        are weighted_score, overall_mismatches, tp_mismatches.
                        Gibbs energy scores not currently implemented
                        [default: weighted_score]
  -t SCORE_THRESHOLD, --score_threshold=SCORE_THRESHOLD
                        If primer has score at or below this parameter, the
                        primer amplification is considered to be successful
                        [default: 1.0]
  -m MIN_SEQ_LEN, --min_seq_len=MIN_SEQ_LEN
                        Sets minimum sequence length of amplicon to be
                        included in the output amplicon file [default: 100]
  -d READ_DIRECTION, --read_direction=READ_DIRECTION
                        Direction of reads generated. Can be forward (f),
                        reverse (r), or paired end (p).  [default: r]
  -R READ_LEN, --read_len=READ_LEN
                        Length of reads to generate.  Should be set according
                        to sequencing technology/reagents used.  [default:
                        250]

  REQUIRED options:
    The following options must be provided under all circumstances.

    -i PRIMER_HITS, --primer_hits=PRIMER_HITS
                        Target primer hits files.  Separate multiple files
                        with a colon. [REQUIRED]
    -f FASTA_FPS, --fasta_fps=FASTA_FPS
                        Fasta filepaths.  Must match the fasta files used in
                        the analyze_primers module.  Multiple fasta files can
                        be passed, separated with a colon.  Order not
                        important. [REQUIRED]
Usage: make_pp_rst_file.py [options] {-i/--input_script INPUT_SCRIPT -o/--output_dir OUTPUT_DIR}

[] indicates optional input (order unimportant)
{} indicates required input (order unimportant)

This script will take a script file and convert the usage strings and options to generate a documentation .rst file.

Example usage: 
Print help message and exit
 make_pp_rst_file.py -h

Example: 
 make_qiime_rst_file.py -i make_2d_plots.py -o doc/

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         Print information during execution -- useful for
                        debugging [default: False]

  REQUIRED options:
    The following options must be provided under all circumstances.

    -i INPUT_SCRIPT, --input_script=INPUT_SCRIPT
                        This is the input script for which to  make a .rst
                        file [REQUIRED]
    -o OUTPUT_DIR, --output_dir=OUTPUT_DIR
                        output directory for .rst files [REQUIRED]
Usage: optimize_primers.py [options] {-i/--hits_fp HITS_FP}

[] indicates optional input (order unimportant)
{} indicates required input (order unimportant)



Optimize primers takes an input primer hits file (created by analyze_primers.py)
and generates an output file containing the base frequency for each position 
in the primer.

Only primer hits that exceed a given score threshold will be considered for
the base frequency output.


Example usage: 
Print help message and exit
 optimize_primers.py -h

Standard Example usage: 
 optimize_primers.py [options] {-i hits_filepath [required]}

Use overall mismatches for scoring, set score threshold to only consider primer hits that are equal to or less than two mismatches: 
 optimize_primers.py -i primer2r_hits.txt -s overall_mismatches -t 2

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         Print information during execution -- useful for
                        debugging [default: False]
  -o OUTPUT_DIR, --output_dir=OUTPUT_DIR
                        Specify output directory for linkers summary.
                        [default: .]
  -s SCORE_TYPE, --score_type=SCORE_TYPE
                        Value to use from primer hits file to determine a
                        given primer's amplification success.  Valid choices
                        are weighted_score, overall_mismatches, tp_mismatches.
                        Gibbs energy scores not currently implemented
                        [default: weighted_score]
  -t SCORE_THRESHOLD, --score_threshold=SCORE_THRESHOLD
                        If primer has score at or below this parameter, the
                        primer amplification is considered to be successful.
                        [default: 2.0]

  REQUIRED options:
    The following options must be provided under all circumstances.

    -i HITS_FP, --hits_fp=HITS_FP
                        Target primer hits file to generate base frequencies
                        with. [REQUIRED]
Usage: sort_denovo_primers.py [options] {-i/--hits_file HITS_FILE}

[] indicates optional input (order unimportant)
{} indicates required input (order unimportant)


The purpose of this module is to analyze conserved sequence hits file
from generate_primers_denovo.py to determine if the upstream or downstream
sequences from the conserved 3' primer end are 
reasonably conserved and suitable for use in designing primers.

This module uses the sequences given in the hits file to calculate
the shannon entropies for each position in the primers.  The output
from this module will contain the overall consensus sequence for each
potential primer (going upstream or downstream), a degenerate 
IUPAC sequence that considers all bases found in each position, a 
filtered degenerate IUPAC sequence that does not consider bases whose
percentage is under a specified value, and the shannon entropy scores for
the overall sequences.

Note-the non-filtered IUPAC sequence output will contain a "." for positions
that contain a "-" character (this results from filling in gap characters at
unknown bases that exceed the beginning or end of a sequence in the 
generate_primers_denovo.py module).

Following this initial analysis, the primers are then sorted into a summary
file containing information about each prospective primer and a primer file 
that is formatted for use with the analyze_primers.py module.  
The primers can be sorted according to sensitivity (greatest to least),
specificity (most to least), or shannon entropy of the overall primer.

Finally, a list of known primers can be passed via the -k option to 
compare to the *de novo* primers generated by generate_primers_denovo.py.
The *de novo* primers are compared to the primers passed, and flags any
primers that overlap (considering matching degenerate characters as well).
The 'primers_overlap.txt' file contains information about the 
overlapping primers for the entire primer set.  This file contains a section
showing primers that have a 'match' to the supplied primers, meaning that the
primers overlap and match at the 3' end.  An 'overlap' section shows details 
about primers that overlap with the given primers but do not match at the 
3' end.  Finally, a 'unique' primers section shows details about primers that
do not overlap with the supplied primer set.

These formatted primer files are in the following format:
primer_id <tab> primer sequence (5'->3')
Any comments are preceeded by the pound (#) symbol. 
If known primers are passed with the -k parameter, they need to be in this
format as well.

If a standard alignment was used to record indices in the 
generate_primers_denovo.py module (-a option), this module will detect the 
presence of the standard aligned indices.  If absent, the primers' numeric 
names will be based on the initial unaligned index of the sequence they 
were found in.



Example usage: 
Print help message and exit
 sort_denovo_primers.py -h

Standard Example usage: 
 sort_denovo_primers.py [options] {-i input_primer_hits_filepath [required] -o output_directory [required]}

Sort prospective primers with default settings: 
 sort_denovo_primers.py -i conserved_site_hits.txt -o denovo_primers/

Sort the same primers, increase degeneracy allowed (include nucleotides that occur as little as 10% of the time), test primers against primers from the literature (known_primers.txt), and sort according to specificity: 
 sort_denovo_primers.py -i conserved_sites_hits.txt -o denovo_primers/ -p 0.10 -k known_primers.txt -S P

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         Print information during execution -- useful for
                        debugging [default: False]
  -o OUTPUT_DIR, --output_dir=OUTPUT_DIR
                        Output directory
  -p VARIABLE_POS_FREQ, --variable_pos_freq=VARIABLE_POS_FREQ
                        Percentage at which a variable base is considered for
                        degenerate primer design. [default: 0.2]
  -k KNOWN_PRIMERS_FILEPATH, --known_primers_filepath=KNOWN_PRIMERS_FILEPATH
                        Optional primers filepath to compare with the de novo
                        primers.  Comparisons will be used to separate the de
                        novo primers into unique, partially overlapping, or
                        overlapping primers with the known primers supplied.
                        [default: none]
  -S SORT_METHOD, --sort_method=SORT_METHOD
                        Sorting method for reverse and forward primers output
                        files, pass either S, O, or P for [S]ensitivity,
                        [O]verall shannon entropy, s[P]ecificity.[default: S]
  -P PRIMER_NAME, --primer_name=PRIMER_NAME
                        Root name for primers in the formatted_primers.txt
                        output file. [default: ]
  -m MATCH_LEN, --match_len=MATCH_LEN
                        Number of base pairs in overlapping sequences to be
                        considered as a significant overlap. [default: 10]
  -T TRUNCATE_LEN, --truncate_len=TRUNCATE_LEN
                        Number of bases to truncate for the 3' end of the
                        primer comparison to the universal primer set.
                        [default: 10]
  -a AMPLICON_LEN, --amplicon_len=AMPLICON_LEN
                        Generate primer pair output file that will yield
                        amplicons with an estimated size within the given
                        range.  Requires that the standard alignment option
                        (-a) was used with generate_primers_denovo.py.  Pass
                        the min and max amplicon size separated by a colon,
                        for example -a 250:500 [default: False]

  REQUIRED options:
    The following options must be provided under all circumstances.

    -i HITS_FILE, --hits_file=HITS_FILE
                        Conserved Xmers file, output file from
                        generate_primers_denovo.py module. [REQUIRED]
Usage: taxa_assignment_report.py [options] {-t/--taxa_mapping_fp TAXA_MAPPING_FP -f/--fasta_fp FASTA_FP}

[] indicates optional input (order unimportant)
{} indicates required input (order unimportant)



This module will attempt to assign taxonomies to the input fasta files, then 
compare these results to the known taxonomies supplied for each sequence ID 
in the input taxa mapping file.  Currently only the RDP classifier is 
implemented for assigning taxonomies.

The primary purpose of this module is to test amplicons and/or reads for a
prospective primer pair (see get_amplicons_and_reads.py) for their 
phylogenetic usefulness.  Very short reads, or reads in a region of high
conservation will be less accurate in terms of taxonomic assignment.

This module will save the taxonomic assignments, as well as a report detailing
the percentage that were accurately assigned for each level of taxonomic depth.
An assignment of Archaea;Euryarchaeota;Thermoplasmatales for a sequence that
was actually Archaea;Euryarchaeota;Halobacteriales is accurate to the second
level of taxonomy, but not the third, and will be recorded as such.  The 
default depth of taxa to test is 3.


Example usage: 
Print help message and exit
 taxa_assignment_report.py -h

Standard Example usage: 
 taxa_assignment_report.py [options] {-t taxa_mapping_filepath [required] -f input_fasta_filepath [required]}

Change taxa depth to 4, change output directory to taxa_report/: 
 taxa_assignment_report.py -t taxa_mapping_filepath -f input_fasta_filepath  -d 4 -o taxa_report/

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         Print information during execution -- useful for
                        debugging [default: False]
  -d TAXA_DEPTH, --taxa_depth=TAXA_DEPTH
                        Depth of taxonomy to test for accuracy.  Depth that
                        exceeds specifications in the taxonomy mapping file or
                        report will be ignored [default: 3]
  -o OUTPUT_DIR, --output_dir=OUTPUT_DIR
                        Specify output directory for reports, log. [default:
                        .]
  -m ASSIGNMENT_METHOD, --assignment_method=ASSIGNMENT_METHOD
                         Taxonomic assignment method.  Currently only RDP
                        classifier implemented. [default: rdp]
  -c MIN_CONFIDENCE, --min_confidence=MIN_CONFIDENCE
                        Minimum confidence for taxonomic assignment.
                        [default: 0.8]
  -T TRAINING_DATA_FP, --training_data_fp=TRAINING_DATA_FP
                        Training sequence data filepath for rdp classifier.
                        [default: none]

  REQUIRED options:
    The following options must be provided under all circumstances.

    -t TAXA_MAPPING_FP, --taxa_mapping_fp=TAXA_MAPPING_FP
                        Taxonomy mapping filepath [REQUIRED]
    -f FASTA_FP, --fasta_fp=FASTA_FP
                        Fasta sequence file. [REQUIRED]
Usage: taxa_coverage.py [options] {-i/--hits_fps HITS_FPS -T/--taxa_fp TAXA_FP}

[] indicates optional input (order unimportant)
{} indicates required input (order unimportant)


Taxa coverage graphs and text file summaries can be generated by this module 
for a primer, multiple primers, or primer pairs.  These graphs are generated by 
using primer data generated by the analyze_primers.py module, to determine if a 
primer will amplify a given sequence.

A single _hits.txt file, multiple hits files, or a directory of hits.txt 
files can be passed as input (see the analyze_primers.py file for 
information about the hits.txt file format).

A taxonomy mapping file is required.  Sequence IDs in the hits files that do
not have corresponding taxonomy mapping data will be binned in a category
of "Unknown" sequences under the domain level output of the graph and 
text summary files.  Taxonomy mapping files have the format of the sequence
ID<tab>taxonomy, delineated by semicolons, starting with domain.

Example (taxonomy comes from the Silva 97 reference set):

EU884952<tab>Bacteria;Bacteroidetes-Chlorobi;Bacteroidetes;Rikenella

Forward and reverse primer pairs can be tested (-p option).  In these cases,
amplification for the primers are decided by the poorest score of two primers
tested.  *Warning* This module will not check for logical combinations of
primers, so all forward and reverse primers, including those that are not 
positioned to generate amplicons (i.e., 910f and 495r) will be tested if the
-p option is enabled.


Example usage: 
Print help message and exit
 taxa_coverage.py -h

Standard Example usage: 
 taxa_coverage.py [options] {-i hits_filepath [required] -t taxa_mapping_filepath [required]}

Change taxa depth reported to 5, manually pass 2 hits files to test, use overall mismatches for scoring: 
 taxa_coverage.py -i primer1f_hits.txt:primer2r_hits.txt -t taxa_map.txt -d 5 -s overall_mismatches

Test all hits file in a target directory, get primer pair results, put output in taxa_coverage directory: 
 taxa_coverage.py -i hits_dir/ -t taxa_map.txt -p -o taxa_coverage/

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         Print information during execution -- useful for
                        debugging [default: False]
  -d TAXA_DEPTH, --taxa_depth=TAXA_DEPTH
                        Depth of taxa to generate graphs and summaries for,
                        starting with domain. [default: 3]
  -r, --all_files       Test all _hits.txt files in directory specified with
                        -i.   [default: False]
  -p, --primer_pairs    Test primer pairs.  Will test all input hits files
                        that are forward and reverse primers.  Hits files must
                        have matching sequences.  The worse scoring primer of
                        the pair dictates amplification success. [default:
                        False]
  -o OUTPUT_DIR, --output_dir=OUTPUT_DIR
                        Specify base output directory for taxa summary.  A log
                        file be output to this directory.  Taxonomy graphs and
                        text summaries will be generated in separated
                        subdirectories from the main output directory.
                        [default: .]
  -s SCORE_TYPE, --score_type=SCORE_TYPE
                        Value to use from primer hits file to determine a
                        givenprimer's amplification success.  Valid choices
                        are weighted_score, overall_mismatches, tp_mismatches.
                        Gibbs energy scores not currently implemented
                        [default: weighted_score]
  -t SCORE_THRESHOLD, --score_threshold=SCORE_THRESHOLD
                        If primer has score at or below this parameter, the
                        primer amplification is considered to be successful
                        [default: 1.0]

  REQUIRED options:
    The following options must be provided under all circumstances.

    -i HITS_FPS, --hits_fps=HITS_FPS
                        Target primer hits files to generate linkers against.
                        Separate multiple files with a colon. [REQUIRED]
    -T TAXA_FP, --taxa_fp=TAXA_FP
                        Taxonomy mapping file. [REQUIRED]

Resource usage statistics from testing primerprospector:
   Process count: 4
   CPU time: Sys=0:00:00.9, User=0:00:01.4
   Memory: 59.6M
   Disk usage: 12B
   Time elapsed: 0:00:16.4


TEST END: primerprospector-1.0.1-py27_1.tar.bz2
--dirty flag and --keep-old-work not specified. Removing build/test folder after successful build/test.

