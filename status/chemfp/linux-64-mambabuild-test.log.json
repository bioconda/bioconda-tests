  Package                Version  Build                  Channel                                   Size
─────────────────────────────────────────────────────────────────────────────────────────────────────────
  Install:
─────────────────────────────────────────────────────────────────────────────────────────────────────────

  + _libgcc_mutex            0.1  conda_forge            conda-forge/linux-64                    Cached
  + _openmp_mutex            4.5  1_gnu                  conda-forge/linux-64                    Cached
  + boost                 1.68.0  py27h8619c78_1001      conda-forge/linux-64                    303 KB
  + boost-cpp             1.68.0  h11c811c_1000          conda-forge/linux-64                     21 MB
  + bzip2                  1.0.8  h7f98852_4             conda-forge/linux-64                    Cached
  + ca-certificates    2021.5.30  ha878542_0             conda-forge/linux-64                    Cached
  + cairo                 1.16.0  h18b612c_1001          conda-forge/linux-64                      1 MB
  + certifi           2019.11.28  py27h8c360ce_1         conda-forge/linux-64                    149 KB
  + chemfp                 1.6.1  py27heb79e2c_1         /home/vsts/conda/conda-bld/linux-64     342 KB
  + fontconfig            2.13.1  hba837de_1005          conda-forge/linux-64                    Cached
  + freetype              2.10.4  h0708190_1             conda-forge/linux-64                    Cached
  + gettext             0.19.8.1  hf34092f_1004          conda-forge/linux-64                      4 MB
  + glib                  2.66.3  h58526e2_0             conda-forge/linux-64                    500 KB
  + icu                     58.2  hf484d3e_1000          conda-forge/linux-64                     23 MB
  + jbig                     2.1  h7f98852_2003          conda-forge/linux-64                    Cached
  + jpeg                      9d  h36c2ea0_0             conda-forge/linux-64                    Cached
  + ld_impl_linux-64      2.36.1  hea4e1c9_2             conda-forge/linux-64                    Cached
  + lerc                   2.2.1  h9c3ff4c_0             conda-forge/linux-64                    Cached
  + libblas                3.9.0  11_linux64_openblas    conda-forge/linux-64                    Cached
  + libcblas               3.9.0  11_linux64_openblas    conda-forge/linux-64                    Cached
  + libdeflate               1.7  h7f98852_5             conda-forge/linux-64                    Cached
  + libffi                 3.2.1  he1b5a44_1007          conda-forge/linux-64                     47 KB
  + libgcc-ng             11.1.0  hc902ee8_8             conda-forge/linux-64                    Cached
  + libgfortran-ng        11.1.0  h69a702a_8             conda-forge/linux-64                    Cached
  + libgfortran5          11.1.0  h6c583b3_8             conda-forge/linux-64                    Cached
  + libglib               2.66.3  hbe7bbb4_0             conda-forge/linux-64                      3 MB
  + libgomp               11.1.0  hc902ee8_8             conda-forge/linux-64                    Cached
  + libiconv                1.16  h516909a_0             conda-forge/linux-64                    Cached
  + liblapack              3.9.0  11_linux64_openblas    conda-forge/linux-64                    Cached
  + libopenblas           0.3.17  pthreads_h8fe5266_1    conda-forge/linux-64                    Cached
  + libpng                1.6.37  h21135ba_2             conda-forge/linux-64                    Cached
  + libstdcxx-ng          11.1.0  h56837e0_8             conda-forge/linux-64                    Cached
  + libtiff                4.3.0  hf544144_1             conda-forge/linux-64                    Cached
  + libuuid               2.32.1  h7f98852_1000          conda-forge/linux-64                    Cached
  + libwebp-base           1.2.1  h7f98852_0             conda-forge/linux-64                    Cached
  + libxcb                  1.13  h7f98852_1003          conda-forge/linux-64                    Cached
  + libxml2               2.9.12  h03d6c58_0             pkgs/main/linux-64                        1 MB
  + lz4-c                  1.9.3  h9c3ff4c_1             conda-forge/linux-64                    Cached
  + ncurses                  6.2  h58526e2_4             conda-forge/linux-64                    Cached
  + numpy                 1.16.5  py27h95a1406_0         conda-forge/linux-64                      4 MB
  + olefile                 0.46  pyh9f0ad1d_1           conda-forge/noarch                       32 KB
  + openbabel              3.0.0  py27hdef5451_1         conda-forge/linux-64                      6 MB
  + openssl               1.1.1l  h7f98852_0             conda-forge/linux-64                    Cached
  + pandas                0.24.2  py27hb3f55d8_0         conda-forge/linux-64                     11 MB
  + pcre                    8.45  h9c3ff4c_0             conda-forge/linux-64                    Cached
  + pillow                 6.2.1  py27hd70f55b_1         conda-forge/linux-64                    625 KB
  + pip                   20.1.1  pyh9f0ad1d_0           conda-forge/noarch                        1 MB
  + pixman                0.38.0  h516909a_1003          conda-forge/linux-64                    594 KB
  + pthread-stubs            0.4  h36c2ea0_1001          conda-forge/linux-64                    Cached
  + pycairo               1.18.2  py27h438ddbb_0         conda-forge/linux-64                     77 KB
  + python                2.7.15  h5a48372_1011_cpython  conda-forge/linux-64                     12 MB
  + python-dateutil        2.8.1  py_0                   conda-forge/noarch                      220 KB
  + python_abi               2.7  1_cp27mu               conda-forge/linux-64                      4 KB
  + pytz                  2020.1  pyh9f0ad1d_0           conda-forge/noarch                      227 KB
  + rdkit              2018.09.3  py27h9c20d5c_0         conda-forge/linux-64                     20 MB
  + readline                 8.1  h46c0cb4_0             conda-forge/linux-64                    Cached
  + setuptools            44.0.0  py27_0                 conda-forge/linux-64                    663 KB
  + six                   1.16.0  pyh6c4a22f_0           conda-forge/noarch                      Cached
  + sqlite                3.36.0  h9cd32fc_0             conda-forge/linux-64                    Cached
  + tk                    8.6.11  h27826a3_1             conda-forge/linux-64                    Cached
  + wheel                 0.37.0  pyhd8ed1ab_1           conda-forge/noarch                      Cached
  + xorg-kbproto           1.0.7  h7f98852_1002          conda-forge/linux-64                    Cached
  + xorg-libice           1.0.10  h7f98852_0             conda-forge/linux-64                    Cached
  + xorg-libsm             1.2.3  hd9c2040_1000          conda-forge/linux-64                    Cached
  + xorg-libx11            1.7.2  h7f98852_0             conda-forge/linux-64                    Cached
  + xorg-libxau            1.0.9  h7f98852_0             conda-forge/linux-64                    Cached
  + xorg-libxdmcp          1.1.3  h7f98852_0             conda-forge/linux-64                    Cached
  + xorg-libxext           1.3.4  h7f98852_1             conda-forge/linux-64                    Cached
  + xorg-libxrender       0.9.10  h7f98852_1003          conda-forge/linux-64                    Cached
  + xorg-renderproto      0.11.1  h7f98852_1002          conda-forge/linux-64                    Cached
  + xorg-xextproto         7.3.0  h7f98852_1002          conda-forge/linux-64                    Cached
  + xorg-xproto           7.0.31  h7f98852_1007          conda-forge/linux-64                    Cached
  + xz                     5.2.5  h516909a_1             conda-forge/linux-64                    Cached
  + zlib                  1.2.11  h516909a_1010          conda-forge/linux-64                    Cached
  + zstd                   1.5.0  ha95c52a_0             conda-forge/linux-64                    Cached

  Summary:

  Install: 75 packages

  Total download: 110 MB

─────────────────────────────────────────────────────────────────────────────────────────────────────────

Updating build index: /home/vsts/conda/conda-bld

TEST START: chemfp-1.6.1-py27heb79e2c_1.tar.bz2

## Package Plan ##

  environment location: /home/vsts/conda/conda-bld/chemfp_1630709522197/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place


The following NEW packages will be INSTALLED:

    _libgcc_mutex:    0.1-conda_forge              conda-forge
    _openmp_mutex:    4.5-1_gnu                    conda-forge
    boost:            1.68.0-py27h8619c78_1001     conda-forge
    boost-cpp:        1.68.0-h11c811c_1000         conda-forge
    bzip2:            1.0.8-h7f98852_4             conda-forge
    ca-certificates:  2021.5.30-ha878542_0         conda-forge
    cairo:            1.16.0-h18b612c_1001         conda-forge
    certifi:          2019.11.28-py27h8c360ce_1    conda-forge
    chemfp:           1.6.1-py27heb79e2c_1         local      
    fontconfig:       2.13.1-hba837de_1005         conda-forge
    freetype:         2.10.4-h0708190_1            conda-forge
    gettext:          0.19.8.1-hf34092f_1004       conda-forge
    glib:             2.66.3-h58526e2_0            conda-forge
    icu:              58.2-hf484d3e_1000           conda-forge
    jbig:             2.1-h7f98852_2003            conda-forge
    jpeg:             9d-h36c2ea0_0                conda-forge
    ld_impl_linux-64: 2.36.1-hea4e1c9_2            conda-forge
    lerc:             2.2.1-h9c3ff4c_0             conda-forge
    libblas:          3.9.0-11_linux64_openblas    conda-forge
    libcblas:         3.9.0-11_linux64_openblas    conda-forge
    libdeflate:       1.7-h7f98852_5               conda-forge
    libffi:           3.2.1-he1b5a44_1007          conda-forge
    libgcc-ng:        11.1.0-hc902ee8_8            conda-forge
    libgfortran-ng:   11.1.0-h69a702a_8            conda-forge
    libgfortran5:     11.1.0-h6c583b3_8            conda-forge
    libglib:          2.66.3-hbe7bbb4_0            conda-forge
    libgomp:          11.1.0-hc902ee8_8            conda-forge
    libiconv:         1.16-h516909a_0              conda-forge
    liblapack:        3.9.0-11_linux64_openblas    conda-forge
    libopenblas:      0.3.17-pthreads_h8fe5266_1   conda-forge
    libpng:           1.6.37-h21135ba_2            conda-forge
    libstdcxx-ng:     11.1.0-h56837e0_8            conda-forge
    libtiff:          4.3.0-hf544144_1             conda-forge
    libuuid:          2.32.1-h7f98852_1000         conda-forge
    libwebp-base:     1.2.1-h7f98852_0             conda-forge
    libxcb:           1.13-h7f98852_1003           conda-forge
    libxml2:          2.9.12-h03d6c58_0                       
    lz4-c:            1.9.3-h9c3ff4c_1             conda-forge
    ncurses:          6.2-h58526e2_4               conda-forge
    numpy:            1.16.5-py27h95a1406_0        conda-forge
    olefile:          0.46-pyh9f0ad1d_1            conda-forge
    openbabel:        3.0.0-py27hdef5451_1         conda-forge
    openssl:          1.1.1l-h7f98852_0            conda-forge
    pandas:           0.24.2-py27hb3f55d8_0        conda-forge
    pcre:             8.45-h9c3ff4c_0              conda-forge
    pillow:           6.2.1-py27hd70f55b_1         conda-forge
    pip:              20.1.1-pyh9f0ad1d_0          conda-forge
    pixman:           0.38.0-h516909a_1003         conda-forge
    pthread-stubs:    0.4-h36c2ea0_1001            conda-forge
    pycairo:          1.18.2-py27h438ddbb_0        conda-forge
    python:           2.7.15-h5a48372_1011_cpython conda-forge
    python-dateutil:  2.8.1-py_0                   conda-forge
    python_abi:       2.7-1_cp27mu                 conda-forge
    pytz:             2020.1-pyh9f0ad1d_0          conda-forge
    rdkit:            2018.09.3-py27h9c20d5c_0     conda-forge
    readline:         8.1-h46c0cb4_0               conda-forge
    setuptools:       44.0.0-py27_0                conda-forge
    six:              1.16.0-pyh6c4a22f_0          conda-forge
    sqlite:           3.36.0-h9cd32fc_0            conda-forge
    tk:               8.6.11-h27826a3_1            conda-forge
    wheel:            0.37.0-pyhd8ed1ab_1          conda-forge
    xorg-kbproto:     1.0.7-h7f98852_1002          conda-forge
    xorg-libice:      1.0.10-h7f98852_0            conda-forge
    xorg-libsm:       1.2.3-hd9c2040_1000          conda-forge
    xorg-libx11:      1.7.2-h7f98852_0             conda-forge
    xorg-libxau:      1.0.9-h7f98852_0             conda-forge
    xorg-libxdmcp:    1.1.3-h7f98852_0             conda-forge
    xorg-libxext:     1.3.4-h7f98852_1             conda-forge
    xorg-libxrender:  0.9.10-h7f98852_1003         conda-forge
    xorg-renderproto: 0.11.1-h7f98852_1002         conda-forge
    xorg-xextproto:   7.3.0-h7f98852_1002          conda-forge
    xorg-xproto:      7.0.31-h7f98852_1007         conda-forge
    xz:               5.2.5-h516909a_1             conda-forge
    zlib:             1.2.11-h516909a_1010         conda-forge
    zstd:             1.5.0-ha95c52a_0             conda-forge

Preparing transaction: ...working... done
Verifying transaction: ...working... done
Executing transaction: ...working... done
export PREFIX=/home/vsts/conda/conda-bld/chemfp_1630709522197/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place
export SRC_DIR=/home/vsts/conda/conda-bld/chemfp_1630709522197/test_tmp
import: 'chemfp'
import: 'chemfp.commandline'
import: 'chemfp.futures'
import: 'chemfp.progressbar'
import: 'chemfp'
import: 'chemfp.commandline'
import: 'chemfp.futures'
import: 'chemfp.progressbar'
usage: ob2fps [-h]
              [--FP2 | --FP3 | --FP4 | --MACCS | --substruct | --rdmaccs | --rdmaccs/1]
              [--id-tag NAME] [--in FORMAT] [-o FILENAME] [--out FORMAT]
              [--errors {strict,report,ignore}] [--version]
              [filenames [filenames ...]]

Generate FPS fingerprints from a structure file using Open Babel

positional arguments:
  filenames             input structure files (default is stdin)

optional arguments:
  -h, --help            show this help message and exit
  --FP2                 linear fragments up to 7 atoms
  --FP3                 SMARTS patterns specified in the file patterns.txt
  --FP4                 SMARTS patterns specified in the file
                        SMARTS_InteLigand.txt
  --MACCS               Open Babel's implementation of the MACCS 166 keys
  --substruct           generate ChemFP substructure fingerprints
  --rdmaccs, --rdmaccs/2
                        166 bit RDKit/MACCS fingerprints (version 2)
  --rdmaccs/1           use the version 1 definition for --rdmaccs
  --id-tag NAME         tag name containing the record id (SD files only)
  --in FORMAT           input structure format (default autodetects from the
                        filename extension)
  -o FILENAME, --output FILENAME
                        save the fingerprints to FILENAME (default=stdout)
  --out FORMAT          output structure format (default guesses from output
                        filename, or is 'fps')
  --errors {strict,report,ignore}
                        how should structure parse errors be handled?
                        (default=ignore)
  --version             show program's version number and exit
usage: rdkit2fps [-h] [--fpSize INT] [--RDK] [--minPath INT] [--maxPath INT]
                 [--nBitsPerHash INT] [--useHs 0|1] [--morgan] [--radius INT]
                 [--useFeatures 0|1] [--useChirality 0|1] [--useBondTypes 0|1]
                 [--torsions] [--targetSize INT] [--pairs] [--minLength INT]
                 [--maxLength INT] [--maccs166] [--avalon] [--isQuery 0|1]
                 [--bitFlags INT] [--pattern] [--substruct] [--rdmaccs]
                 [--rdmaccs/1] [--from-atoms INT,INT,...] [--id-tag NAME]
                 [--in FORMAT] [-o FILENAME] [--out FORMAT]
                 [--errors {strict,report,ignore}] [--version]
                 [filenames [filenames ...]]

Generate FPS fingerprints from a structure file using RDKit

positional arguments:
  filenames             input structure files (default is stdin)

optional arguments:
  -h, --help            show this help message and exit
  --fpSize INT          number of bits in the fingerprint. Default of 2048 for
                        RDK, Morgan, topological torsion, atom pair, and
                        pattern fingerprints, and 512 for Avalon fingerprints
  --from-atoms INT,INT,...
                        fingerprint generation must use these atom indices
                        (out of range indices are ignored)
  --id-tag NAME         tag name containing the record id (SD files only)
  --in FORMAT           input structure format (default guesses from filename)
  -o FILENAME, --output FILENAME
                        save the fingerprints to FILENAME (default=stdout)
  --out FORMAT          output structure format (default guesses from output
                        filename, or is 'fps')
  --errors {strict,report,ignore}
                        how should structure parse errors be handled?
                        (default=ignore)
  --version             show program's version number and exit

RDKit topological fingerprints:
  --RDK                 generate RDK fingerprints (default)
  --minPath INT         minimum number of bonds to include in the subgraph
                        (default=1)
  --maxPath INT         maximum number of bonds to include in the subgraph
                        (default=7)
  --nBitsPerHash INT    number of bits to set per path (default=2)
  --useHs 0|1           include information about the number of hydrogens on
                        each atom (default=1)

RDKit Morgan fingerprints:
  --morgan              generate Morgan fingerprints
  --radius INT          radius for the Morgan algorithm (default=2)
  --useFeatures 0|1     use chemical-feature invariants (default=0)
  --useChirality 0|1    include chirality information (default=0)
  --useBondTypes 0|1    include bond type information (default=1)

RDKit Topological Torsion fingerprints:
  --torsions            generate Topological Torsion fingerprints
  --targetSize INT      number of bits in the fingerprint (default=4)

RDKit Atom Pair fingerprints:
  --pairs               generate Atom Pair fingerprints
  --minLength INT       minimum bond count for a pair (default=1)
  --maxLength INT       maximum bond count for a pair (default=30)

166 bit MACCS substructure keys:
  --maccs166            generate MACCS fingerprints

Avalon fingerprints:
  --avalon              generate Avalon fingerprints
  --isQuery 0|1         is the fingerprint for a query structure? (1 if yes, 0
                        if no) (default=0)
  --bitFlags INT        bit flags, SSSBits are 32767 and similarity bits are
                        15761407 (default=15761407)

RDKit Pattern fingerprints:
  --pattern             generate (substructure) pattern fingerprints

881 bit substructure keys:
  --substruct           generate ChemFP substructure fingerprints

ChemFP version of the 166 bit RDKit/MACCS keys:
  --rdmaccs, --rdmaccs/2
                        generate 166 bit RDKit/MACCS fingerprints (version 2)
  --rdmaccs/1           use the version 1 definition for --rdmaccs

This program guesses the input structure format based on the filename
extension. If the data comes from stdin, or the extension name us
unknown, then use "--in" to change the default input format. The
supported format extensions are:

  File Type      Valid FORMATs (use gz if compressed)
  ---------      ------------------------------------
   SMILES        smi, ism, usm, can, smi.gz, ism.gz, usm.gz, can.gz
   SDF           sdf, mol, sd, mdl, sdf.gz, mol.gz, sd.gz, mdl.gz
usage: sdf2fps [-h] [--id-tag TAG] [--fp-tag TAG] [--in FORMAT]
               [--num-bits INT] [--errors {strict,report,ignore}]
               [-o FILENAME] [--out FORMAT] [--software TEXT] [--type TEXT]
               [--version] [--binary] [--binary-msb] [--hex] [--hex-lsb]
               [--hex-msb] [--base64] [--cactvs] [--daylight]
               [--decoder DECODER] [--pubchem]
               [filenames [filenames ...]]

Extract a fingerprint tag from an SD file and generate FPS fingerprints

positional arguments:
  filenames             input SD files (default is stdin)

optional arguments:
  -h, --help            show this help message and exit
  --id-tag TAG          get the record id from TAG instead of the first line
                        of the record
  --fp-tag TAG          get the fingerprint from tag TAG (required)
  --in FORMAT           Specify if the input SD file is uncompressed or gzip
                        compressed
  --num-bits INT        use the first INT bits of the input. Use only when the
                        last 1-7 bits of the last byte are not part of the
                        fingerprint. Unexpected errors will occur if these
                        bits are not all zero.
  --errors {strict,report,ignore}
                        how should structure parse errors be handled?
                        (default=strict)
  -o FILENAME, --output FILENAME
                        save the fingerprints to FILENAME (default=stdout)
  --out FORMAT          output structure format (default guesses from output
                        filename, or is 'fps')
  --software TEXT       use TEXT as the software description
  --type TEXT           use TEXT as the fingerprint type description
  --version             show program's version number and exit

Fingerprint decoding options:
  --binary              Encoded with the characters '0' and '1'. Bit #0 comes
                        first. Example: 00100000 encodes the value 4
  --binary-msb          Encoded with the characters '0' and '1'. Bit #0 comes
                        last. Example: 00000100 encodes the value 4
  --hex                 Hex encoded. Bit #0 is the first bit (1<<0) of the
                        first byte. Example: 01f2 encodes the value \x01\xf2 =
                        498
  --hex-lsb             Hex encoded. Bit #0 is the eigth bit (1<<7) of the
                        first byte. Example: 804f encodes the value \x01\xf2 =
                        498
  --hex-msb             Hex encoded. Bit #0 is the first bit (1<<0) of the
                        last byte. Example: f201 encodes the value \x01\xf2 =
                        498
  --base64              Base-64 encoded. Bit #0 is first bit (1<<0) of first
                        byte. Example: AfI= encodes value \x01\xf2 = 498
  --cactvs              CACTVS encoding, based on base64 and includes a
                        version and bit length
  --daylight            Daylight encoding, which is is base64 variant
  --decoder DECODER     import and use the DECODER function to decode the
                        fingerprint

shortcuts:
  --pubchem             decode CACTVS substructure keys used in PubChem. Same
                        as --software=CACTVS/unknown --type 'CACTVS-
                        E_SCREEN/1.0 extended=2' --fp-
                        tag=PUBCHEM_CACTVS_SUBSKEYS --cactvs
usage: simsearch [-h] [-k INT] [-t FLOAT] [--queries FILENAME] [--NxN]
                 [--query STRING] [--hex-query HEX] [--query-id ID]
                 [--query-structures FILENAME] [--query-format FORMAT]
                 [--target-format FORMAT] [--id-tag NAME]
                 [--errors {strict,report,ignore}] [-o FILENAME] [-c] [-b INT]
                 [--scan] [--memory] [--times] [--version]
                 target_filename

Search an FPS or FPB file for similar fingerprints

positional arguments:
  target_filename       target filename

optional arguments:
  -h, --help            show this help message and exit
  -k INT, --k-nearest INT
                        select the k nearest neighbors (use 'all' for all
                        neighbors)
  -t FLOAT, --threshold FLOAT
                        minimum similarity score threshold
  --queries FILENAME, -q FILENAME
                        filename containing the query fingerprints
  --NxN                 use the targets as the queries, and exclude the self-
                        similarity term
  --query STRING        query as a structure record (default format: 'smi')
  --hex-query HEX       query in hex
  --query-id ID         id for the query or hex-query (default: 'Query1'
  --query-structures FILENAME, -S FILENAME
                        read strutures
  --query-format FORMAT, --in FORMAT
                        input query format (default uses the file extension,
                        else 'fps' for --queries and 'smi' for query
                        structures)
  --target-format FORMAT
                        input target format (default uses the file extension,
                        else 'fps')
  --id-tag NAME         tag containing the record id if --query-structures is
                        an SD file)
  --errors {strict,report,ignore}
                        how should structure parse errors be handled?
                        (default=ignore)
  -o FILENAME, --output FILENAME
                        output filename (default is stdout)
  -c, --count           report counts
  -b INT, --batch-size INT
                        batch size
  --scan                scan the file to find matches (low memory overhead)
  --memory              build and search an in-memory data structure (faster
                        for multiple queries)
  --times               report load and execution times to stderr
  --version             show program's version number and exit
usage: fpcat [-h] [--in FORMAT] [--merge] [-o FILENAME] [--out FORMAT]
             [--reorder] [--preserve-order] [--show-progress] [--version]
             [filename [filename ...]]

Combine multiple fingerprint files into a single file.

positional arguments:
  filename              input fingerprint filenames (default: use stdin)

optional arguments:
  -h, --help            show this help message and exit
  --in FORMAT           input fingerprint format. One of fps or fps.gz.
                        (default guesses from filename or is fps)
  --merge               assume the input fingerprint files are in popcount
                        order and do a merge sort
  -o FILENAME, --output FILENAME
                        save the fingerprints to FILENAME (default=stdout)
  --out FORMAT          output fingerprint format. One of fps or fps.gz.
                        (default guesses from output filename, or is 'fps')
  --reorder             reorder the output fingerprints by popcount
  --preserve-order      save the output fingerprints in the same order as the
                        input (default for FPS output)
  --show-progress       show progress
  --version             show program's version number and exit

Examples:

fpcat can be used to merge multiple FPS files. For example, you might
have used GNU parallel to generate FPS files for each of the PubChem
files, which you want to merge into a single file.:

    fpcat Compound_*.fps -o pubchem.fps

The --merge option is experimental. Use it if the input fingerprints
are in popcount order, because sorted output is a simple merge sort of
the individual sorted inputs. However, this option opens all input
files at the same time, which may exceed your resource limit on file
descriptors. The current implementation also requires a lot of disk
seeks so is slow for many files.

    

Resource usage statistics from testing chemfp:
   Process count: 1
   CPU time: Sys=0:00:00.0, User=-
   Memory: 3.4M
   Disk usage: 20B
   Time elapsed: 0:00:02.1


TEST END: chemfp-1.6.1-py27heb79e2c_1.tar.bz2
--dirty flag and --keep-old-work not specified. Removing build/test folder after successful build/test.

