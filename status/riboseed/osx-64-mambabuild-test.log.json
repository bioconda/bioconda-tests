Updating build index: /Users/runner/conda/conda-bld

TEST START: riboseed-0.4.90-py_0.tar.bz2
Adding in variants from internal_defaults
Adding in variants from /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmppn756ll6/info/recipe/conda_build_config.yaml
  Package                            Version  Build                           Channel                                    Size
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  Install:
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

  + barrnap                              0.9  2                               bioconda/osx-64                          556 KB
  + bcbiogff                           0.6.6  pyh864c0ab_2                    bioconda/noarch                           20 KB
  + bcftools                             1.9  h16e57c4_9                      bioconda/osx-64                          627 KB
  + bedtools                          2.30.0  haa7f73a_2                      bioconda/osx-64                          807 KB
  + biopython                           1.72  py35_0                          conda-forge/osx-64                         2 MB
  + blas                                 1.1  openblas                        conda-forge/osx-64                         1 KB
  + blast                              2.9.0  h58d6d27_1                      bioconda/osx-64                           18 MB
  + boost                             1.68.0  py35h3e44d54_0                  conda-forge/osx-64                       298 KB
  + boost-cpp                         1.68.0  h6f8c590_1000                   conda-forge/osx-64                        19 MB
  + bwa                               0.7.17  h188c3c3_8                      bioconda/osx-64                          208 KB
  + bzip2                              1.0.8  h0d85af4_4                      conda-forge/osx-64                       Cached
  + ca-certificates                2021.5.30  h033912b_0                      conda-forge/osx-64                       Cached
  + certifi                        2018.8.24  py35_1001                       conda-forge/osx-64                       139 KB
  + circos                            0.69.8  hdfd78af_1                      bioconda/noarch                           26 MB
  + coverage                           4.5.1  py35h470a237_1                  conda-forge/osx-64                       212 KB
  + curl                              7.64.0  heae2a1f_0                      conda-forge/osx-64                       138 KB
  + cycler                            0.10.0  py35_0                          conda-forge/osx-64                        13 KB
  + decorator                          5.0.9  pyhd8ed1ab_0                    conda-forge/noarch                        11 KB
  + expat                              2.4.1  he49afe7_0                      conda-forge/osx-64                       Cached
  + fontconfig                        2.12.1  1                               conda-forge/osx-64                       282 KB
  + freetype                           2.6.3  1                               conda-forge/osx-64                       782 KB
  + gettext                         0.19.8.1  haf92f58_1004                   conda-forge/osx-64                         3 MB
  + glimmerhmm                         3.0.4  pl526h0a44026_3                 bioconda/osx-64                           40 MB
  + gmp                                6.2.1  h2e338ed_0                      conda-forge/osx-64                       774 KB
  + gnutls                            3.6.13  hc269f14_0                      conda-forge/osx-64                         2 MB
  + gsl                                  2.5  ha2d443c_1                      conda-forge/osx-64                         3 MB
  + hmmer                              3.3.2  h589c0e0_1                      bioconda/osx-64                           15 MB
  + htslib                               1.9  h3a161e8_7                      bioconda/osx-64                            1 MB
  + icu                                 58.2  h0a44026_1000                   conda-forge/osx-64                        22 MB
  + jenkspy                            0.1.4  py35h470a237_0                  conda-forge/osx-64                        32 KB
  + joblib                            0.14.1  pyh9f0ad1d_0                    conda-forge/noarch                       198 KB
  + jpeg                                  9d  hbcb3906_0                      conda-forge/osx-64                       Cached
  + krb5                              1.16.3  h24a3359_1000                   conda-forge/osx-64                         1 MB
  + libblas                            3.8.0  17_openblas                     conda-forge/osx-64                        11 KB
  + libcblas                           3.8.0  17_openblas                     conda-forge/osx-64                        11 KB
  + libcurl                           7.64.0  h76de61e_0                      conda-forge/osx-64                       521 KB
  + libcxx                            12.0.1  habf9029_0                      conda-forge/osx-64                       Cached
  + libdeflate                           1.0  h1de35cc_1                      bioconda/osx-64                           45 KB
  + libedit                     3.1.20191231  hed1e85f_2                      conda-forge/osx-64                       103 KB
  + libffi                             3.2.1  hb1e8313_1007                   conda-forge/osx-64                        42 KB
  + libgd                              2.2.3  2                               conda-forge/osx-64                       269 KB
  + libgfortran                        3.0.1  0                               conda-forge/osx-64                       495 KB
  + libiconv                            1.16  haf1e3a3_0                      conda-forge/osx-64                       Cached
  + libopenblas                       0.3.10  h0794777_0                      pkgs/main/osx-64                           5 MB
  + libpng                            1.6.37  h7cec526_2                      conda-forge/osx-64                       Cached
  + libssh2                            1.8.0  hf30b1f0_1003                   conda-forge/osx-64                       221 KB
  + libtiff                           4.0.10  ha78913b_1005                   conda-forge/osx-64                       485 KB
  + libxml2                            2.9.9  hd80cff7_2                      conda-forge/osx-64                         1 MB
  + lz4-c                              1.9.3  he49afe7_1                      conda-forge/osx-64                       Cached
  + mafft                              7.487  hb4d813b_0                      bioconda/osx-64                            8 MB
  + matplotlib                         1.5.3  np111py35_0                     conda-forge/osx-64                         5 MB
  + ncurses                              6.1  h0a44026_1002                   conda-forge/osx-64                         1 MB
  + nettle                             3.4.1  h3efe00b_1002                   conda-forge/osx-64                         1 MB
  + networkx                             2.4  py_1                            conda-forge/noarch                         1 MB
  + numpy                             1.11.3  py35_blas_openblashd3ea46f_205  conda-forge/osx-64                         3 MB
  + openblas                          0.2.20  8                               conda-forge/osx-64                        20 MB
  + openjdk                         11.0.9.1  hcf210ce_1                      conda-forge/osx-64                       169 MB
  + openssl                           1.0.2u  h0b31af3_0                      conda-forge/osx-64                         3 MB
  + pandas                            0.23.4  py35hf8a1672_0                  conda-forge/osx-64                        10 MB
  + pcre                                8.45  he49afe7_0                      conda-forge/osx-64                       Cached
  + perl                              5.26.2  hbcb3906_1008                   conda-forge/osx-64                       Cached
  + perl-archive-tar                    2.32  pl526_0                         bioconda/osx-64                          Cached
  + perl-autoloader                     5.74  pl526_2                         bioconda/osx-64                            4 KB
  + perl-carp                           1.38  pl526_3                         bioconda/osx-64                          Cached
  + perl-clone                          0.42  pl526h01d97ff_0                 bioconda/osx-64                           12 KB
  + perl-common-sense                   3.74  pl526_2                         bioconda/osx-64                          Cached
  + perl-compress-raw-bzip2            2.087  pl526h6de7cb9_0                 bioconda/osx-64                          Cached
  + perl-compress-raw-zlib             2.087  pl526h770b8ee_0                 bioconda/osx-64                          Cached
  + perl-config-general                 2.63  pl526_0                         bioconda/osx-64                           41 KB
  + perl-digest-perl-md5                 1.9  pl526_1                         bioconda/osx-64                           11 KB
  + perl-dynaloader                     1.25  pl526_1                         bioconda/osx-64                            4 KB
  + perl-exporter                       5.72  pl526_1                         bioconda/osx-64                          Cached
  + perl-exporter-tiny              1.002001  pl526_0                         bioconda/osx-64                          Cached
  + perl-extutils-makemaker             7.36  pl526_1                         bioconda/osx-64                          Cached
  + perl-font-ttf                       1.06  pl526_0                         bioconda/osx-64                          200 KB
  + perl-gd                             2.68  pl526he941832_0                 bioconda/osx-64                          Cached
  + perl-io-compress                   2.087  pl526h6de7cb9_0                 bioconda/osx-64                          Cached
  + perl-io-string                      1.08  pl526_3                         bioconda/osx-64                           10 KB
  + perl-io-zlib                        1.10  pl526_2                         bioconda/osx-64                          Cached
  + perl-json                           4.02  pl526_0                         bioconda/osx-64                          Cached
  + perl-json-xs                        2.34  pl526h04f5b5a_3                 bioconda/osx-64                          Cached
  + perl-list-moreutils                0.428  pl526_1                         bioconda/osx-64                          Cached
  + perl-list-moreutils-xs             0.428  pl526_0                         bioconda/osx-64                          Cached
  + perl-math-bezier                    0.01  pl526_1                         bioconda/osx-64                            8 KB
  + perl-math-round                     0.07  pl526_1                         bioconda/osx-64                            9 KB
  + perl-math-vecstat                   0.08  pl526_1                         bioconda/osx-64                            9 KB
  + perl-module-implementation          0.09  pl526_2                         bioconda/osx-64                            9 KB
  + perl-module-runtime                0.016  pl526_1                         bioconda/osx-64                           15 KB
  + perl-number-format                  1.75  pl526_3                         bioconda/osx-64                           20 KB
  + perl-params-validate                1.29  pl526h1de35cc_1                 bioconda/osx-64                           25 KB
  + perl-pathtools                      3.75  pl526h1de35cc_1                 bioconda/osx-64                          Cached
  + perl-readonly                       2.05  pl526_0                         bioconda/osx-64                           17 KB
  + perl-regexp-common            2017060201  pl526_0                         bioconda/osx-64                           93 KB
  + perl-scalar-list-utils              1.52  pl526h01d97ff_0                 bioconda/osx-64                          Cached
  + perl-set-intspan                    1.19  pl526_1                         bioconda/osx-64                           22 KB
  + perl-statistics-basic             1.6611  0                               bioconda/osx-64                           27 KB
  + perl-svg                            2.84  pl526_0                         bioconda/osx-64                           37 KB
  + perl-text-format                    0.59  pl526_2                         bioconda/osx-64                           15 KB
  + perl-threaded                     5.26.0  0                               bioconda/osx-64                            4 KB
  + perl-time-hires                   1.9760  pl526h1de35cc_1                 bioconda/osx-64                           22 KB
  + perl-try-tiny                       0.30  pl526_1                         bioconda/osx-64                          Cached
  + perl-types-serialiser                1.0  pl526_2                         bioconda/osx-64                          Cached
  + perl-xml-parser                  2.44_01  pl5262h06ef574_1002             conda-forge/osx-64                       Cached
  + perl-xsloader                       0.24  pl526_0                         bioconda/osx-64                          Cached
  + pip                               20.3.4  pyhd8ed1ab_0                    conda-forge/noarch                         1 MB
  + prank                           v.170427  hb280591_4                      bioconda/osx-64                          372 KB
  + pyaml                             20.4.0  pyh9f0ad1d_0                    conda-forge/noarch                        18 KB
  + pyparsing                          2.4.7  pyh9f0ad1d_0                    conda-forge/noarch                       Cached
  + pysam                             0.15.2  py35h0380709_0                  bioconda/osx-64                            2 MB
  + python                             3.5.5  h5001a0f_2                      conda-forge/osx-64                        13 MB
  + python-dateutil                    2.8.1  py_0                            conda-forge/noarch                       220 KB
  + pytz                              2021.1  pyhd8ed1ab_0                    conda-forge/noarch                       Cached
  + pyyaml                              3.13  py35h470a237_1                  conda-forge/osx-64                       174 KB
  + quast                              5.0.1  py35pl526ha92aebf_0             bioconda/osx-64                           18 MB
  + readline                             7.0  hcfe32e1_1001                   conda-forge/osx-64                       393 KB
  + riboseed                          0.4.90  py_0                            /Users/runner/conda/conda-bld/osx-64       3 MB
  + samtools                             1.9  h8aa4d43_12                     bioconda/osx-64                          304 KB
  + setuptools                        40.4.3  py35_0                          conda-forge/osx-64                       573 KB
  + simplejson                        3.16.1  py35h470a237_0                  conda-forge/osx-64                        99 KB
  + six                               1.16.0  pyh6c4a22f_0                    conda-forge/noarch                       Cached
  + skesa                              2.3.0  hbb32179_1                      bioconda/osx-64                          829 KB
  + spades                             3.9.1  h527b516_1                      bioconda/osx-64                            8 MB
  + sqlite                            3.28.0  h9721f7c_0                      conda-forge/osx-64                         2 MB
  + tk                                8.6.11  hd798d34_0                      conda-forge/osx-64                       Cached
  + wheel                             0.37.0  pyhd8ed1ab_1                    conda-forge/noarch                       Cached
  + xz                                 5.2.5  haf1e3a3_1                      conda-forge/osx-64                       Cached
  + yaml                               0.1.7  h1de35cc_1001                   conda-forge/osx-64                        79 KB
  + zlib                              1.2.11  h7795811_1010                   conda-forge/osx-64                       Cached
  + zstd                               1.4.9  h582d3a0_0                      conda-forge/osx-64                       460 KB

  Summary:

  Install: 129 packages

  Total download: 440 MB

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


## Package Plan ##

  environment location: /Users/runner/conda/conda-bld/riboseed_1630501295702/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_


The following NEW packages will be INSTALLED:

    barrnap:                    0.9-2                                 bioconda   
    bcbiogff:                   0.6.6-pyh864c0ab_2                    bioconda   
    bcftools:                   1.9-h16e57c4_9                        bioconda   
    bedtools:                   2.30.0-haa7f73a_2                     bioconda   
    biopython:                  1.72-py35_0                           conda-forge
    blas:                       1.1-openblas                          conda-forge
    blast:                      2.9.0-h58d6d27_1                      bioconda   
    boost:                      1.68.0-py35h3e44d54_0                 conda-forge
    boost-cpp:                  1.68.0-h6f8c590_1000                  conda-forge
    bwa:                        0.7.17-h188c3c3_8                     bioconda   
    bzip2:                      1.0.8-h0d85af4_4                      conda-forge
    ca-certificates:            2021.5.30-h033912b_0                  conda-forge
    certifi:                    2018.8.24-py35_1001                   conda-forge
    circos:                     0.69.8-hdfd78af_1                     bioconda   
    coverage:                   4.5.1-py35h470a237_1                  conda-forge
    curl:                       7.64.0-heae2a1f_0                     conda-forge
    cycler:                     0.10.0-py35_0                         conda-forge
    decorator:                  5.0.9-pyhd8ed1ab_0                    conda-forge
    expat:                      2.4.1-he49afe7_0                      conda-forge
    fontconfig:                 2.12.1-1                              conda-forge
    freetype:                   2.6.3-1                               conda-forge
    gettext:                    0.19.8.1-haf92f58_1004                conda-forge
    glimmerhmm:                 3.0.4-pl526h0a44026_3                 bioconda   
    gmp:                        6.2.1-h2e338ed_0                      conda-forge
    gnutls:                     3.6.13-hc269f14_0                     conda-forge
    gsl:                        2.5-ha2d443c_1                        conda-forge
    hmmer:                      3.3.2-h589c0e0_1                      bioconda   
    htslib:                     1.9-h3a161e8_7                        bioconda   
    icu:                        58.2-h0a44026_1000                    conda-forge
    jenkspy:                    0.1.4-py35h470a237_0                  conda-forge
    joblib:                     0.14.1-pyh9f0ad1d_0                   conda-forge
    jpeg:                       9d-hbcb3906_0                         conda-forge
    krb5:                       1.16.3-h24a3359_1000                  conda-forge
    libblas:                    3.8.0-17_openblas                     conda-forge
    libcblas:                   3.8.0-17_openblas                     conda-forge
    libcurl:                    7.64.0-h76de61e_0                     conda-forge
    libcxx:                     12.0.1-habf9029_0                     conda-forge
    libdeflate:                 1.0-h1de35cc_1                        bioconda   
    libedit:                    3.1.20191231-hed1e85f_2               conda-forge
    libffi:                     3.2.1-hb1e8313_1007                   conda-forge
    libgd:                      2.2.3-2                               conda-forge
    libgfortran:                3.0.1-0                               conda-forge
    libiconv:                   1.16-haf1e3a3_0                       conda-forge
    libopenblas:                0.3.10-h0794777_0                                
    libpng:                     1.6.37-h7cec526_2                     conda-forge
    libssh2:                    1.8.0-hf30b1f0_1003                   conda-forge
    libtiff:                    4.0.10-ha78913b_1005                  conda-forge
    libxml2:                    2.9.9-hd80cff7_2                      conda-forge
    lz4-c:                      1.9.3-he49afe7_1                      conda-forge
    mafft:                      7.487-hb4d813b_0                      bioconda   
    matplotlib:                 1.5.3-np111py35_0                     conda-forge
    ncurses:                    6.1-h0a44026_1002                     conda-forge
    nettle:                     3.4.1-h3efe00b_1002                   conda-forge
    networkx:                   2.4-py_1                              conda-forge
    numpy:                      1.11.3-py35_blas_openblashd3ea46f_205 conda-forge [blas_openblas]
    openblas:                   0.2.20-8                              conda-forge
    openjdk:                    11.0.9.1-hcf210ce_1                   conda-forge
    openssl:                    1.0.2u-h0b31af3_0                     conda-forge
    pandas:                     0.23.4-py35hf8a1672_0                 conda-forge
    pcre:                       8.45-he49afe7_0                       conda-forge
    perl:                       5.26.2-hbcb3906_1008                  conda-forge
    perl-archive-tar:           2.32-pl526_0                          bioconda   
    perl-autoloader:            5.74-pl526_2                          bioconda   
    perl-carp:                  1.38-pl526_3                          bioconda   
    perl-clone:                 0.42-pl526h01d97ff_0                  bioconda   
    perl-common-sense:          3.74-pl526_2                          bioconda   
    perl-compress-raw-bzip2:    2.087-pl526h6de7cb9_0                 bioconda   
    perl-compress-raw-zlib:     2.087-pl526h770b8ee_0                 bioconda   
    perl-config-general:        2.63-pl526_0                          bioconda   
    perl-digest-perl-md5:       1.9-pl526_1                           bioconda   
    perl-dynaloader:            1.25-pl526_1                          bioconda   
    perl-exporter:              5.72-pl526_1                          bioconda   
    perl-exporter-tiny:         1.002001-pl526_0                      bioconda   
    perl-extutils-makemaker:    7.36-pl526_1                          bioconda   
    perl-font-ttf:              1.06-pl526_0                          bioconda   
    perl-gd:                    2.68-pl526he941832_0                  bioconda   
    perl-io-compress:           2.087-pl526h6de7cb9_0                 bioconda   
    perl-io-string:             1.08-pl526_3                          bioconda   
    perl-io-zlib:               1.10-pl526_2                          bioconda   
    perl-json:                  4.02-pl526_0                          bioconda   
    perl-json-xs:               2.34-pl526h04f5b5a_3                  bioconda   
    perl-list-moreutils:        0.428-pl526_1                         bioconda   
    perl-list-moreutils-xs:     0.428-pl526_0                         bioconda   
    perl-math-bezier:           0.01-pl526_1                          bioconda   
    perl-math-round:            0.07-pl526_1                          bioconda   
    perl-math-vecstat:          0.08-pl526_1                          bioconda   
    perl-module-implementation: 0.09-pl526_2                          bioconda   
    perl-module-runtime:        0.016-pl526_1                         bioconda   
    perl-number-format:         1.75-pl526_3                          bioconda   
    perl-params-validate:       1.29-pl526h1de35cc_1                  bioconda   
    perl-pathtools:             3.75-pl526h1de35cc_1                  bioconda   
    perl-readonly:              2.05-pl526_0                          bioconda   
    perl-regexp-common:         2017060201-pl526_0                    bioconda   
    perl-scalar-list-utils:     1.52-pl526h01d97ff_0                  bioconda   
    perl-set-intspan:           1.19-pl526_1                          bioconda   
    perl-statistics-basic:      1.6611-0                              bioconda   
    perl-svg:                   2.84-pl526_0                          bioconda   
    perl-text-format:           0.59-pl526_2                          bioconda   
    perl-threaded:              5.26.0-0                              bioconda   
    perl-time-hires:            1.9760-pl526h1de35cc_1                bioconda   
    perl-try-tiny:              0.30-pl526_1                          bioconda   
    perl-types-serialiser:      1.0-pl526_2                           bioconda   
    perl-xml-parser:            2.44_01-pl5262h06ef574_1002           conda-forge
    perl-xsloader:              0.24-pl526_0                          bioconda   
    pip:                        20.3.4-pyhd8ed1ab_0                   conda-forge
    prank:                      v.170427-hb280591_4                   bioconda   
    pyaml:                      20.4.0-pyh9f0ad1d_0                   conda-forge
    pyparsing:                  2.4.7-pyh9f0ad1d_0                    conda-forge
    pysam:                      0.15.2-py35h0380709_0                 bioconda   
    python:                     3.5.5-h5001a0f_2                      conda-forge
    python-dateutil:            2.8.1-py_0                            conda-forge
    pytz:                       2021.1-pyhd8ed1ab_0                   conda-forge
    pyyaml:                     3.13-py35h470a237_1                   conda-forge
    quast:                      5.0.1-py35pl526ha92aebf_0             bioconda   
    readline:                   7.0-hcfe32e1_1001                     conda-forge
    riboseed:                   0.4.90-py_0                           local      
    samtools:                   1.9-h8aa4d43_12                       bioconda   
    setuptools:                 40.4.3-py35_0                         conda-forge
    simplejson:                 3.16.1-py35h470a237_0                 conda-forge
    six:                        1.16.0-pyh6c4a22f_0                   conda-forge
    skesa:                      2.3.0-hbb32179_1                      bioconda   
    spades:                     3.9.1-h527b516_1                      bioconda   
    sqlite:                     3.28.0-h9721f7c_0                     conda-forge
    tk:                         8.6.11-hd798d34_0                     conda-forge
    wheel:                      0.37.0-pyhd8ed1ab_1                   conda-forge
    xz:                         5.2.5-haf1e3a3_1                      conda-forge
    yaml:                       0.1.7-h1de35cc_1001                   conda-forge
    zlib:                       1.2.11-h7795811_1010                  conda-forge
    zstd:                       1.4.9-h582d3a0_0                      conda-forge

Preparing transaction: ...working... done
Verifying transaction: ...working... done
Executing transaction: ...working... The default QUAST package does not include:
* GRIDSS (needed for structural variants detection)
* SILVA 16S rRNA database (needed for reference genome detection in metagenomic datasets)
* BUSCO tools and databases (needed for searching BUSCO genes) -- works in Linux only!

To be able to use those, please run
    quast-download-gridss
    quast-download-silva
    quast-download-busco

done
export PREFIX=/Users/runner/conda/conda-bld/riboseed_1630501295702/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_
export SRC_DIR=/Users/runner/conda/conda-bld/riboseed_1630501295702/test_tmp
import: 'riboSeed'
import: 'riboSeed'
riboSeed v0.4.90
Contact: Nick Waters <nickp60@gmail.com>
Description: A suite of tools to perform de fere novo assembly to bridge
             gaps caused by rDNA repeats

Usage:   ribo <command> [options]

Available commands:
  run        execute pipeline (scan, select, seed, and more)
  scan       reannotate rRNAs in a FASTA file
  select     group rRNA annotations into rDNA operons
  seed       perform de fere novo assembly
  snag       extract rDNA regions and plot entropy
  sim        perform simulations used in manuscript
  sketch     plot results from a de fere novo assembly
  stack      compare coverage depth in rDNA regions to rest of genome
  score      score batches of assemblies with BLASTn
  swap       swap contigs from assemblies
  spec       use assembly graph to speculate number of rDNAs
  structure  view the rRNA operon structure across several genomes
  config     write out a blank config file to be used with `run`
  try        runs the pipeline on some included sample data

usage: ribo scan -o OUTPUT [-k {bac,euk,arc,mito}] [-t ID_THRESH]
                 [-b BARRNAP_EXE] [-n NAME] [-c CORES] [-m MIN_LENGTH]
                 [-v {1,2,3,4,5}] [-h]
                 contigs

Given a directory of one or more chromosomes as fasta files, this facilitates
reannotation of rDNA regions with Barrnap and outputs all sequences as a
single, annotated genbank file

positional arguments:
  contigs               either a (multi)fasta or a directory containing one or
                        more chromosomal sequences in fasta format

required named arguments:
  -o OUTPUT, --output OUTPUT
                        output directory; default: /Users/runner/conda/conda-
                        bld/riboseed_1630501295702/test_tmp

optional arguments:
  -k {bac,euk,arc,mito}, --kingdom {bac,euk,arc,mito}
                        whether to look for eukaryotic, archaeal, or bacterial
                        rDNA; default: bac
  -t ID_THRESH, --id_thresh ID_THRESH
                        partial rRNA hits below this threshold will be
                        ignored. default: 0.5
  -b BARRNAP_EXE, --barrnap_exe BARRNAP_EXE
                        path to barrnap executable; default: barrnap
  -n NAME, --name NAME  name to give the contig files; default: infered from
                        file
  -c CORES, --cores CORES
                        number of threads/cores to use; default: 2
  -m MIN_LENGTH, --min_length MIN_LENGTH
                        skip the scaffold if its shorter than this default: 0
  -v {1,2,3,4,5}, --verbosity {1,2,3,4,5}
                        Logger writes debug to file in output dir; this sets
                        verbosity level sent to stderr. 1 = debug(), 2 =
                        info(), 3 = warning(), 4 = error() and 5 = critical();
                        default: 2
  -h, --help            Displays this help message
usage: ribo select [-h] -o OUTPUT [-f FEATURE] [-s SPECIFIC_FEATURES]
                   [--clobber] [-c CLUSTERS] [-v VERBOSITY] [--debug]
                   genbank_genome

This is used to identify and cluster rRNA regions from a gb file, returnsa
text file with the clusters

positional arguments:
  genbank_genome        Genbank file (WITH SEQUENCE)

optional arguments:
  -h, --help            show this help message and exit

required named arguments:
  -o OUTPUT, --output OUTPUT
                        output directory;default: None

optional arguments:
  -f FEATURE, --feature FEATURE
                        Feature, rRNA or RRNA; default: rRNA
  -s SPECIFIC_FEATURES, --specific_features SPECIFIC_FEATURES
                        colon:separated -- specific features; default:
                        16S:23S:5S
  --clobber             overwrite previous output files: default: False
  -c CLUSTERS, --clusters CLUSTERS
                        number of rDNA clusters;if submitting multiple
                        records, must be a colon:separated list whose length
                        matches number of genbank records. Default is inferred
                        from specific feature with fewest hits
  -v VERBOSITY, --verbosity VERBOSITY
                        1 = debug(), 2 = info(), 3 = warning(), 4 = error()
                        and 5 = critical(); default: 2
  --debug               Enable debug messages
usage: ribo stack -o OUTPUT [-b BAM] -r RIBOSEED_DIR [-n N_SAMPLES]
                  [-e EXPERIMENT_NAME] [-i] [-v {1,2,3,4,5}] [-h]
                  riboScan_dir

This facilitates the mapping of reads to a reference and comparison of
coverage depths in rDNA regions to assess disparity in rDNA counts between the
reference and your reads

positional arguments:
  riboScan_dir          We need the gff and fasta files from your riboScan
                        run.

required named arguments:
  -o OUTPUT, --output OUTPUT
                        output directory; default: /Users/runner/conda/conda-
                        bld/riboseed_1630501295702/test_tmp

optional arguments:
  -b BAM, --bam BAM     BAM file; tested with BWA output; default: None
  -r RIBOSEED_DIR, --riboSeed_dir RIBOSEED_DIR
                        look for BAM file in this riboSeed output directory
  -n N_SAMPLES, --n_samples N_SAMPLES
                        Number of regions to compare rDNA depth to; must be
                        greater than 1; default: 10
  -e EXPERIMENT_NAME, --experiment_name EXPERIMENT_NAME
                        prefix for results files; default: riboStack
  -i, --infer           If --infer, ignore the name and length of reference
                        sequence, using the BAM header instead default: False
  -v {1,2,3,4,5}, --verbosity {1,2,3,4,5}
                        Logger writes debug to file in output dir; this sets
                        verbosity level sent to stderr. 1 = debug(), 2 =
                        info(), 3 = warning(), 4 = error() and 5 = critical();
                        default: 2
  -h, --help            Displays this help message
usage: ribo run [-r reference.fasta] -c config_file [-o /output/dir/]
                [-e experiment_name] [-K {bac,euk,arc,mito}] [-S 16S:23S:5S]
                [--clusters str] [-C str] [-F reads_F.fq] [-R reads_R.fq]
                [-S1 reads_S.fq] [-s int]
                [--ref_as_contig {ignore,infer,trusted,untrusted}] [--linear]
                [--subassembler {spades,skesa}] [-j] [-l int]
                [-k 21,33,55,77,99,127] [--force_kmers] [-p 21,33,55,77,99]
                [-d int] [--clean_temps] [-i int] [--skip_control]
                [-v {1,2,3,4,5}] [--cores int] [--memory int]
                [--damn_the_torpedos]
                [--stages {sketch,spec,snag,score,stack,none} [{sketch,spec,snag,score,stack,none} ...]]
                [-t {1,2,4}] [--additional_libs str] [-z] [-h] [--version]

Run the riboSeed pipeline of scan, select, and seed, plus any additional
stages. Uses a config file to wrangle all the args not available via these
commandline args. This can either be run by providing (as minimum) a
reference, some reads, and an output directory; or, if you have a completed
config file, you can run it with just that.

optional arguments:
  -r reference.fasta, --reference_fasta reference.fasta
                        path to a (multi)fasta or a directory containing one
                        or more chromosomal sequences in fasta format.
                        Required, unless using a config file
  -c config_file, --config config_file
                        config file; if none given, create one; default:
                        /Users/runner/conda/conda-
                        bld/riboseed_1630501295702/test_tmp
  -o /output/dir/, --output /output/dir/
                        output directory; default: /Users/runner/conda/conda-b
                        ld/riboseed_1630501295702/test_tmp/2021-09-01T1305_rib
                        oSeed_pipeline_results/
  -e experiment_name, --experiment_name experiment_name
                        prefix for results files; default: inferred
  -K {bac,euk,arc,mito}, --Kingdom {bac,euk,arc,mito}
                        whether to look for eukaryotic, archaeal, or bacterial
                        rDNA; default: bac
  -S 16S:23S:5S, --specific_features 16S:23S:5S
                        colon:separated -- specific features; default:
                        16S:23S:5S
  --clusters str        number of rDNA clusters;if submitting multiple
                        records, must be a colon:separated list whose length
                        matches number of genbank records. Default is inferred
                        from specific feature with fewest hits
  -C str, --cluster_file str
                        clustered_loci file output from riboSelect;this is
                        created by default from run_riboSeed, but if you don't
                        agree with the operon structure predicted by
                        riboSelect, you can use your alternate clustered_loci
                        file. default: None
  -F reads_F.fq, --fastq1 reads_F.fq
                        path to forward fastq file, can be compressed
  -R reads_R.fq, --fastq2 reads_R.fq
                        path to reverse fastq file, can be compressed
  -S1 reads_S.fq, --fastq_single1 reads_S.fq
                        path to single fastq file
  -s int, --score_min int
                        If using smalt, this sets the '-m' param; default with
                        smalt is inferred from read length. If using BWA,
                        reads mapping with ASscore lower than this will be
                        rejected; default with BWA is half of read length
  --ref_as_contig {ignore,infer,trusted,untrusted}
                        ignore: reference will not be used in subassembly.
                        trusted: SPAdes will use the seed sequences as a
                        --trusted-contig; untrusted: SPAdes will treat as
                        --untrusted-contig. infer: if mapping percentage over
                        80%, 'trusted'; else 'untrusted'. See SPAdes docs for
                        details. default: infer
  --linear              if genome is known to not be circular and a region of
                        interest (including flanking bits) extends past
                        chromosome end, this extends the seqence past
                        chromosome origin forward by --padding; default: False
  --subassembler {spades,skesa}
                        assembler to use for subassembly scheme. SPAdes is
                        used by default, but Skesa is a new addition that
                        seems to work for subassembly and is faster
  -j, --just_seed       Don't do an assembly, just generate the long read
                        'seeds'; default: False
  -l int, --flanking_length int
                        length of flanking regions, in bp; default: 1000
  -k 21,33,55,77,99,127, --kmers 21,33,55,77,99,127
                        kmers used for final assembly, separated by commas
                        such as21,33,55,77,99,127. Can be set to 'auto', where
                        SPAdes chooses. We ensure kmers are not too big or too
                        close to read length; default: 21,33,55,77,99,127
  --force_kmers         skip checking to see if kmerchoice is appropriate to
                        read length. Sometimes kmers longer than reads can
                        help in the final assembly, as the long reads
                        generated by riboSeed contain kmers longer than the
                        read length
  -p 21,33,55,77,99, --pre_kmers 21,33,55,77,99
                        kmers used during seeding assemblies, separated bt
                        commas; default: 21,33,55,77,99
  -d int, --min_flank_depth int
                        a subassembly won't be performed if this minimum depth
                        is not achieved on both the 3' and5' end of the
                        pseudocontig. default: 0
  --clean_temps         if --clean_temps, mapping files will be removed once
                        they are no no longer needed during the mapping
                        iterations to save space; default: False
  -i int, --iterations int
                        if iterations>1, multiple seedings will occur after
                        subassembly of seed regions; if setting --target_len,
                        seedings will continue until --iterations are
                        completed or --target_len is matched or exceeded;
                        default: 3
  --skip_control        if --skip_control, no de novo assembly will be done;
                        default: False
  -v {1,2,3,4,5}, --verbosity {1,2,3,4,5}
                        Logger writes debug to file in output dir; this sets
                        verbosity level sent to stderr. 1 = debug(), 2 =
                        info(), 3 = warning(), 4 = error() and 5 = critical();
                        default: 2
  --cores int           cores used; default: None
  --memory int          cores for multiprocessing; default: 8
  --damn_the_torpedos   Ignore certain errors, full speed ahead!
  --stages {sketch,spec,snag,score,stack,none} [{sketch,spec,snag,score,stack,none} ...]
                        Which assessment stages you wish to run: sketch, spec,
                        snag, score, stack. Any combination thereof
  -t {1,2,4}, --threads {1,2,4}
                        if your cores are hyperthreaded, set number threads to
                        the number of threads per processer.If unsure, see
                        'cat /proc/cpuinfo' under 'cpu cores', or 'lscpu'
                        under 'Thread(s) per core'.: 1
  --additional_libs str
                        include these libraries in final assembly in addition
                        to the reads supplied as -F and -R. They must be
                        supplied according to SPAdes arg naming scheme. Use at
                        own risk.default: None
  -z, --serialize       if --serialize, runs seeding and assembly without
                        multiprocessing. We recommend this for machines with
                        less than 8GB RAM: False
  -h, --help            Displays this help message
  --version             show program's version number and exit
usage: ribo seed -r REFERENCE_GENBANK -o OUTPUT [-F FASTQ1] [-R FASTQ2]
                 [-S1 FASTQS1] [-l FLANKING] [-j] [-e EXPERIMENT_NAME]
                 [--mapper {smalt,bwa}] [-k KMERS] [-p PRE_KMERS]
                 [--force_kmers] [-s SCORE_MIN] [-a MIN_ASSEMBLY_LEN]
                 [--include_shorts] [--damn_the_torpedos] [--subtract]
                 [--linear] [-d MIN_FLANK_DEPTH]
                 [--subassembler {spades,skesa}]
                 [--ref_as_contig {ignore,infer,trusted,untrusted}]
                 [--additional_libs ADDITIONAL_LIBS] [--clean_temps]
                 [--enable-spades-error-corection] [--skip_control]
                 [-i ITERATIONS] [-v {1,2,3,4,5}] [--target_len TARGET_LEN]
                 [-z] [--consensus] [--smalt_scoring SMALT_SCORING]
                 [--mapper_args MAPPER_ARGS] [--spades_exe SPADES_EXE]
                 [--samtools_exe SAMTOOLS_EXE] [--skesa_exe SKESA_EXE]
                 [--smalt_exe SMALT_EXE] [--bwa_exe BWA_EXE]
                 [--quast_exe QUAST_EXE] [--bcftools_exe BCFTOOLS_EXE]
                 [-c CORES] [-t {1,2,4}] [-m MEMORY] [--version] [-h]
                 clustered_loci_txt

Given cluster file of rDNA regions from riboSelect and either paired-end or
single-end reads, assembles the mapped reads into pseduocontig 'seeds', and
uses those with the reads to runde fere novo and de novo assembly with SPAdes

positional arguments:
  clustered_loci_txt    output from riboSelect

required named arguments:
  -r REFERENCE_GENBANK, --reference_genbank REFERENCE_GENBANK
                        genbank reference, used to estimate insert sizes, and
                        compare with QUAST
  -o OUTPUT, --output OUTPUT
                        output directory; default: /Users/runner/conda/conda-
                        bld/riboseed_1630501295702/test_tmp

optional arguments:
  -F FASTQ1, --fastq1 FASTQ1
                        forward fastq reads, can be compressed
  -R FASTQ2, --fastq2 FASTQ2
                        reverse fastq reads, can be compressed
  -S1 FASTQS1, --fastqS1 FASTQS1
                        single fastq reads
  -l FLANKING, --flanking_length FLANKING
                        length of flanking regions, in bp; default: 1000
  -j, --just_seed       Don't do an assembly, just generate the long read
                        'seeds'; default: False
  -e EXPERIMENT_NAME, --experiment_name EXPERIMENT_NAME
                        prefix for results files; default: riboSeed
  --mapper {smalt,bwa}  available mappers: smalt and bwa; default: bwa
  -k KMERS, --kmers KMERS
                        kmers used for final assembly, separated by commas
                        such as21,33,55,77,99,127 . Can be set to 'auto',
                        where SPAdes chooses. We ensure kmers are not too big
                        or too close to read length; default:
                        21,33,55,77,99,127
  -p PRE_KMERS, --pre_kmers PRE_KMERS
                        kmers used during seeding assemblies, separated bt
                        commas; default: 21,33,55,77,99
  --force_kmers         skip checking to see if kmerchoice is appropriate to
                        read length. Sometimes kmers longer than reads can
                        help in the final assembly, as the long reads
                        generated by riboSeed contain kmers longer than the
                        read length
  -s SCORE_MIN, --score_min SCORE_MIN
                        If using smalt, this sets the '-m' param; default with
                        smalt is inferred from read length. If using BWA,
                        reads mapping with ASscore lower than this will be
                        rejected; default with BWA is half of read length
  -a MIN_ASSEMBLY_LEN, --min_assembly_len MIN_ASSEMBLY_LEN
                        if initial SPAdes assembly largest contig is not at
                        least as long as --min_assembly_len, reject. Set this
                        to the length of the seed sequence; if it is not
                        achieved, seeding across regions will likely fail;
                        default: 6000
  --include_shorts      if assembled contig is smaller than
                        --min_assembly_len, contig will still be included in
                        assembly; default: inferred
  --damn_the_torpedos   Ignore certain errors, full speed ahead!
  --subtract            if --subtract reads already used in previousround of
                        subassembly will not be included in subsequent rounds.
                        This can lead to problems with multiple mapping and
                        inflated coverage.
  --linear              if genome is known to not be circular and a region of
                        interest (including flanking bits) extends past
                        chromosome end, this extends the seqence past
                        chromosome origin forward by --padding; default: False
  -d MIN_FLANK_DEPTH, --min_flank_depth MIN_FLANK_DEPTH
                        a subassembly will not be performed if this minimum
                        depth is not achieved on both the 3' and5' end of the
                        pseudocontig. default: 0
  --subassembler {spades,skesa}
                        assembler to use for subassembly scheme. SPAdes is
                        used by default, but Skesa is a new addition that
                        seems to work for subassembly and is faster
  --ref_as_contig {ignore,infer,trusted,untrusted}
                        ignore: reference will not be used in subassembly.
                        trusted: SPAdes will use the seed sequences as a
                        --trusted-contig; untrusted: SPAdes will treat as
                        --untrusted-contig. infer: if mapping percentage over
                        80%, 'trusted'; else 'untrusted'. See SPAdes docs for
                        details. default: infer
  --additional_libs ADDITIONAL_LIBS
                        include this string (usually additional library, but
                        could be other SPAdes args) these libraries in final
                        assembly in addition to the reads supplied as -F and
                        -R. They must be supplied according to SPAdes arg
                        naming scheme. Use at own risk.default: None
  --clean_temps         if --clean_temps, mapping files will be removed once
                        they are no no longer needed during the mapping
                        iterations to save space; default: False
  --enable-spades-error-corection
                        Default behaviour should be to skip read error
                        correction: http://cab.spbu.ru/benchmarking-tools-for-
                        de-novo-microbial-assembly/ . This re-enables
                        itdefault: False
  --skip_control        if --skip_control, no de novo assembly will be done;
                        default: False
  -i ITERATIONS, --iterations ITERATIONS
                        if iterations>1, multiple seedings will occur after
                        subassembly of seed regions; if setting --target_len,
                        seedings will continue until --iterations are
                        completed or --target_len is matched or exceeded;
                        default: 3
  -v {1,2,3,4,5}, --verbosity {1,2,3,4,5}
                        Logger writes debug to file in output dir; this sets
                        verbosity level sent to stderr. 1 = debug(), 2 =
                        info(), 3 = warning(), 4 = error() and 5 = critical();
                        default: 2
  --target_len TARGET_LEN
                        if set, iterations will continue until contigs reach
                        this length, or max iterations (set by --iterations)
                        have been completed. Set as fraction of original seed
                        length by giving a decimal between 0 and 5, or set as
                        an absolute number of base pairs by giving an integer
                        greater than 50. Not used by default
  -z, --serialize       if --serialize, runs seeding and assembly without
                        multiprocessing. This is recommended for machines with
                        less than 8GB RAM: False
  --consensus           if --initial_consensus, generate a mpileup-based
                        consesnsus instead of doing a proper spades
                        subassembly
  --smalt_scoring SMALT_SCORING
                        if mapping with SMALT, submit custom smalt scoring via
                        smalt -S scorespec option; default:
                        match=1,subst=-4,gapopen=-4,gapext=-3
  --mapper_args MAPPER_ARGS
                        submit custom parameters to mapper. And by mapper, I
                        mean bwa, cause we dont support this option for SMALT,
                        sorry. This requires knowledge of your chosen mapper's
                        optional arguments. Proceed with caution! default: -L
                        0,0 -U 0 -a
  --spades_exe SPADES_EXE
                        Path to SPAdes executable; default: spades.py
  --samtools_exe SAMTOOLS_EXE
                        Path to samtools executable; default: samtools
  --skesa_exe SKESA_EXE
                        Path to skesa executable; default: skesa
  --smalt_exe SMALT_EXE
                        Path to smalt executable; default: smalt
  --bwa_exe BWA_EXE     Path to BWA executable; default: bwa
  --quast_exe QUAST_EXE
                        Path to quast executable; default: quast
  --bcftools_exe BCFTOOLS_EXE
                        Path to bcftools executable; default: bcftools
  -c CORES, --cores CORES
                        cores to be used; default: None
  -t {1,2,4}, --threads {1,2,4}
                        if your cores are hyperthreaded, set number threads to
                        the number of threads per processer.If unsure, see
                        'cat /proc/cpuinfo' under 'cpu cores', or 'lscpu'
                        under 'Thread(s) per core'.: 1
  -m MEMORY, --memory MEMORY
                        system memory available; default: 8
  --version             show program's version number and exit
  -h, --help            Displays this help message
usage: ribo snag [-o OUTPUT] [-n NAME] [-l FLANKING] [--msa_kmers]
                 [--skip_kmers] [--skip_blast] [--linear] [-p PADDING]
                 [-v VERBOSITY] [--title TITLE] [--clobber] [--no_revcomp]
                 [-j] [--msa_tool {mafft,prank}] [--prank_exe PRANK_EXE]
                 [--mafft_exe MAFFT_EXE] [--barrnap_exe BARRNAP_EXE]
                 [--makeblastdb_exe MAKEBLASTDB_EXE]
                 [--kingdom {mito,euk,arc,bac}] [-s SEQ_NAME] [-h]
                 genbank_genome clustered_loci

Use to extract regions of interest based on supplied Locus tags and evaluate
the extracted regions

positional arguments:
  genbank_genome        Genbank file (WITH SEQUENCE)
  clustered_loci        output from riboSelect

required named arguments:
  -o OUTPUT, --output OUTPUT
                        output directory; default: /Users/runner/conda/conda-
                        bld/riboseed_1630501295702/test_tmp

optional arguments:
  -n NAME, --name NAME  rename the contigs with this prefix; default: date
                        (YYYYMMDD)
  -l FLANKING, --flanking_length FLANKING
                        length of flanking regions, in bp; default: 1000
  --msa_kmers           calculate kmer similarity based on aligned sequences
                        instead of raw sequences;default: False
  --skip_kmers          Just plot entropy if MSAdefault: False
  --skip_blast          Skip running BLAST Comparisonsdefault: False
  --linear              if the genome is not circular, and an region of
                        interest (including flanking bits) extends past
                        chromosome end, this extends the sequence past
                        chromosome origin forward by 5kb; default: False
  -p PADDING, --padding PADDING
                        if treating as circular, this controls the length of
                        sequence added to the 5' and 3' ends to allow for
                        selecting regions that cross the chromosome's origin;
                        default: 5000
  -v VERBOSITY, --verbosity VERBOSITY
                        1 = debug(), 2 = info(), 3 = warning(), 4 = error()
                        and 5 = critical(); default: 2
  --title TITLE         String for plot title; uses matplotlib math processing
                        for italics (you know, the LaTeX $..$ syntax):
                        https://matplotlib.org/users/mathtext.html default:
                        inferred from --seq_name
  --clobber             overwrite previous output files; default: False
  --no_revcomp          default returns reverse complimented seq if majority
                        of regions on reverse strand. if --no_revcomp, this is
                        overwridden; default: False
  -j, --just_extract    Dont bother making an MSA, calculating Shannon
                        Entropy, BLASTing, generating plots etc; just extract
                        the regions ; default: False
  --msa_tool {mafft,prank}
                        Path to PRANK executable; default: mafft
  --prank_exe PRANK_EXE
                        Path to PRANK executable; default: prank
  --mafft_exe MAFFT_EXE
                        Path to MAFFT executable; default: mafft
  --barrnap_exe BARRNAP_EXE
                        Path to barrnap executable; default: barrnap
  --makeblastdb_exe MAKEBLASTDB_EXE
                        Path to makeblastdb executable; default: makeblastdb
  --kingdom {mito,euk,arc,bac}
                        kingdom for barrnap; default: bac
  -s SEQ_NAME, --seq_name SEQ_NAME
                        name of genome; default: inferred from file name, as
                        many casesinvolve multiple contigs, etc, making
                        inference from record intractable
  -h, --help            Displays this help message
usage: ribo sketch [-o OUTDIR] [-f ASSEMBLY_EXT] [-g REF_EXT] [-n NAMES] [-r]
                   [--mauve_jar MAUVE_JAR] [-v {1,2,3,4,5}] [-h]
                   indir

Pretty up the plots generated by mauve contig mover

positional arguments:
  indir                 dir containing a genbank file, assembly filesas
                        fastas. Usually the 'mauve' dir in the riboSeed
                        results

required named arguments:
  -o OUTDIR, --outdir OUTDIR
                        output directory; default: None

optional arguments:
  -f ASSEMBLY_EXT, --assembly_ext ASSEMBLY_EXT
                        extension of assemblies, usually fasta
  -g REF_EXT, --ref_ext REF_EXT
                        extension of reference, usually gb
  -n NAMES, --names NAMES
                        name the resulting plot and output dirs; comma-
                        separate
  -r, --replot          replot, using a previous run of analyses
  --mauve_jar MAUVE_JAR
                        path to Mauve.jar; default:
                        ~/mauve_snapshot_2015-02-13/Mauve.jar
  -v {1,2,3,4,5}, --verbosity {1,2,3,4,5}
                        Logger writes debug to file in output dir; this sets
                        verbosity level sent to stderr. 1 = debug(), 2 =
                        info(), 3 = warning(), 4 = error() and 5 = critical();
                        default: 2
  -h, --help            Displays this help message

Resource usage statistics from testing riboseed:
   Process count: 4
   CPU time: Sys=0:00:00.6, User=0:00:01.7
   Memory: 77.2M
   Disk usage: 20B
   Time elapsed: 0:00:14.5


TEST END: riboseed-0.4.90-py_0.tar.bz2
--dirty flag and --keep-old-work not specified. Removing build/test folder after successful build/test.

